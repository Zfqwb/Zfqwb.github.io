<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaSE进阶18天思维导图</title>
    <link href="/blog-public/2021/04/07/Mermaid1/"/>
    <url>/blog-public/2021/04/07/Mermaid1/</url>
    
    <content type="html"><![CDATA[<p>出不来图请等一等,图很大,四百多行渲染有点慢</p><span id="more"></span><pre><code class=" mermaid">graph LR        id0(JavaSE进阶)---id01(第一天)        subgraph day01        id01(第一天)---id011(01-案例驱动教学模式介绍)        id01(第一天)---id012(02-分类思想)        id01(第一天)---id013(03-包的概述和定义)        id01(第一天)---id014(04-包的注意事项和类访问)        id01(第一天)---id015(05-需求说明和效果演示)        id01(第一天)---id016(06-环境搭建)        id01(第一天)---id017(07-菜单搭建)        id01(第一天)---id018(08-基本添加功能一思路分析)        id01(第一天)---id019(09-基本添加功能一代码实现)        id01(第一天)---id0110(10-添加功能-加入学号判断)        id01(第一天)---id0111(11-添加功能-问题分析)        id01(第一天)---id0112(12-statio关键字特点)        id01(第一天)---id0113(13-stati注意事项学号存在问题解决)        id01(第一天)---id0114(14-查看学生-代码实现)        id01(第一天)---id0115(15-删除功能一代码实现)        id01(第一天)---id0116(16-修改功能一代码实现)        id01(第一天)---id0117(17-学生管理系统代码优化)        id01(第一天)---id0118(18-老师管理系统环境搭建)        end        id0(JavaSE进阶)---id02(第二天)        subgraph day02        id02(第二天)---id021(01-继承入门)        id02(第二天)---id022(02-继承的好处和弊端)        id02(第二天)---id023(03-继承的特点)        id02(第二天)---id024(04-继承中成员变量的访问特点)        id02(第二天)---id025(05-this和super访问成员的格式)        id02(第二天)---id026(06-继承中成员方法的访问特点)        id02(第二天)---id027(07-方法重写概述和应用场景)        id02(第二天)---id028(08-方法重写的注意事项)        id02(第二天)---id029(09-权限修饰符)        id02(第二天)---id0210(10-继承中构造方法的访问特点)        id02(第二天)---id0211(11-构造方法的访问特点-父类没有空参构造方法)        id02(第二天)---id0212(12-代码优化和内存图解)        id02(第二天)---id0213(13-黑马信息管理系统-集成改进)        id02(第二天)---id0214(14-抽象类入门)        id02(第二天)---id0215(15-抽象类的注意事项)        id02(第二天)---id0216(16-模板设计模式)        id02(第二天)---id0217(17-final关键字)        id02(第二天)---id0218(18-黑马信息管理-系统抽象类改进)        id02(第二天)---id0219(19-代码块)        id02(第二天)---id0220(20-黑马信息管理系统一代码块改进)        end        id0(JavaSE进阶)---id03(第三天)        subgraph day03        id03(第三天)---id031(01-黑马信息管理系统-集合改进)        id03(第三天)---id032(02-黑马信息管理系统-抽取公共Dao)        id03(第三天)---id033(03-接口的介绍)        id03(第三天)---id034(04-接口的定义和特点)        id03(第三天)---id035(05-接口中的成员特点)        id03(第三天)---id036(06-JDK8版本中成员的特点-默认方法)        id03(第三天)---id037(07-JDK8版本中接口成员的特点-静态方法)        id03(第三天)---id038(08-JDK9版本中接口成员的特点私有方法)        id03(第三天)---id039(09-类和接口的关系)        id03(第三天)---id0310(10-黑马信息管理系统改进一接口改进)        id03(第三天)---id0311(11-黑马信息管理系统一问题分析一多态引入)        id03(第三天)---id0312(12-多态的前提条件)        id03(第三天)---id0313(13-多态中成员访问的特点)        id03(第三天)---id0314(14多态的好处和弊端)        id03(第三天)---id0315(15-多态中的转型)        id03(第三天)---id0316(16-多态中转型存在的风险和解决方案)        id03(第三天)---id0317(17-黑马信息管理系统多态改进)        end        id0(JavaSE进阶)---id04(第四天)        subgraph day04        id04(第四天)---id041(01-内部类-成员内部类)        id04(第四天)---id042(02-私有成员内部类-静态成员内部类)        id04(第四天)---id043(03-局部内部类)        id04(第四天)---id044(04-匿名内部类)        id04(第四天)---id045(05-匿名内部类的使用场景)        id04(第四天)---id046(06-Lambda初体验和函数式编程思想)        id04(第四天)---id047(07-Lambda表达式的格式说明和前提条件)        id04(第四天)---id048(08-Lambda练习-带参数无返回值)        id04(第四天)---id049(09-Lambda练习-无参数有返回值)        id04(第四天)---id0410(10-Lambd练习-带参数带返回值)        id04(第四天)---id0411(11-Lambd的省略模式)        id04(第四天)---id0412(12-匿名内部类和Lambda表达式的区别)        end        id0(JavaSE进阶)---id05(第五天)        subgraph day05        id05(第五天)---id051(01-API基本使用)        id05(第五天)---id052(02-API-Math)        id05(第五天)---id053(03-API-system)        id05(第五天)---id054(04-Object-toString)        id05(第五天)---id055(05-Object-equals)        id05(第五天)---id056(06-Object-面试题)        id05(第五天)---id057(07-API-Obiects)        id05(第五天)---id058(08-BigDecimal-构造)        id05(第五天)---id059(09-BigDecimal-四则运算)        id05(第五天)---id0510(10-BigDecimal-特殊方法)        id05(第五天)---id0511(11-基本数据类型包装类)        id05(第五天)---id0512(12-Integer-获得对象)        id05(第五天)---id0513(13-Integer-自动装箱和自动拆箱)        id05(第五天)---id0514(14-Integer-类型转换)        id05(第五天)---id0515(15-Integer-练习)        id05(第五天)---id0516(16-数组的高级操作-二分查找思路分析)        id05(第五天)---id0517(17-数组的高级操作-二分查找代码实现)        id05(第五天)---id0518(18-数组的高级操作-冒泡排序思路分析)        id05(第五天)---id0519(19-数组的高级操作-冒泡排序代码实现)        id05(第五天)---id0520(20-递归一概念)        id05(第五天)---id0521(21-递归一求阶乘代码买现)        id05(第五天)---id0522(22-递归-内存图)        id05(第五天)---id0523(23-数组的高级操作-快排核心思路分析)        id05(第五天)---id0524(24-数组的高级操作-快排核心代码实现)        id05(第五天)---id0525(25-数组的高级操作-快排完整实现)        id05(第五天)---id0526(26-Arrays)        end        id0(JavaSE进阶)---id06(第六天)        subgraph day06        id06(第六天)---id061(01-时间日期类一概述)        id06(第六天)---id062(02-时间日期类-Date构造方法)        id06(第六天)---id063(03-时间日期类-Date成员方法)        id06(第六天)---id064(04-时间日期类-simpledateformat)        id06(第六天)---id065(05-时间日期类-练习)        id06(第六天)---id066(06-时间日期类-JDK8的体验)        id06(第六天)---id067(07-JDK8时间类一获取时间对象)        id06(第六天)---id068(08-JDK8时间类-获取时间中的每个值)        id06(第六天)---id069(09-JDK8时间类-转换方法)        id06(第六天)---id0610(10-JDK8时间类-格式化和解析)        id06(第六天)---id0611(11-JDK8时间类-plus系列的方法)        id06(第六天)---id0612(12-JDK8时间类-minus系列的方法)        id06(第六天)---id0613(13-JDK8时间类-with系列的方法)        id06(第六天)---id0614(14-JDK8时间类一时间间隔对象)        id06(第六天)---id0615(15-JDK8时间类一小结)        id06(第六天)---id0616(16-异常的体系结构和异常的分类)        id06(第六天)---id0617(17-虚拟机默认处理异常的方式)        id06(第六天)---id0618(18-throws声明异常)        id06(第六天)---id0619(19-声明异常的注意事项)        id06(第六天)---id0620(20-throw抛出异常)        id06(第六天)---id0621(21-try. ..catch自已处理异常)        id06(第六天)---id0622(22-try. ..catch的常见问题)        id06(第六天)---id0623(23-throwable成员方法)        id06(第六天)---id0624(24-异常的小练习)        id06(第六天)---id0625(25-自定义异常)        end        id0(JavaSE进阶)---id07(第七天)        subgraph day07        id07(第七天)---id071(01-集合概述-集合与数组的对比)        id07(第七天)---id072(02-集合概述-集合体系结构)        id07(第七天)---id073(03-Collection-常见成员方法)        id07(第七天)---id074(04-Collection-迭代器基本使用)        id07(第七天)---id075(05-Collection-迭代器原理分析)        id07(第七天)---id076(06-Collection-迭代器删除方法)        id07(第七天)---id077(07一增强for-基本格式)        id07(第七天)---id078(08-增强for-注意点)        id07(第七天)---id079(09-Collection-练习)        id07(第七天)---id0710(10-List-概述和基本使用)        id07(第七天)---id0711(11-List-特有方法)        id07(第七天)---id0712(12-数据结构一栈和队列)        id07(第七天)---id0713(13-数据结构-数组和链表)        id07(第七天)---id0714(14-Arraylist-源码解析)        id07(第七天)---id0715(15-LinkedList-基本运用)        id07(第七天)---id0716(16-LinkedList-特有功能)        id07(第七天)---id0717(17-LinkedList-源码解析)        end        id0(JavaSE进阶)---id08(第八天)        subgraph day08        id08(第八天)---id081(01-泛型一概述)        id08(第八天)---id082(02-泛型一泛型类的使用)        id08(第八天)---id083(03-泛型-自定义泛型类)        id08(第八天)---id084(04-泛型-泛型方法的使用)        id08(第八天)---id085(05-泛型-自定义泛型方法)        id08(第八天)---id086(06-泛型一泛型接口)        id08(第八天)---id087(07-泛型-通配符)        id08(第八天)---id088(08-Set-概述)        id08(第八天)---id089(09-Set-基本使用)        id08(第八天)---id0810(10-TreeSet-基本使用)        id08(第八天)---id0811(11-TreeSet-自然排序)        id08(第八天)---id0812(12-自然排序-练习)        id08(第八天)---id0813(13-TreeSet-比较器排序)        id08(第八天)---id0814(14-TreeSet两种比较方式的对比)        id08(第八天)---id0815(15-数据结构-二叉树)        id08(第八天)---id0816(16-数据结构-二叉查找树)        id08(第八天)---id0817(17-数据结构一二叉查找树添加节点)        id08(第八天)---id0818(18-数据结构-平衡二叉树)        id08(第八天)---id0819(19-平衡二叉树一左旋)        id08(第八天)---id0820(20-平衡二叉树-右旋)        id08(第八天)---id0821(21-平衡二叉树一小结)        id08(第八天)---id0822(22-平衡二叉树-左左和左右)        id08(第八天)---id0823(23-平衡二叉树-右右和右左)        id08(第八天)---id0824(24-小结)        end        id0(JavaSE进阶)---id09(第九天)        subgraph day09        id09(第九天)---id091(01-红黑树一概述)        id09(第九天)---id092(02-红黑树红黑规则)        id09(第九天)---id093(03-红黑树一添加节点的默认颜色)        id09(第九天)---id094(04-红黑树一添加节点后如何保证红黑规则1)        id09(第九天)---id095(05-红黑树一添加节点后如何保证红黑规则2)        id09(第九天)---id096(06-红黑树-练习)        id09(第九天)---id097(07-HashSet-基本使用)        id09(第九天)---id098(08-HashSet-哈希值)        id09(第九天)---id099(09-HashSet-JDK7底层原理解析)        id09(第九天)---id0910(10-HashSet-JDK8底层优化)        id09(第九天)---id0911(11-HashSet-练习)        id09(第九天)---id0912(12-HashSet-小结)        id09(第九天)---id0913(13-Map-基本使用)        id09(第九天)---id0914(14-Map-常用方法)        id09(第九天)---id0915(15-Map-第一种遍历方式)        id09(第九天)---id0916(16-Map-第二种遍历方式)        id09(第九天)---id0917(17-HashMap-原理解析)        id09(第九天)---id0918(18-HashMap-练习)        id09(第九天)---id0919(19-TreeMap-原理解析)        id09(第九天)---id0920(20-TreeMap-练习)        end        id0(JavaSE进阶)---id10(第十天)        subgraph day10        id10(第十天)---id101(01-可变参数)        id10(第十天)---id102(02-创建不可变的集合)        id10(第十天)---id103(03-Stream流-初体验)        id10(第十天)---id104(04-Stream流-思想特点)        id10(第十天)---id105(05-Stream流-获取方法)        id10(第十天)---id106(06-中间方法-filter)        id10(第十天)---id107(07-其他常用中间方法)        id10(第十天)---id108(08-Stream流-终结方法)        id10(第十天)---id109(09-Stream流一不能直接修改数据源中的数据)        id10(第十天)---id1010(10收集方法-toList和toSet)        id10(第十天)---id1011(11-收集方法-toMap)        id10(第十天)---id1012(12-Stream流-练习)        end        id0(JavaSE进阶)---id11(第十一天)        subgraph day11        id11(第十一天)---id111(01-File和IO的概述)        id11(第十一天)---id112(02-File的构造方法)        id11(第十一天)---id113(03-绝对路径和相对路径)        id11(第十一天)---id114(04-Fi1e的创建功能)        id11(第十一天)---id115(05-Fie的删除方法)        id11(第十一天)---id116(06-File的获取和判断方法)        id11(第十一天)---id117(07-File的listFile方法)        id11(第十一天)---id118(08-File练习一)        id11(第十一天)---id119(09-File练习二)        id11(第十一天)---id1110(10-Fie练习二的递归分析)        id11(第十一天)---id1111(11-File练习三)        id11(第十一天)---id1112(12-IO的概述)        id11(第十一天)---id1113(13-IO的分类)        id11(第十一天)---id1114(14-字节流-字节输出流快速入门)        id11(第十一天)---id1115(15-字节流注意事项)        id11(第十一天)---id1116(16-字节流一次写多个数据)        id11(第十一天)---id1117(17-字节流-两个问题)        id11(第十一天)---id1118(18-字节流-trycatch捕获异常)        id11(第十一天)---id1119(19-字节流-小结)        id11(第十一天)---id1120(20-字节流-字节输入流基本学习)        id11(第十一天)---id1121(21-字节流-读多个字节)        id11(第十一天)---id1122(22-字节流-文件复制)        id11(第十一天)---id1123(23-字节流定义小数组拷贝)        id11(第十一天)---id1124(24-字节流-小数组拷贝原理)        id11(第十一天)---id1125(25-缓冲流-次读写一个字节代码实现)        id11(第十一天)---id1126(26-缓冲流-一次读写一个字节原理)        id11(第十一天)---id1127(27-缓冲流一次读写一个字节数组)        id11(第十一天)---id1128(28-小结)        end        id0(JavaSE进阶)---id12(第十二天)        subgraph day12        id12(第十二天)---id121(01-字节流操作文本文件出现乱码的问题)        id12(第十二天)---id122(02-字符流-编码表)        id12(第十二天)---id123(03-字符流编码和解码的方法)        id12(第十二天)---id124(04-字节流读取中文出现乱码的原因)        id12(第十二天)---id125(05-字符流-读取中文的过程)        id12(第十二天)---id126(06-字符流-写出数据)        id12(第十二天)---id127(07-字符流-写出数据的注意事项)        id12(第十二天)---id128(08-字符流-flush和close方法)        id12(第十二天)---id129(09-字符流-读取数据)        id12(第十二天)---id1210(10-字符流-练习)        id12(第十二天)---id1211(11-字符缓冲输入流-读取数据)        id12(第十二天)---id1212(12-字符缓冲输出流-输出数据)        id12(第十二天)---id1213(13-缓冲流特有方法)        id12(第十二天)---id1214(14-缓冲流-练习)        id12(第十二天)---id1215(15-10流-小结)        id12(第十二天)---id1216(16-转换流一概念)        id12(第十二天)---id1217(17-转换流-指定编码读写)        id12(第十二天)---id1218(18-对象操作流-基本特点)        id12(第十二天)---id1219(19-对象操作流-序列化)        id12(第十二天)---id1220(20-对象操作流-反序列化)        id12(第十二天)---id1221(21-对象操作流两个注意点)        id12(第十二天)---id1222(22-对象操作流-两个注意点2)        id12(第十二天)---id1223(23-对象操作流-练习)        id12(第十二天)---id1224(24-Properties-概述)        id12(第十二天)---id1225(25-Properties-作为map集合的基本使用)        id12(第十二天)---id1226(26-Properties-特有方法)        id12(第十二天)---id1227(27-Properties-load)        id12(第十二天)---id1228(28-Properties-store)        end        id0(JavaSE进阶)---id13(第十三天)        subgraph day13        id13(第十三天)---id131(01-多线程概述-初步了解多线程)        id13(第十三天)---id132(02-多线程概述一并发和并行)        id13(第十三天)---id133(03-多线程概述一进程和线程)        id13(第十三天)---id134(04-多线程的实现方式-继承Thread)        id13(第十三天)---id135(05-多线程的实现方式-两个小问题)        id13(第十三天)---id136(06-多线的实现方式-实现Runnable接口)        id13(第十三天)---id137(07-多线程的实现方式-实现callable接口)        id13(第十三天)---id138(08-三种实现方式的对比)        id13(第十三天)---id139(09-Thread方法-设置获取名字)        id13(第十三天)---id1310(10-Thread方法-获得线程对象)        id13(第十三天)---id1311(11-Thread方法-sleep)        id13(第十三天)---id1312(12-Thread方法一线程的优先级)        id13(第十三天)---id1313(13-Thread方法-守护线程)        id13(第十三天)---id1314(14-线程安全问题-卖票案例实现)        id13(第十三天)---id1315(15-线程安全问题-原因分析)        id13(第十三天)---id1316(16-线程安全问题-同步代码块)        id13(第十三天)---id1317(17-线程安全问题一锁对象唯一)        id13(第十三天)---id1318(18-线程安全问题-同步方法)        id13(第十三天)---id1319(19-线程安全问题-lock)        id13(第十三天)---id1320(20-死锁)        id13(第十三天)---id1321(21-生产者和消费者思路分析)        id13(第十三天)---id1322(22-生产者和消费者-代码实现)        id13(第十三天)---id1323(23-生产者和消费者代码改写)        id13(第十三天)---id1324(24-阻塞队列基本使用)        id13(第十三天)---id1325(25-阻塞队列一实现等待唤醒机制)        end        id0(JavaSE进阶)---id14(第十四天)        subgraph day14        id14(第十四天)---id141(01-线程状态)        id14(第十四天)---id142(02-线程池一基本原理)        id14(第十四天)---id143(03-线程池-Executors默认线程池)        id14(第十四天)---id144(04-线程池-Executors创建指定上限的线程池)        id14(第十四天)---id145(05-线程池-ThreadPoolExecutor)        id14(第十四天)---id146(05-线程池一参数详解)        id14(第十四天)---id147(07-线程池一非默认任务拒绝策略)        id14(第十四天)---id148(08-volatile-问题)        id14(第十四天)---id149(09-volatile解决)        id14(第十四天)---id1410(10-synchronized解决)        id14(第十四天)---id1411(11-原子性)        id14(第十四天)---id1412(12-volatile关键字不能保证原子性)        id14(第十四天)---id1413(13-原子性-AtomicInteger)        id14(第十四天)---id1414(14-AtomicInteger-内存解析)        id14(第十四天)---id1415(15-AtomicInteger-源码解析)        id14(第十四天)---id1416(16-悲观锁和乐观锁)        id14(第十四天)---id1417(17-并发工具类-Hashtable)        id14(第十四天)---id1418(18-并发工具类-ConcurrentHashMap基本使用)        id14(第十四天)---id1419(19-并发工具类ConcurrentHashMap1.7原理)        id14(第十四天)---id1420(20-并发工具类ConcurrentHashMap1.8原理)        id14(第十四天)---id1421(21-并发工具类CountDownLatch)        id14(第十四天)---id1422(22-并发工具类-Semaphore)        end        id0(JavaSE进阶)---id15(第十五天)        subgraph day15        id15(第十五天)---id151(01-网络编程三要素一概述)        id15(第十五天)---id152(02-网络编程三要素-IP)        id15(第十五天)---id153(03-网络编程-常见命令)        id15(第十五天)---id154(04-网络编程-Inetaddress类)        id15(第十五天)---id155(05-网络编程三要素-端口)        id15(第十五天)---id156(06-网络编程三要素-协议)        id15(第十五天)---id157(07-UDP-发送端)        id15(第十五天)---id158(08-UDP一接收端)        id15(第十五天)---id159(09-UDP练习)        id15(第十五天)---id1510(10-UDP-三种通讯方式)        id15(第十五天)---id1511(11-UDP-组播代码实现)        id15(第十五天)---id1512(12-UDP-广播代码实现)        id15(第十五天)---id1513(13-TCP-客户端)        id15(第十五天)---id1514(14-TCP-服务器)        id15(第十五天)---id1515(15-TCP-原理分析)        id15(第十五天)---id1516(16-TCP-三次握手)        id15(第十五天)---id1517(17-TCP-四次挥手)        id15(第十五天)---id1518(18-TCP-练习1)        id15(第十五天)---id1519(19-TCP-练习2)        id15(第十五天)---id1520(20-服务端优化一循环)        id15(第十五天)---id1521(21-服务端优化-UUID)        id15(第十五天)---id1522(22-服务端优化-多线程)        id15(第十五天)---id1523(23-服务端优化一线程池)        end        id0(JavaSE进阶)---id16(第十六天)        subgraph day16        id16(第十六天)---id161(01-类加载器-初步了解)        id16(第十六天)---id162(02-类加载器一类加载时机)        id16(第十六天)---id163(03-类加载的过程-加载)        id16(第十六天)---id164(04-类加载的过程-链接)        id16(第十六天)---id165(05-类加载的过程-初始化和小结)        id16(第十六天)---id166(06-类加载器一分类)        id16(第十六天)---id167(07-类加载器一双亲委派模型)        id16(第十六天)---id168(08-类加载器-常用方法)        id16(第十六天)---id169(09-反射一概述)        id16(第十六天)---id1610(10-反射一获取class对象)        id16(第十六天)---id1611(11-反射-获取Constructor对象)        id16(第十六天)---id1612(12-反射-利用Constructor创建对象)        id16(第十六天)---id1613(13-反射一小结)        id16(第十六天)---id1614(14-反射一获取Field对象)        id16(第十六天)---id1615(15-反射-利用Field赋值和获取值)        id16(第十六天)---id1616(16-反射一获取Method对象)        id16(第十六天)---id1617(17-反射-利用Method象运行方法)        end        id0(JavaSE进阶)---id17(第十七天)        subgraph day17        id17(第十七天)---id171(01-xml-作为配置文件的优势)        id17(第十七天)---id172(02-xml一概述)        id17(第十七天)---id173(03-xml-标签的规则)        id17(第十七天)---id174(04-xml-语法规则)        id17(第十七天)---id175(05-xml-DOM解析思想)        id17(第十七天)---id176(06-xml-解析的准备工作)        id17(第十七天)---id177(07-xml-解析代码实现)        id17(第十七天)---id178(08-DTD入门案例-编写DTD)        id17(第十七天)---id179(09-DTD入门案例-引入DTD)        id17(第十七天)---id1710(10-DTD约束-三种引入方式)        id17(第十七天)---id1711(11-DTD语法规则-定义元素)        id17(第十七天)---id1712(12-DTD语法规则-定义属性)        id17(第十七天)---id1713(13-schema-schema和dtd的区别)        id17(第十七天)---id1714(14-schema入门案例-编写schema)        id17(第十七天)---id1715(15-schema入门案例-引入schema)        id17(第十七天)---id1716(16-schema入门案例-定义属性)        id17(第十七天)---id1717(17-枚举-什么是枚举)        id17(第十七天)---id1718(18-枚举定义格式)        id17(第十七天)---id1719(19-枚举-枚举的特点)        id17(第十七天)---id1720(20-枚举-枚举的方法)        id17(第十七天)---id1721(21-注解一注解的优势)        id17(第十七天)---id1722(22-注解一注解的概述)        id17(第十七天)---id1723(23-注解一自定义注解)        id17(第十七天)---id1724(24-注解一特殊属性value)        id17(第十七天)---id1725(25-注解-自定义注解练习)        id17(第十七天)---id1726(26注解-元注解)        end        id0(JavaSE进阶)---id18(第十八天)        subgraph day18        id18(第十八天)---id181(01-单元测试一概述)        id18(第十八天)---id182(02-单元测试-基本使用)        id18(第十八天)---id183(03-单元测试-三个常用注解before, test, after)        id18(第十八天)---id184(04-日志技术-日志技术与输出语句的区别)        id18(第十八天)---id185(05-日志技术-体系结构和Log4J)        id18(第十八天)---id186(06-日志技术-Log4J入门案例)        id18(第十八天)---id187(07一日志技术-Log4J三个核心)        id18(第十八天)---id188(08-日志技术-配置文件详解)        id18(第十八天)---id189(09-日志技术-Log4J在项目中的应用)        end</code></pre>]]></content>
    
    
    <categories>
      
      <category>Mermaid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea常用快捷键</title>
    <link href="/blog-public/2021/04/07/idea1/"/>
    <url>/blog-public/2021/04/07/idea1/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + O</td><td align="center">重写方法</td></tr><tr><td align="center">Ctrl + I</td><td align="center">实现方法</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Idea</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用过程中遇到的Error及解决办法</title>
    <link href="/blog-public/2021/04/06/h2/"/>
    <url>/blog-public/2021/04/06/h2/</url>
    
    <content type="html"><![CDATA[<h3 id="Error1"><a href="#Error1" class="headerlink" title="Error1"></a>Error1</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&#x27;can not read a block mapping entry; a multiline key may not be an implicit key&#x27;</span>,<br><br></code></pre></div></td></tr></table></figure><p><code>categories:  冒号后面要加空格再写分类</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改hosts解决GitHub网站无法访问</title>
    <link href="/blog-public/2021/04/05/g1/"/>
    <url>/blog-public/2021/04/05/g1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub官网</a></p><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h3><p> 无法访问此网站</p><p><strong>github.com</strong> 的响应时间过长。</p><p>请试试以下办法：</p><ul><li>检查网络连接</li><li><a href="chrome-error://chromewebdata/#buttons">检查代理服务器和防火墙</a></li><li><a href="javascript:diagnoseErrors()">运行 Windows 网络诊断</a></li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h3 id="1-安装Hosts-File-Editor-1-5-10-这个修改host很方便"><a href="#1-安装Hosts-File-Editor-1-5-10-这个修改host很方便" class="headerlink" title="1.安装Hosts File Editor+ 1.5.10,这个修改host很方便"></a>1.安装Hosts File Editor+ 1.5.10,这个修改host很方便</h3><h3 id="2-查询网址对应的-IP-地址"><a href="#2-查询网址对应的-IP-地址" class="headerlink" title="2.查询网址对应的 IP 地址"></a>2.查询网址对应的 IP 地址</h3><p>查询地址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>点击下面 <code>域名</code>（domain）自动跳转到 <code>ipaddress.com</code> 查询结果页面：</p><ol><li><a href="https://github.com.ipaddress.com/">github.com</a></li><li><a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></li><li><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></li></ol><h3 id="3-修改本地系统-hosts-文件-将查询到的信息按以下格式填入hosts中"><a href="#3-修改本地系统-hosts-文件-将查询到的信息按以下格式填入hosts中" class="headerlink" title="3.修改本地系统 hosts 文件,将查询到的信息按以下格式填入hosts中"></a>3.修改本地系统 hosts 文件,将查询到的信息按以下格式填入hosts中</h3><p><code>格式</code></p><p>IP 空格 域名</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">140.82.113.4 github.com<br>199.232.69.194 github.global.ssl.fastly.net<br>185.199.111.153 assets-cdn.github.com<br>185.199.110.153 assets-cdn.github.comh<br>185.199.109.153 assets-cdn.github.com<br>185.199.108.153 assets-cdn.github.com<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>连接超时</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day18</title>
    <link href="/blog-public/2021/04/02/SAd18/"/>
    <url>/blog-public/2021/04/02/SAd18/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day17 反射</title>
    <link href="/blog-public/2021/04/02/SAd17/"/>
    <url>/blog-public/2021/04/02/SAd17/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="1-类的加载器-了解"><a href="#1-类的加载器-了解" class="headerlink" title="1.类的加载器(了解)"></a>1.类的加载器(了解)</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>​        负责将.class文件加载到内存中，并为之生成对应的 java.lang.Class 对象。        </p><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><h4 id="1-BootstrapClassLoader"><a href="#1-BootstrapClassLoader" class="headerlink" title="1:BootstrapClassLoader"></a>1:BootstrapClassLoader</h4><h5 id="1-启动类加载器-内置类加载器"><a href="#1-启动类加载器-内置类加载器" class="headerlink" title="1.启动类加载器/内置类加载器"></a>1.启动类加载器/内置类加载器</h5><h5 id="2-负责加载-JAVA-HOME中jre-lib-rt-jar里所有的class"><a href="#2-负责加载-JAVA-HOME中jre-lib-rt-jar里所有的class" class="headerlink" title="2.负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class."></a>2.负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class.</h5><h5 id="3-JDK中的默认有的类，都由该加载器加载。"><a href="#3-JDK中的默认有的类，都由该加载器加载。" class="headerlink" title="3.JDK中的默认有的类，都由该加载器加载。"></a>3.JDK中的默认有的类，都由该加载器加载。</h5><h5 id="4-由C-实现，程序员无法获取也无法操作。"><a href="#4-由C-实现，程序员无法获取也无法操作。" class="headerlink" title="4.由C++实现，程序员无法获取也无法操作。"></a>4.由C++实现，程序员无法获取也无法操作。</h5><h4 id="2-ExtensionClassLoader"><a href="#2-ExtensionClassLoader" class="headerlink" title="2:ExtensionClassLoader"></a>2:ExtensionClassLoader</h4><h5 id="平台类加载器"><a href="#平台类加载器" class="headerlink" title="平台类加载器"></a>平台类加载器</h5><h5 id="负责加载java平台中扩展功能的一些jar包"><a href="#负责加载java平台中扩展功能的一些jar包" class="headerlink" title="负责加载java平台中扩展功能的一些jar包."></a>负责加载java平台中扩展功能的一些jar包.</h5><h5 id="包括-JAVA-HOME中“jre-lib-jar”或-Djava-ext-dirs指定目录下的jar包"><a href="#包括-JAVA-HOME中“jre-lib-jar”或-Djava-ext-dirs指定目录下的jar包" class="headerlink" title="包括$JAVA_HOME中“jre\lib*.jar”或-Djava.ext.dirs指定目录下的jar包"></a>包括$JAVA_HOME中“jre\lib*.jar”或-Djava.ext.dirs指定目录下的jar包</h5><h4 id="3-SystemClassLoader"><a href="#3-SystemClassLoader" class="headerlink" title="3:SystemClassLoader"></a>3:SystemClassLoader</h4><h5 id="应用类加载器-也叫AppClassLoader"><a href="#应用类加载器-也叫AppClassLoader" class="headerlink" title="应用类加载器, 也叫AppClassLoader"></a>应用类加载器, 也叫AppClassLoader</h5><h5 id="负责加载classpath中指定的jar包及目录中class"><a href="#负责加载classpath中指定的jar包及目录中class" class="headerlink" title="负责加载classpath中指定的jar包及目录中class."></a>负责加载classpath中指定的jar包及目录中class.</h5><h5 id="就是我们自己写的类都是由该加载器加载"><a href="#就是我们自己写的类都是由该加载器加载" class="headerlink" title="就是我们自己写的类都是由该加载器加载"></a>就是我们自己写的类都是由该加载器加载</h5><h3 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><h5 id="InputStream-is-当前类名-class-getClassLoader-getResourceAsStream-“文件名”"><a href="#InputStream-is-当前类名-class-getClassLoader-getResourceAsStream-“文件名”" class="headerlink" title="InputStream is = 当前类名.class.getClassLoader().getResourceAsStream(“文件名”);"></a>InputStream is = 当前类名.class.getClassLoader().getResourceAsStream(“文件名”);</h5><h5 id="InputStream-is-ClassLoader-getSystemClassLoader-getResourceAsStream-“文件名”"><a href="#InputStream-is-ClassLoader-getSystemClassLoader-getResourceAsStream-“文件名”" class="headerlink" title="InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(“文件名”);"></a>InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(“文件名”);</h5><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><h5 id="配置文件必须放在src根目录下"><a href="#配置文件必须放在src根目录下" class="headerlink" title="配置文件必须放在src根目录下."></a>配置文件必须放在src根目录下.</h5><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1获取类加载器"><a href="#test1获取类加载器" class="headerlink" title="test1获取类加载器"></a>test1获取类加载器</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  获取类加载器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//获取系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//获取系统类加载器的父加载器 --- 平台类加载器</span><br>        ClassLoader classLoader1 = systemClassLoader.getParent();<br><br>        <span class="hljs-comment">//获取平台类加载器的父加载器 --- 启动类加载器</span><br>        ClassLoader classLoader2 = classLoader1.getParent();<br><br>        System.out.println(<span class="hljs-string">&quot;系统类加载器&quot;</span> + systemClassLoader);<br>        System.out.println(<span class="hljs-string">&quot;平台类加载器&quot;</span> + classLoader1);<br>        System.out.println(<span class="hljs-string">&quot;启动类加载器&quot;</span> + classLoader2);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2利用加载器去加载一个指定的文件"><a href="#test2利用加载器去加载一个指定的文件" class="headerlink" title="test2利用加载器去加载一个指定的文件"></a>test2利用加载器去加载一个指定的文件</h4><h5 id="测试类ClassLoaderDemo2"><a href="#测试类ClassLoaderDemo2" class="headerlink" title="测试类ClassLoaderDemo2"></a>测试类ClassLoaderDemo2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span><br>        <span class="hljs-comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span><br><br>        <span class="hljs-comment">//获取系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//利用加载器去加载一个指定的文件</span><br>        <span class="hljs-comment">//参数：文件的路径</span><br>        <span class="hljs-comment">//返回值：字节流。</span><br>        InputStream is = systemClassLoader.getResourceAsStream(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(is);<br><br>        System.out.println(prop);<br><br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="prop-properties"><a href="#prop-properties" class="headerlink" title="prop.properties"></a>prop.properties</h5><p>指定的文件,被加载的文件,可以是配置文件也可以是图片等,放在src根目录下,与类同级</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">zhangsan </span><br><span class="hljs-attr">age</span>=<span class="hljs-string">13</span><br></code></pre></div></td></tr></table></figure><h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>​        所谓的反射，指的是，程序在运行过程中，获“类的字节码”文件，再从“类的字节码”中，获取类的“成员变量”，“成员方法”，“构造方法”，并且使用他们，这种现象就叫做反射。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li><div class="hljs code-wrapper"><pre><code>    1.先获取“类的字节码”</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>    2.从“类的字节码”获取“成员变量”，“成员方法”，“构造方法”</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>     3.使用这些“成员变量”，“成员方法”，“构造方法”</code></pre></div></li></ul><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="ReflectDemo1"><a href="#ReflectDemo1" class="headerlink" title="ReflectDemo1"></a>ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        <span class="hljs-comment">//获取系统类加载器，加载prop.properties文件</span><br>        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        <span class="hljs-comment">//创建Properties集合</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//将文件中的数据读取到集合当中</span><br>        prop.load(is);<br>        is.close();<br><br>        <span class="hljs-comment">//--------下面的代码就是利用反射创建对象并调用方法---------------------</span><br><br>        <span class="hljs-comment">//获取字节码文件对象</span><br>        Class clazz = Class.forName(prop.getProperty(<span class="hljs-string">&quot;className&quot;</span>));<br>        <span class="hljs-comment">//获取构造器对象</span><br>        Constructor constructor = clazz.getConstructor();<br>        <span class="hljs-comment">//利用构造器对象创建一个对象</span><br>        Object o = constructor.newInstance();<br>        <span class="hljs-comment">//获取方法对象</span><br>        Method method = clazz.getMethod(prop.getProperty(<span class="hljs-string">&quot;methodName&quot;</span>));<br>        <span class="hljs-comment">//运行方法</span><br>        method.invoke(o);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Teacher"><a href="#class-Teacher" class="headerlink" title="class Teacher"></a>class Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师在上课&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Worker"><a href="#class-Worker" class="headerlink" title="class Worker"></a>class Worker</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;工人在工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Worker&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="prop-properties-1"><a href="#prop-properties-1" class="headerlink" title="prop.properties"></a>prop.properties</h5><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">className</span>=<span class="hljs-string">com.itheima.myreflect1.Worker</span><br><span class="hljs-attr">methodName</span>=<span class="hljs-string">work</span><br></code></pre></div></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><h4 id="1-可以越过访问权限。"><a href="#1-可以越过访问权限。" class="headerlink" title="1.可以越过访问权限。"></a>1.可以越过访问权限。</h4><h4 id="2-可以提高代码的“可扩展性”"><a href="#2-可以提高代码的“可扩展性”" class="headerlink" title="2.可以提高代码的“可扩展性”"></a>2.可以提高代码的“可扩展性”</h4><h4 id="3-是很多框架的底层实现。"><a href="#3-是很多框架的底层实现。" class="headerlink" title="3.是很多框架的底层实现。"></a>3.是很多框架的底层实现。</h4><h2 id="3-反射-前期操作"><a href="#3-反射-前期操作" class="headerlink" title="3.反射-前期操作"></a>3.反射-前期操作</h2><h3 id="获取类的字节码文件-获取class对象的三种方式"><a href="#获取类的字节码文件-获取class对象的三种方式" class="headerlink" title="获取类的字节码文件(获取class对象的三种方式)"></a>获取类的字节码文件(获取class对象的三种方式)</h3><h4 id="1-Class-clazz-Class-forName-“类的全名称”"><a href="#1-Class-clazz-Class-forName-“类的全名称”" class="headerlink" title="1.Class clazz = Class.forName(“类的全名称”);"></a>1.Class clazz = Class.forName(“类的全名称”);</h4><h4 id="2-Class-clazz-类名-class"><a href="#2-Class-clazz-类名-class" class="headerlink" title="2.Class clazz = 类名.class;"></a>2.Class clazz = 类名.class;</h4><h4 id="3-Class-clazz-对象-getClass"><a href="#3-Class-clazz-对象-getClass" class="headerlink" title="3.Class clazz = 对象.getClass();"></a>3.Class clazz = 对象.getClass();</h4><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><h5 id="class-ReflectDemo1"><a href="#class-ReflectDemo1" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取class对象的三种方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.Class类中的静态方法forName(&quot;全类名&quot;)</span><br>            <span class="hljs-comment">//全类名:包名 + 类名</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect2.Student&quot;</span>);<br>        System.out.println(clazz);<br><br>        <span class="hljs-comment">//2.通过class属性来获取</span><br>        Class clazz2 = Student.class;<br>        System.out.println(clazz2);<br><br>        <span class="hljs-comment">//3.利用对象的getClass方法来获取class对象</span><br>        <span class="hljs-comment">//getClass方法是定义在Object类中.</span><br>        Student s = <span class="hljs-keyword">new</span> Student();<br>        Class clazz3 = s.getClass();<br>        System.out.println(clazz3);<br><br>        System.out.println(clazz == clazz2);<br>        System.out.println(clazz2 == clazz3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="破解权限"><a href="#破解权限" class="headerlink" title="破解权限"></a>破解权限</h3><h4 id="void-setAccessible-boolean-flag"><a href="#void-setAccessible-boolean-flag" class="headerlink" title="void setAccessible(boolean flag);"></a>void setAccessible(boolean flag);</h4><p>​         //如果flag是true，则暴力破解，越过权限。<br>​        //构造方法，成员变量，成员方法三者均可使用</p><h2 id="4-反射-构造方法"><a href="#4-反射-构造方法" class="headerlink" title="4.反射-构造方法"></a>4.反射-构造方法</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法完成"><a href="#通过Class类的方法完成" class="headerlink" title="通过Class类的方法完成"></a>通过Class类的方法完成</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Constructor[] getConstructors();</td><td align="center">//获取所有的public修饰的构造方法</td></tr><tr><td align="center">Constructor[] getDeclaredConstructors();</td><td align="center">//获取所有的构造方法(包含private)</td></tr><tr><td align="center">Constructor getConstructor(Class… parameterTypes);</td><td align="center">//获取指定的public修饰的构造方法</td></tr><tr><td align="center">Constructor getDeclaredConstructor(Class… parameterTypes);</td><td align="center">//获取指定的构造方法(包含private)</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><h4 id="通过Constructor类的方法"><a href="#通过Constructor类的方法" class="headerlink" title="通过Constructor类的方法"></a>通过Constructor类的方法</h4><h5 id="T-newInstance-Object…-initargs"><a href="#T-newInstance-Object…-initargs" class="headerlink" title="T  newInstance(Object… initargs)"></a>T  newInstance(Object… initargs)</h5><p>​            通过构造方法创建对象<br>​            initargs: 构造方法的参数</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="通过无参构造方法创建对象"><a href="#通过无参构造方法创建对象" class="headerlink" title="通过无参构造方法创建对象"></a>通过无参构造方法创建对象</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//通过无参构造方法创建对象</span><br><span class="hljs-comment">//1.获取无参构造方法</span><br>Constructor c=clazz.getConstructor();<br><span class="hljs-comment">//2.通过无参构造方法创建一个对象</span><br>Object obj = c.newInstance();<br></code></pre></div></td></tr></table></figure><h4 id="通过有参构造方法创建对象"><a href="#通过有参构造方法创建对象" class="headerlink" title="通过有参构造方法创建对象"></a>通过有参构造方法创建对象</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//通过有参构造方法创建对象</span><br><span class="hljs-comment">//1.获取有参构造方法</span><br>Constructor c=clazz.getConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br><span class="hljs-comment">//2.通过有参构造方法创建一个对象,构造方法参数是&quot;张三&quot;,18</span><br>Object obj = c.newInstance(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<br></code></pre></div></td></tr></table></figure><h3 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><h5 id="class-ReflectDemo1-1"><a href="#class-ReflectDemo1-1" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Constructor对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                      返回单个构造方法对象</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        Constructor constructor = clazz.getDeclaredConstructor(String.class);<br>        System.out.println(constructor);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                      返回单个公共构造方法对象</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        <span class="hljs-comment">//小括号中,一定要跟构造方法的形参保持一致.</span><br>        Constructor constructor1 = clazz.getConstructor();<br>        System.out.println(constructor1);<br><br>        Constructor constructor2 = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br>        System.out.println(constructor2);<br><br>        <span class="hljs-comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span><br>        Constructor constructor3 = clazz.getConstructor(<span class="hljs-keyword">int</span>.class);<br>        System.out.println(constructor3);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;?&gt;[] getDeclaredConstructors()：</span><br><span class="hljs-comment">//                                      返回所有构造方法对象的数组</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        Constructor[] constructors = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;?&gt;[] getConstructors()：</span><br><span class="hljs-comment">//                                      返回所有公共构造方法对象的数组</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        Constructor[] constructors = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="ReflectDemo2"><a href="#ReflectDemo2" class="headerlink" title="ReflectDemo2"></a>ReflectDemo2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Constructor对象并创建对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        <span class="hljs-comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//获取一个私有的构造方法并创建对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取一个私有化的构造方法.</span><br>        Constructor constructor = clazz.getDeclaredConstructor(String.class);<br><br>        <span class="hljs-comment">//被private修饰的成员,不能直接使用的</span><br>        <span class="hljs-comment">//如果用反射强行获取并使用,需要临时取消访问检查</span><br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//3.直接创建对象</span><br>        Student student = (Student) constructor.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//简写格式</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span><br>        Student student = (Student) clazz.newInstance();<span class="hljs-comment">//这个方法现在已经过时了,了解一下</span><br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        Constructor constructor = clazz.getConstructor();<br><br>        <span class="hljs-comment">//3.利用空参来创建Student的对象</span><br>        Student student = (Student) constructor.newInstance();<br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        Constructor constructor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br><br>        <span class="hljs-comment">//3.利用newInstance创建Student的对象</span><br>        Student student = (Student) constructor.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br><br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-comment">//私有的有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name的值为:&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;private...Student...有参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的无参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;public...Student...无参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name的值为:&quot;</span> + name + <span class="hljs-string">&quot;age的值为:&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;public...Student...有参构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-反射-成员变量"><a href="#5-反射-成员变量" class="headerlink" title="5.反射-成员变量"></a>5.反射-成员变量</h2><h3 id="获取-1"><a href="#获取-1" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法"><a href="#通过Class类的方法" class="headerlink" title="通过Class类的方法"></a>通过Class类的方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Field[] getFields();</td><td align="center">//获取所有的public修饰的成员变量</td></tr><tr><td align="center">Field getField(String name);</td><td align="center">//获取指定的public修饰的成员变量</td></tr><tr><td align="center">Field[] getDeclaredFields();</td><td align="center">//获取所有的成员变量(包含private)</td></tr><tr><td align="center">Field getDeclaredField(String name);</td><td align="center">//获取指定的成员变量(包含private)</td></tr></tbody></table><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Object get(Object obj);</td><td align="center">//获取”obj对象”中”当前Field成员变量”的值;</td></tr><tr><td align="center">void set(Object obj, Object value);</td><td align="center">//把”obj对象”中”当前Field成员变量”的值设置为”value”</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//创建一个对象</span><br>Constructor c=clazz.getConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br><span class="hljs-comment">//2.通过有参构造方法创建一个对象,构造方法参数是&quot;张三&quot;,18</span><br>Object obj = c.newInstance(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-comment">//获取成员变量name</span><br>Field f = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//获取obj中成员变量name的值</span><br>Object nameValue = f.get(obj);<br><span class="hljs-comment">//把obj中成员变量name的值设置为张三丰</span><br>f.set(obj,<span class="hljs-string">&quot;张三丰&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h3><h4 id="class-ReflectDemo1-2"><a href="#class-ReflectDemo1-2" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Field对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>       <span class="hljs-comment">// method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//        Field getDeclaredField(String name)：返回单个成员变量对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取money成员变量</span><br>        Field field = clazz.getDeclaredField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(field);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//        Field getField(String name)：返回单个公共成员变量对象</span><br>        <span class="hljs-comment">//想要获取的成员变量必须是真实存在的</span><br>        <span class="hljs-comment">//且必须是public修饰的.</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name这个成员变量</span><br>        <span class="hljs-comment">//Field field = clazz.getField(&quot;name&quot;);</span><br>        <span class="hljs-comment">//Field field = clazz.getField(&quot;name1&quot;);</span><br>        Field field = clazz.getField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(field);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Field[] getDeclaredFields()：返回所有成员变量对象的数组</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取所有的Field对象</span><br>        Field[] fields = clazz.getDeclaredFields();<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Field[] getFields()：返回所有公共成员变量对象的数组</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取Field对象.</span><br>        Field[] fields = clazz.getFields();<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-ReflectDemo2"><a href="#class-ReflectDemo2" class="headerlink" title="class ReflectDemo2"></a>class ReflectDemo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用Field对象,获取值或者修改值</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;<br><span class="hljs-comment">//        Object get(Object obj) 返回由该 Field表示的字段在指定对象上的值。</span><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取成员变量Field的对象</span><br>        Field field = clazz.getDeclaredField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.取消一下访问检查</span><br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//4.调用get方法来获取值</span><br>        <span class="hljs-comment">//4.1创建一个对象</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//4.2获取指定对象的money的值</span><br>        Object o = field.get(student);<br><br>        <span class="hljs-comment">//5.打印一下</span><br>        System.out.println(o);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//        void set(Object obj, Object value)：给obj对象的成员变量赋值为value</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name这个Field对象</span><br>        Field field = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//3.利用set方法进行赋值.</span><br>        <span class="hljs-comment">//3.1先创建一个Student对象</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//3.2有了对象才可以给指定对象进行赋值</span><br>        field.set(student,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Student-3"><a href="#class-Student-3" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String gender;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">300</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-反射-成员方法"><a href="#6-反射-成员方法" class="headerlink" title="6.反射-成员方法"></a>6.反射-成员方法</h2><h3 id="获取-2"><a href="#获取-2" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法-1"><a href="#通过Class类的方法-1" class="headerlink" title="通过Class类的方法"></a>通过Class类的方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Method[] getMethods()</td><td align="center">//得到所有的public修饰的成员方法</td></tr><tr><td align="center">Method getMethod(String name, Class… parameterTypes)</td><td align="center">//得到指定的public修饰的成员方法</td></tr><tr><td align="center">Method[] getDeclaredMethods()</td><td align="center">//得到所有的成员方法(包含私有)</td></tr><tr><td align="center">Method getDeclaredMethod(String name, Class… parameterTypes)</td><td align="center">//得到指定的成员方法(包含私有)</td></tr></tbody></table><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用:"></a>使用:</h3><h4 id="通过Method类的方法"><a href="#通过Method类的方法" class="headerlink" title="通过Method类的方法"></a>通过Method类的方法</h4><h5 id="Object-invoke-Object-obj-Object…-args"><a href="#Object-invoke-Object-obj-Object…-args" class="headerlink" title="Object invoke(Object obj, Object… args)"></a>Object invoke(Object obj, Object… args)</h5><h6 id="通过obj对象-调用当前Method方法"><a href="#通过obj对象-调用当前Method方法" class="headerlink" title="通过obj对象, 调用当前Method方法"></a>通过obj对象, 调用当前Method方法</h6><h6 id="args是调用方法时-方法的参数"><a href="#args是调用方法时-方法的参数" class="headerlink" title="args是调用方法时, 方法的参数"></a>args是调用方法时, 方法的参数</h6><h6 id="相当于-obj-方法-args"><a href="#相当于-obj-方法-args" class="headerlink" title="相当于 obj.方法(args)"></a>相当于 obj.方法(args)</h6><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取学生类的字节码文件</span><br>Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//获取学生类的对象,因为有了学生类的对象之后才能操作方法</span><br>Object stu = clazz.newInstance();<br><span class="hljs-comment">//获取成员方法</span><br><span class="hljs-comment">//获取名字叫做getName的无参的方法</span><br>Method getName = clazz.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br><span class="hljs-comment">//让stu对象调用getName方法</span><br>getName.invoke(stu);<br><span class="hljs-comment">//获取名字是setName的有参的方法,参数只有一个,参数类型是String</span><br>Method setName = clazz.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br><span class="hljs-comment">//让stu对象调用setName方法(该方法有返回值就接收,没有就不管)</span><br>setName.invoke(stu);<br></code></pre></div></td></tr></table></figure><h3 id="test-5"><a href="#test-5" class="headerlink" title="test"></a>test</h3><h4 id="class-ReflectDemo1-3"><a href="#class-ReflectDemo1-3" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Method对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br>        <span class="hljs-comment">//method5();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                返回单个成员方法对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取一个成员方法show</span><br>        Method method = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取一个有形参的方法function2</span><br>        Method method = clazz.getMethod(<span class="hljs-string">&quot;function2&quot;</span>, String.class);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Method getMethod(String name, Class&lt;?&gt;... parameterTypes) ：</span><br><span class="hljs-comment">//                                返回单个公共成员方法对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取成员方法function1</span><br>        Method method1 = clazz.getMethod(<span class="hljs-string">&quot;function1&quot;</span>);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Method[] getDeclaredMethods()：</span><br><span class="hljs-comment">//                                返回所有成员方法对象的数组，不包括继承的</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取Method对象</span><br>        Method[] methods = clazz.getDeclaredMethods();<br>        <span class="hljs-comment">//3.遍历一下数组</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取成员方法对象</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-ReflectDemo2-1"><a href="#class-ReflectDemo2-1" class="headerlink" title="class ReflectDemo2"></a>class ReflectDemo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Method对象并运行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br><span class="hljs-comment">//        Object invoke(Object obj, Object... args)：运行方法</span><br><span class="hljs-comment">//        参数一：用obj对象调用该方法</span><br><span class="hljs-comment">//        参数二：调用方法的传递的参数（如果没有就不写）</span><br><span class="hljs-comment">//        返回值：方法的返回值（如果没有就不写）</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取里面的Method对象  function4</span><br>        Method method = clazz.getMethod(<span class="hljs-string">&quot;function4&quot;</span>, String.class);<br>        <span class="hljs-comment">//3.运行function4方法就可以了</span><br>        <span class="hljs-comment">//3.1创建一个Student对象,当做方法的调用者</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//3.2运行方法</span><br>        Object result = method.invoke(student, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-comment">//4.打印一下返回值</span><br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Student-4"><a href="#class-Student-4" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-comment">//私有的，无参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;私有的show方法，无参无返回值&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，无参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function1方法，无参无返回值&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，有参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function2</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function2方法，有参无返回值,参数为&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，无参有返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">function3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function3方法，无参有返回值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，有参有返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">function4</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function4方法，有参有返回值,参数为&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day16 网络编程</title>
    <link href="/blog-public/2021/04/02/SAd16/"/>
    <url>/blog-public/2021/04/02/SAd16/</url>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="1-网络编程"><a href="#1-网络编程" class="headerlink" title="1.网络编程"></a>1.网络编程</h2><h3 id="指的是通过代码的手段-实现网络间的通讯"><a href="#指的是通过代码的手段-实现网络间的通讯" class="headerlink" title="指的是通过代码的手段,实现网络间的通讯."></a>指的是通过代码的手段,实现网络间的通讯.</h3><h3 id="简单来说-就是电脑与电脑之间收发消息"><a href="#简单来说-就是电脑与电脑之间收发消息" class="headerlink" title="简单来说,就是电脑与电脑之间收发消息"></a>简单来说,就是电脑与电脑之间收发消息</h3><h3 id="网络编程又叫做”Socket编程”"><a href="#网络编程又叫做”Socket编程”" class="headerlink" title="网络编程又叫做”Socket编程”"></a>网络编程又叫做”Socket编程”</h3><h2 id="2-网络编程三要素"><a href="#2-网络编程三要素" class="headerlink" title="2.网络编程三要素:"></a>2.网络编程三要素:</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址:"></a>IP地址:</h3><h4 id="网络设备在网络中的唯一标识"><a href="#网络设备在网络中的唯一标识" class="headerlink" title="网络设备在网络中的唯一标识."></a>网络设备在网络中的唯一标识.</h4><h4 id="命令"><a href="#命令" class="headerlink" title="命令:"></a>命令:</h4><h5 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h5><p>​                 //查看本机IP地址</p><h5 id="ping-IP地址"><a href="#ping-IP地址" class="headerlink" title="ping IP地址"></a>ping IP地址</h5><p>​                //测试是否和指定网络联通            </p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>​            127.0.0.1 –&gt; 本机<br>​            <em>.</em>.*.255 –&gt; 广播地址</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h3><h4 id="应用程序在设备中的唯一标识"><a href="#应用程序在设备中的唯一标识" class="headerlink" title="应用程序在设备中的唯一标识."></a>应用程序在设备中的唯一标识.</h4><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h5 id="取值范围0-65535"><a href="#取值范围0-65535" class="headerlink" title="取值范围0-65535"></a>取值范围0-65535</h5><h5 id="一个端口在同一时间之内只能由一个程序占用"><a href="#一个端口在同一时间之内只能由一个程序占用" class="headerlink" title="一个端口在同一时间之内只能由一个程序占用"></a>一个端口在同一时间之内只能由一个程序占用</h5><h5 id="0-1024一般为系统占用的端口号"><a href="#0-1024一般为系统占用的端口号" class="headerlink" title="0-1024一般为系统占用的端口号"></a>0-1024一般为系统占用的端口号</h5><h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议:"></a>网络传输协议:</h3><h4 id="数据在网络中传输的规则"><a href="#数据在网络中传输的规则" class="headerlink" title="数据在网络中传输的规则."></a>数据在网络中传输的规则.</h4><h4 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h4><h5 id="UDP"><a href="#UDP" class="headerlink" title="UDP:"></a>UDP:</h5><h6 id="面向无连接"><a href="#面向无连接" class="headerlink" title="面向无连接"></a>面向无连接</h6><h6 id="速度快-不安全-容易丢失数据"><a href="#速度快-不安全-容易丢失数据" class="headerlink" title="速度快,不安全,容易丢失数据."></a>速度快,不安全,容易丢失数据.</h6><h6 id="每次最多发送64K"><a href="#每次最多发送64K" class="headerlink" title="每次最多发送64K."></a>每次最多发送64K.</h6><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP:"></a>TCP:</h5><h6 id="面向稳定链接"><a href="#面向稳定链接" class="headerlink" title="面向稳定链接"></a>面向稳定链接</h6><h6 id="需要经历三次握手"><a href="#需要经历三次握手" class="headerlink" title="需要经历三次握手"></a>需要经历三次握手</h6><h6 id="速度慢-安全"><a href="#速度慢-安全" class="headerlink" title="速度慢,安全."></a>速度慢,安全.</h6><h2 id="3-InetAddress"><a href="#3-InetAddress" class="headerlink" title="3.InetAddress"></a>3.InetAddress</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        在Java中用来表示IP地址的类.</p><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象:"></a>获取对象:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">static InetAddress getByName(String str);</td><td align="center">//通过”主机名”或”IP地址”得到对象</td></tr><tr><td align="center">static InetAddress getLocalHost();</td><td align="center">//获取本机的”IP地址”对象</td></tr></tbody></table><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">String getHostName();</td><td align="center">//获取主机名</td></tr><tr><td align="center">String getHostAddress();</td><td align="center">//获取IP地址</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">//static InetAddress getByName(String host)</span><br><span class="hljs-comment">//                          确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</span><br><span class="hljs-comment">//String getHostName()     获取此IP地址的主机名</span><br><span class="hljs-comment">//String getHostAddress()  返回文本显示中的IP地址字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InetadressDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;沉迷代码&quot;</span>);<br><br>        String hostName = address.getHostName();<br>        System.out.println(<span class="hljs-string">&quot;主机名为&quot;</span> + hostName);<br><br>        String ip = address.getHostAddress();<br>        System.out.println(<span class="hljs-string">&quot;IP为&quot;</span> + ip);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-UDP协议-单播"><a href="#4-UDP协议-单播" class="headerlink" title="4.UDP协议-单播"></a>4.UDP协议-单播</h2><h3 id="UDP-发送端"><a href="#UDP-发送端" class="headerlink" title="UDP-发送端"></a>UDP-发送端</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建发送端Socket对象-DatagramSocket"><a href="#1-创建发送端Socket对象-DatagramSocket" class="headerlink" title="1.创建发送端Socket对象(DatagramSocket)"></a>1.创建发送端Socket对象(DatagramSocket)</h5><p>​                因为是发送端的Socket，所以不需要指定端口号</p><h5 id="2-准备数据-并且打包。DatagramPacket"><a href="#2-准备数据-并且打包。DatagramPacket" class="headerlink" title="2.准备数据,并且打包。DatagramPacket"></a>2.准备数据,并且打包。DatagramPacket</h5><h5 id="3-发送数据"><a href="#3-发送数据" class="headerlink" title="3.发送数据"></a>3.发送数据</h5><h5 id="4-释放资源"><a href="#4-释放资源" class="headerlink" title="4.释放资源"></a>4.释放资源</h5><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建发送端Socket对象(DatagramSocket).因为是发送端的Socket,所以不需要指定端口号</span><br>       DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>       <span class="hljs-comment">//2.准备数据,并且打包.DatagramPacket</span><br>       <span class="hljs-comment">//2.1准备数据</span><br>       <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-string">&quot;hello udp,im comming !&quot;</span>.getBytes();<br>       <span class="hljs-comment">//2.2指定接收方(收件人)的IP地址</span><br>       InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>       <span class="hljs-comment">//2.3指定接收方的端口号</span><br>       <span class="hljs-keyword">int</span> port = <span class="hljs-number">8888</span>;<br>       DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bys, bys.length, address, port);<br><br>       <span class="hljs-comment">//3.发送数据</span><br>       ds.send(dp);<br>       <span class="hljs-comment">//4.释放资源</span><br>       ds.close();<br></code></pre></div></td></tr></table></figure><p>​            </p><h3 id="UDP-接收端"><a href="#UDP-接收端" class="headerlink" title="UDP-接收端"></a>UDP-接收端</h3><h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建接收端的Socket对象-DatagramSocket"><a href="#1-创建接收端的Socket对象-DatagramSocket" class="headerlink" title="1.创建接收端的Socket对象(DatagramSocket)"></a>1.创建接收端的Socket对象(DatagramSocket)</h5><p>​                因为是接收端，所以要明确自己是谁(端口)</p><h5 id="2-准备容器。DatagramPacket"><a href="#2-准备容器。DatagramPacket" class="headerlink" title="2.准备容器。DatagramPacket"></a>2.准备容器。DatagramPacket</h5><h5 id="3-接收数据。签收"><a href="#3-接收数据。签收" class="headerlink" title="3.接收数据。签收"></a>3.接收数据。签收</h5><h5 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a>4.解析</h5><h5 id="5-释放资源"><a href="#5-释放资源" class="headerlink" title="5.释放资源"></a>5.释放资源</h5><h4 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建接收端的Socket对象(DatagramSocket).因为是接收端,所以要明确自己是谁(端口),该端口号必须与发送端指定的完全一致</span><br>    DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8888</span>);<br>    <span class="hljs-comment">//2.准备容器DatagramPacket</span><br>    <span class="hljs-comment">//byte[] bys = new byte[1024];</span><br>    <span class="hljs-comment">//DatagramPacket dp = new DatagramPacket(bys, bys.length);</span><br>    DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>], <span class="hljs-number">1024</span>);<br>    <span class="hljs-comment">//3.接收数据.签收.如果没有人发送数据,则程序在这里一直等待,直到有人发送数据</span><br>    ds.receive(dp);<br>    <span class="hljs-comment">//4.解析.当数据被接收之后,都放在了DatagramPacket中,所以,所谓的解析数据,其实就是解析DatagramPacket</span><br>    <span class="hljs-comment">//4.1获取对方发送的IP</span><br>    InetAddress address = dp.getAddress();<br>    System.out.println(<span class="hljs-string">&quot;sender---&gt;&quot;</span> + address.getHostAddress());<br>    <span class="hljs-comment">//4.2获取发送方的端口号</span><br>    <span class="hljs-keyword">int</span> port = dp.getPort();<br>    <span class="hljs-comment">//4.3获取发送的数据</span><br>    <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>    <span class="hljs-comment">//4.4获取具体收到的数据的长度</span><br>    <span class="hljs-keyword">int</span> length = dp.getLength();<br>    <span class="hljs-comment">//4.5转换数据并打印</span><br>    System.out.println(<span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, length));<br>    <span class="hljs-comment">//5.释放资源</span><br>    ds.close();<br></code></pre></div></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><h5 id="发送端ClientDemo"><a href="#发送端ClientDemo" class="headerlink" title="发送端ClientDemo"></a><code>发送端ClientDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.找码头</span><br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br>        <span class="hljs-comment">//2.打包礼物</span><br>        <span class="hljs-comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span><br>        String s = <span class="hljs-string">&quot;送给村长老丈人的礼物&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br><br>        <span class="hljs-comment">//3.由码头发送包裹</span><br>        ds.send(dp);<br><br>        <span class="hljs-comment">//4.付钱走羊</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo"><a href="#接收端ServerDemo" class="headerlink" title="接收端ServerDemo"></a><code>接收端ServerDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-comment">//注意点:</span><br>        <span class="hljs-comment">//1.要先运行接收端,再运行发送端</span><br>        <span class="hljs-comment">//2.如果接收端再启动之后,没有接收到数据,那么会死等(阻塞).</span><br>        <span class="hljs-comment">//3.在接收数据的时候,需要调用一个getLength方法,表示接收到了多少字节</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.找码头     ---- 表示接收端从10000端口接收数据的.</span><br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2,创建一个新的箱子</span><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length);<br>        <span class="hljs-comment">//3.接收礼物,把礼物放到新的箱子中</span><br>        System.out.println(<span class="hljs-string">&quot;-----------接收前----------&quot;</span>);<br>        ds.receive(dp);<br>        System.out.println(<span class="hljs-string">&quot;------------接收后---------&quot;</span>);<br>        <span class="hljs-comment">//4.从新的箱子里面获取礼物</span><br>       <span class="hljs-comment">// byte[] data = dp.getData();</span><br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,length));<br>        <span class="hljs-comment">//5.拿完走羊</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2使用UDP协议完成以下要求"><a href="#test2使用UDP协议完成以下要求" class="headerlink" title="test2使用UDP协议完成以下要求:"></a>test2使用UDP协议完成以下要求:</h4><h5 id="发送方：循环向接收方发送数据-数据来自于键盘录入-直到键盘录入886时-循环停止"><a href="#发送方：循环向接收方发送数据-数据来自于键盘录入-直到键盘录入886时-循环停止" class="headerlink" title="发送方：循环向接收方发送数据, 数据来自于键盘录入, 直到键盘录入886时, 循环停止"></a>发送方：循环向接收方发送数据, 数据来自于键盘录入, 直到键盘录入886时, 循环停止</h5><h5 id="接收方：循环接收发送方发送过来的数据-并打印"><a href="#接收方：循环接收发送方发送过来的数据-并打印" class="headerlink" title="接收方：循环接收发送方发送过来的数据, 并打印"></a>接收方：循环接收发送方发送过来的数据, 并打印</h5><h5 id="发送端ClientDemo-1"><a href="#发送端ClientDemo-1" class="headerlink" title="发送端ClientDemo"></a><code>发送端ClientDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            String s = sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;886&quot;</span>.equals(s))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>            InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>            DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>            ds.send(dp);<br>        &#125;<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-1"><a href="#接收端ServerDemo-1" class="headerlink" title="接收端ServerDemo"></a><code>接收端ServerDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length);<br><br>            ds.receive(dp);<br><br>            <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>            <span class="hljs-keyword">int</span> length = dp.getLength();<br><br>            System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br>        &#125;<br><br>       <span class="hljs-comment">// ds.close();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-UDP协议-组播"><a href="#5-UDP协议-组播" class="headerlink" title="5.UDP协议-组播"></a>5.UDP协议-组播</h2><h3 id="组播-发送端"><a href="#组播-发送端" class="headerlink" title="组播-发送端"></a>组播-发送端</h3><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>​            1.基本操作和单播类似<br>​            2.在指定接收方的IP地址时, 指定的是组名<br>​                组名使用IP来表示<br>​                IP范围是(224.0.0.0 - 239.255.255.255)<br>​            3.正常发送数据</p><h4 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//1.创建发送端Socket对象(DatagramSocket).因为是发送端的Socket,所以不需要指定端口号</span><br>       DatagramSocket ds = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket()</span>;<br> <br>       <span class="hljs-comment">//2.准备数据,并且打包.DatagramPacket</span><br>       <span class="hljs-comment">//2.1准备数据</span><br>       byte<span class="hljs-literal">[]</span> bys = <span class="hljs-string">&quot;hello udp,im comming !&quot;</span>.get<span class="hljs-constructor">Bytes()</span>;<br>       <span class="hljs-comment">//2.2指定接收方(收件人)的IP地址</span><br>       InetAddress address = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>)</span>;<br>       <span class="hljs-comment">//2.3指定接收方的端口号</span><br>       <span class="hljs-built_in">int</span> port = <span class="hljs-number">8888</span>;<br>       DatagramPacket dp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">bys</span>, <span class="hljs-params">bys</span>.<span class="hljs-params">length</span>, <span class="hljs-params">address</span>, <span class="hljs-params">port</span>)</span>;<br> <br>       <span class="hljs-comment">//3.发送数据</span><br>       ds.send(dp);<br>       <span class="hljs-comment">//4.释放资源</span><br>       ds.close<span class="hljs-literal">()</span>;<br></code></pre></div></td></tr></table></figure><h3 id="组播-接收端"><a href="#组播-接收端" class="headerlink" title="组播-接收端"></a>组播-接收端</h3><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><h5 id="1-使用MulticastSocket作为接收方的Socket"><a href="#1-使用MulticastSocket作为接收方的Socket" class="headerlink" title="1.使用MulticastSocket作为接收方的Socket"></a>1.使用MulticastSocket作为接收方的Socket</h5><h5 id="2-把当前计算机-加入到指定小组中"><a href="#2-把当前计算机-加入到指定小组中" class="headerlink" title="2.把当前计算机,加入到指定小组中"></a>2.把当前计算机,加入到指定小组中</h5><p>​                组名仍然使用IP来表示<br>​                组名必须和发送方指定的组名保持一致</p><h5 id="3-正常接收数据"><a href="#3-正常接收数据" class="headerlink" title="3.正常接收数据"></a>3.正常接收数据</h5><h4 id="案例：-3"><a href="#案例：-3" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//接收方使用MulticastSocket作为Socket</span><br>       MulticastSocket ms=<span class="hljs-keyword">new</span> MulticastSocket(<span class="hljs-number">8888</span>);<br>       <span class="hljs-comment">//把当前计算机加入到某个小组中</span><br>       ms.joinGroup(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>));<br>       DatagramPacket dp=<span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br>       ms.receive(dp);<br>       <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>       <span class="hljs-keyword">int</span> length = dp.getLength();<br>       System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br>ms.close();<br></code></pre></div></td></tr></table></figure><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="test1组播"><a href="#test1组播" class="headerlink" title="test1组播"></a>test1组播</h4><h5 id="发送端ClinetDemo"><a href="#发送端ClinetDemo" class="headerlink" title="发送端ClinetDemo"></a>发送端ClinetDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClinetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>        String s = <span class="hljs-string">&quot;hello 组播&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-2"><a href="#接收端ServerDemo-2" class="headerlink" title="接收端ServerDemo"></a>接收端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MulticastSocket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        MulticastSocket ms = <span class="hljs-keyword">new</span> MulticastSocket(<span class="hljs-number">10000</span>);<br><br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br><br><br>        <span class="hljs-comment">//把当前计算机绑定一个组播地址,表示添加到这一组中.</span><br>        ms.joinGroup(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>));<br><br><br>        ms.receive(dp);<br><br>        <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br><br>        ms.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2广播"><a href="#test2广播" class="headerlink" title="test2广播"></a>test2广播</h4><h5 id="发送端ClientDemo-2"><a href="#发送端ClientDemo-2" class="headerlink" title="发送端ClientDemo"></a>发送端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>        String s = <span class="hljs-string">&quot;广播 hello&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;255.255.255.255&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-3"><a href="#接收端ServerDemo-3" class="headerlink" title="接收端ServerDemo"></a>接收端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br><br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br><br>        ds.receive(dp);<br><br>        <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-TCP-客户端"><a href="#6-TCP-客户端" class="headerlink" title="6.TCP-客户端"></a>6.TCP-客户端</h2><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP-客户端"></a>TCP-客户端</h3><h4 id="步骤：-2"><a href="#步骤：-2" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建Socket对象。指定“服务端”的ip地址和端口号"><a href="#1-创建Socket对象。指定“服务端”的ip地址和端口号" class="headerlink" title="1.创建Socket对象。指定“服务端”的ip地址和端口号"></a>1.创建Socket对象。指定“服务端”的ip地址和端口号</h5><h5 id="2-传输数据"><a href="#2-传输数据" class="headerlink" title="2.传输数据"></a>2.传输数据</h5><p>​                如果给“服务端”发消息，用输出流写。<br>​                如果接收“服务端”发送的数据，则用输入流读。</p><h5 id="3-释放资源"><a href="#3-释放资源" class="headerlink" title="3.释放资源"></a>3.释放资源</h5><h4 id="案例：-4"><a href="#案例：-4" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Socket对象.指定服务端的ip地址和端口号</span><br>        Socket s = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">10010</span>);<br>        <span class="hljs-comment">//2.给服务端发消息</span><br>        OutputStream os = s.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>        <span class="hljs-comment">//发完了说一下,一个结束标记,不能直接调用close方法关闭输出流,会出错</span><br>        s.shutdownOutput();<br>        <span class="hljs-comment">//3.接收服务端发送过来的数据</span><br>        InputStream is = s.getInputStream();<br>        <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = is.read(bys);<br>        System.out.println(<span class="hljs-keyword">new</span> String(bys, <span class="hljs-number">0</span>, len));<br>        <span class="hljs-comment">//4.释放资源</span><br>        s.close();<br></code></pre></div></td></tr></table></figure><h3 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP-服务端"></a>TCP-服务端</h3><h4 id="步骤：-3"><a href="#步骤：-3" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建ServerSocket对象，指定端口号"><a href="#1-创建ServerSocket对象，指定端口号" class="headerlink" title="1.创建ServerSocket对象，指定端口号"></a>1.创建ServerSocket对象，指定端口号</h5><h5 id="2-调用accept-方法获取Socket对象。"><a href="#2-调用accept-方法获取Socket对象。" class="headerlink" title="2.调用accept()方法获取Socket对象。"></a>2.调用accept()方法获取Socket对象。</h5><p>​                如果有客户端访问，则该方法执行，得到一个Socket<br>​                如果没有客户端访问，就一直等待。</p><h5 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3.传输数据"></a>3.传输数据</h5><p>​                如果给“客户端”发消息，用输出流写。<br>​                如果接收“客户端”发送的数据，则用输入流读。</p><h5 id="4-释放资源-1"><a href="#4-释放资源-1" class="headerlink" title="4.释放资源"></a>4.释放资源</h5><h4 id="案例：-5"><a href="#案例：-5" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建ServerSocket对象,指定端口号</span><br>ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10010</span>);<br><span class="hljs-comment">//2.调用accept()方法获取Socket对象</span><br>Socket s = ss.accept();<br>    <span class="hljs-comment">//接收客户端发送过来的数据</span><br>        InputStream is=s.getInputStream();<br>        <span class="hljs-keyword">byte</span>[] bys=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len=is.read(bys);<br>        System.out.println(<span class="hljs-keyword">new</span> String(bys,<span class="hljs-number">0</span>,len));<br>    <span class="hljs-comment">//向客户端发送数据</span><br>        OutputStream os=s.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello!!!&quot;</span>.getBytes());<br>        os.close();<br>s.close();<br></code></pre></div></td></tr></table></figure><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h4><h5 id="客户端ClientDemo"><a href="#客户端ClientDemo" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1,创建一个Socket对象</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.获取一个IO流开始写数据</span><br>        OutputStream os = socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">/*while(true)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">//3.释放资源</span><br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo"><a href="#服务端ServerDemo" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1. 创建Socket对象</span><br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2. 等待客户端连接</span><br>        System.out.println(<span class="hljs-number">111</span>);<br>        Socket accept = ss.accept();<br>        System.out.println(<span class="hljs-number">222</span>);<br>        <span class="hljs-comment">//3.获得输入流对象</span><br>        InputStream is = accept.getInputStream();<br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = is.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br><br>        <span class="hljs-comment">//4.释放资源</span><br>        is.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><h5 id="客户端ClientDemo-1"><a href="#客户端ClientDemo-1" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        OutputStream os = socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>       <span class="hljs-comment">// os.close();如果在这里关流,会导致整个socket都无法使用</span><br>        socket.shutdownOutput();<span class="hljs-comment">//仅仅关闭输出流.并写一个结束标记,对socket没有任何影响</span><br><br><br>        <span class="hljs-comment">/*InputStream is = socket.getInputStream();</span><br><span class="hljs-comment">        int b;</span><br><span class="hljs-comment">        while((b = is.read()) !=-1)&#123;</span><br><span class="hljs-comment">            System.out.println((char) b);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo-1"><a href="#服务端ServerDemo-1" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        Socket accept = ss.accept();<br><br>        InputStream is = accept.getInputStream();<br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = is.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br>       <span class="hljs-comment">/* OutputStream os = accept.getOutputStream();</span><br><span class="hljs-comment">        os.write(&quot;你谁啊?&quot;.getBytes());*/</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;你谁啊?&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        bw.close();<br>        is.close();<br>        accept.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><p>客户端需求：把一个图片文件发送到服务端并读取回馈信息。要求判断文件是否存在及格式是否为jpg并要求文件小于2M。</p><p>服务端需求：接收客户端发送过来的图片数据。进行存储后，回馈一个“上传成功”字样。支持多用户的并发访问。</p><h5 id="客户端ClientDemo-2"><a href="#客户端ClientDemo-2" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;socketmodule\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo-2"><a href="#服务端ServerDemo-2" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        Socket accept = ss.accept();<br><br>        <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>        <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;socketmodule\\ServerDir\\copy.jpg&quot;</span>));<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<br>        &#125;<br><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        bos.close();<br>        accept.close();<br>        ss.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>需求</p><p>服务器只能处理一个客户端请求，接收完一个图片之后，服务器就关闭了。</p></li><li><p>解决方案</p><p>使用循环</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo"><a href="#客户端-ClientDemo" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-3"><a href="#服务端ServerDemo-3" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br><br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\copy.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br>            bos.close();<br>            accept.close();<br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><ul><li><p>需求</p><p>第二次上传文件的时候，会把第一次的文件给覆盖。</p></li><li><p>解决方案</p><p>UUID. randomUUID()方法生成随机的文件名</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-1"><a href="#客户端-ClientDemo-1" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-4"><a href="#服务端ServerDemo-4" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br><br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br>            bos.close();<br>            accept.close();<br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-UUIDDemo"><a href="#class-UUIDDemo" class="headerlink" title="class UUIDDemo"></a>class UUIDDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUIDDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UUID uuid = UUID.randomUUID();<br>        String s = uuid.toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><p>需求</p><p>使用循环虽然可以让服务器处理多个客户端请求。但是还是无法同时跟多个客户端进行通信。</p></li><li><p>解决方案</p><p>开启多线程处理</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-2"><a href="#客户端-ClientDemo-2" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-5"><a href="#服务端ServerDemo-5" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br>            ThreadSocket ts = <span class="hljs-keyword">new</span> ThreadSocket(accept);<br>            <span class="hljs-keyword">new</span> Thread(ts).start();<br><br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="实现类ThreadSocket"><a href="#实现类ThreadSocket" class="headerlink" title="实现类ThreadSocket"></a>实现类ThreadSocket</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Socket acceptSocket;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadSocket</span><span class="hljs-params">(Socket accept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.acceptSocket = accept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(acceptSocket.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(acceptSocket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (acceptSocket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    acceptSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p>需求</p><p>使用多线程虽然可以让服务器同时处理多个客户端请求。但是资源消耗太大。</p></li><li><p>解决方案</p><p>加入线程池</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-3"><a href="#客户端-ClientDemo-3" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端-ServerDemo"><a href="#服务端-ServerDemo" class="headerlink" title="服务端 ServerDemo"></a>服务端 ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br>        ThreadPoolExecutor pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>                <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数量</span><br>                <span class="hljs-number">10</span>,   <span class="hljs-comment">//线程池的总数量</span><br>                <span class="hljs-number">60</span>,   <span class="hljs-comment">//临时线程空闲时间</span><br>                TimeUnit.SECONDS, <span class="hljs-comment">//临时线程空闲时间的单位</span><br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">5</span>),<span class="hljs-comment">//阻塞队列</span><br>                Executors.defaultThreadFactory(),<span class="hljs-comment">//创建线程的方式</span><br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy()<span class="hljs-comment">//任务拒绝策略</span><br>        );<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br>            ThreadSocket ts = <span class="hljs-keyword">new</span> ThreadSocket(accept);<br>            <span class="hljs-comment">//new Thread(ts).start();</span><br>            pool.submit(ts);<br><br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="实现类ThreadSocket-1"><a href="#实现类ThreadSocket-1" class="headerlink" title="实现类ThreadSocket"></a>实现类ThreadSocket</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Socket acceptSocket;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadSocket</span><span class="hljs-params">(Socket accept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.acceptSocket = accept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(acceptSocket.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(acceptSocket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (acceptSocket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    acceptSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day15多线程补充与单元测试与日志</title>
    <link href="/blog-public/2021/04/02/SAd15/"/>
    <url>/blog-public/2021/04/02/SAd15/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程补充"><a href="#多线程补充" class="headerlink" title="多线程补充"></a>多线程补充</h1><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        是一个原子性的Integer类.<br>​        内部的操作可以保证多线程的原子性.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public AtomicInteger();</td><td align="center">//默认值为0</td></tr><tr><td align="center">public AtomicInteger(int num);</td><td align="center">//默认值为num</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo1</span> </span>&#123;<br><span class="hljs-comment">//    public AtomicInteger()：                   初始化一个默认值为0的原子型Integer</span><br><span class="hljs-comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger();<br>        System.out.println(ac);<br><br>        AtomicInteger ac2 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">10</span>);<br>        System.out.println(ac2);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public int addAndGet(int delta);</td><td align="center">//以原子方式将参数与对象中的值相加，并返回结果。</td></tr><tr><td align="center">public int get();</td><td align="center">//获取值</td></tr></tbody></table><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo2</span> </span>&#123;<br><span class="hljs-comment">//    int get():                    获取值</span><br><span class="hljs-comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span><br><span class="hljs-comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span><br><span class="hljs-comment">//    int addAndGet(int data):     以原子方式将参数与对象中的值相加，并返回结果。</span><br><span class="hljs-comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        System.out.println(ac1.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int andIncrement = ac2.getAndIncrement();</span><br><span class="hljs-comment">//        System.out.println(andIncrement);</span><br><span class="hljs-comment">//        System.out.println(ac2.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac3.incrementAndGet();</span><br><span class="hljs-comment">//        System.out.println(i);//自增后的值</span><br><span class="hljs-comment">//        System.out.println(ac3.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac4.addAndGet(20);</span><br><span class="hljs-comment">//        System.out.println(i);</span><br><span class="hljs-comment">//        System.out.println(ac4.get());</span><br><br>        AtomicInteger ac5 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">int</span> andSet = ac5.getAndSet(<span class="hljs-number">20</span>);<br>        System.out.println(andSet);<br>        System.out.println(ac5.get());<br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><h2 id="并发包"><a href="#并发包" class="headerlink" title="并发包"></a>并发包</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​         并发包就是一些线程安全的集合类.</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3><table><thead><tr><th align="center">并发包</th><th align="center">对应的</th></tr></thead><tbody><tr><td align="center">ConcurrentHashMap</td><td align="center">//线程安全的HashMap</td></tr><tr><td align="center">CopyOnWriteArrayList</td><td align="center">//线程安全的ArrayList</td></tr><tr><td align="center">CopyOnWriteArraySet</td><td align="center">//线程安全的HashSet</td></tr></tbody></table><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><code>ConcurrentHashMap</code></h4><p>用hashMap会出错</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        HashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Hashtable-过时的-悲观锁-效率低"><a href="#Hashtable-过时的-悲观锁-效率低" class="headerlink" title="Hashtable(过时的,悲观锁,效率低)"></a>Hashtable(过时的,悲观锁,效率低)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashtableDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Hashtable&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> Hashtable&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="ConcurrentHashMap-推荐-乐观锁-效率高"><a href="#ConcurrentHashMap-推荐-乐观锁-效率高" class="headerlink" title="ConcurrentHashMap(推荐,乐观锁,效率高)"></a>ConcurrentHashMap(推荐,乐观锁,效率高)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConcurrentHashMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        ConcurrentHashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​            </p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​        在多线程情况下,可以控制线程的执行顺序的类<br>​        确定某个线程在其他线程执行之后再执行.</p><h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public CountDownLatch(int num);</td><td align="center">//创建一个对象,指定一个计数器</td></tr></tbody></table><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void await();</td><td align="center">//当前线程等待,当计数器归零的时候,自动唤醒</td></tr><tr><td align="center">public void countDown();</td><td align="center">//计数器-1</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h5 id="测试类MyCountDownLatchDemo"><a href="#测试类MyCountDownLatchDemo" class="headerlink" title="测试类MyCountDownLatchDemo"></a>测试类MyCountDownLatchDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCountDownLatchDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.创建CountDownLatch的对象，需要传递给四个线程。</span><br>        <span class="hljs-comment">//在底层就定义了一个计数器，此时计数器的值就是3</span><br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//2.创建四个线程对象并开启他们。</span><br>        MotherThread motherThread = <span class="hljs-keyword">new</span> MotherThread(countDownLatch);<br>        motherThread.start();<br><br>        ChileThread1 t1 = <span class="hljs-keyword">new</span> ChileThread1(countDownLatch);<br>        t1.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br><br>        ChileThread2 t2 = <span class="hljs-keyword">new</span> ChileThread2(countDownLatch);<br>        t2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br><br>        ChileThread3 t3 = <span class="hljs-keyword">new</span> ChileThread3(countDownLatch);<br>        t3.setName(<span class="hljs-string">&quot;小刚&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MotherThread"><a href="#线程类MotherThread" class="headerlink" title="线程类MotherThread"></a>线程类MotherThread</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MotherThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MotherThread</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.等待</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//当计数器变成0的时候，会自动唤醒这里等待的线程。</span><br>            countDownLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//2.收拾碗筷</span><br>        System.out.println(<span class="hljs-string">&quot;妈妈在收拾碗筷&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread1"><a href="#线程类ChileThread1" class="headerlink" title="线程类ChileThread1"></a>线程类ChileThread1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread1</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread2"><a href="#线程类ChileThread2" class="headerlink" title="线程类ChileThread2"></a>线程类ChileThread2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread2</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread3"><a href="#线程类ChileThread3" class="headerlink" title="线程类ChileThread3"></a>线程类ChileThread3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread3</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        可以控制”同时运行的线程的数量”.<br>​        和synchronized功能类似<br>​        该类允许多个线程同时拥有”锁”的</p><h3 id="构造-2"><a href="#构造-2" class="headerlink" title="构造:"></a>构造:</h3><p>​        public Semaphore(int num);<br>​            //最多允许同时运行num个线程</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h3><p>​        void acquire();<br>​            //获取”许可证”,运行线程<br>​        void release();<br>​            //释放”许可证”</p><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="实现类MyRunnable"><a href="#实现类MyRunnable" class="headerlink" title="实现类MyRunnable"></a>实现类MyRunnable</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//1.获得管理员对象，</span><br>    <span class="hljs-keyword">private</span> Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">2</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//2.获得通行证</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            semaphore.acquire();<br>            <span class="hljs-comment">//3.开始行驶</span><br>            System.out.println(<span class="hljs-string">&quot;获得了通行证开始行驶&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;归还通行证&quot;</span>);<br>            <span class="hljs-comment">//4.归还通行证</span><br>            semaphore.release();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类MySemaphoreDemo"><a href="#测试类MySemaphoreDemo" class="headerlink" title="测试类MySemaphoreDemo"></a>测试类MySemaphoreDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySemaphoreDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(mr).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><h4 id="1-导入jar包-模块根目录下新建lib文件夹-右键add-as-Directory"><a href="#1-导入jar包-模块根目录下新建lib文件夹-右键add-as-Directory" class="headerlink" title="1:导入jar包. (模块根目录下新建lib文件夹,右键add as Directory )"></a>1:导入jar包. (模块根目录下新建lib文件夹,右键add as Directory )</h4><p>​            junit-4.12.jar<br>​            hamcrest-core-1.3.jar</p><h4 id="2-在对应方法上加上-Test注解"><a href="#2-在对应方法上加上-Test注解" class="headerlink" title="2:在对应方法上加上@Test注解"></a>2:在对应方法上加上@Test注解</h4><h3 id="注解"><a href="#注解" class="headerlink" title="注解:"></a>注解:</h3><table><thead><tr><th align="center">用法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Test</td><td align="center">//表示测试该方法</td></tr><tr><td align="center">@Before</td><td align="center">//在测试的方法前运行</td></tr><tr><td align="center">@After</td><td align="center">//在测试的方法后运行</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        测试方法必须是”公共的,无返回值的,无参数的”.</p><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitDemo1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> sum = a + b;<br>        System.out.println(sum);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitDemo2</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="1-导入log4j的jar包"><a href="#1-导入log4j的jar包" class="headerlink" title="1:导入log4j的jar包"></a>1:导入log4j的jar包</h5><p>​            log4j-1.2.17.jar<br>​            slf4j-api-1.7.30.jar<br>​            slf4j-log4j12-1.7.26.jar</p><h5 id="2-导入配置文件-放在src目录下"><a href="#2-导入配置文件-放在src目录下" class="headerlink" title="2:导入配置文件(放在src目录下)"></a>2:导入配置文件(放在src目录下)</h5><p>​            log4j.properties</p><h5 id="3-创建日志对象"><a href="#3-创建日志对象" class="headerlink" title="3:创建日志对象"></a>3:创建日志对象</h5><p>​            Logger log = LoggerFactory.getLogger(当前类.class);</p><h5 id="4-输出日志"><a href="#4-输出日志" class="headerlink" title="4:输出日志."></a>4:输出日志.</h5><p>​            log.debug(“debug级别的日志-详细信息”);<br>​            log.info(“info级别的日志-普通信息”);<br>​            log.warn(“warn级别的日志-警告信息”);<br>​            log.error(“error级别的日志-错误信息”);</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h4><h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">,my,fileAppender</span><br><br><span class="hljs-comment">### direct log messages to my ###</span><br><span class="hljs-meta">log4j.appender.my</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.my.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.my.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.my.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="hljs-string">%d %t %5p %c&#123;1&#125;:%L - %m%n</span><br><br><span class="hljs-comment"># fileAppender演示</span><br><span class="hljs-meta">log4j.appender.fileAppender</span>=<span class="hljs-string">org.apache.log4j.FileAppender</span><br><span class="hljs-meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.fileAppender.Append</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.fileAppender.File</span>=<span class="hljs-string">D:/log4j-log.log</span><br><span class="hljs-meta">log4j.appender.fileAppender.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="hljs-string">%d %5p %c&#123;1&#125;:%L - %m%n</span><br></code></pre></div></td></tr></table></figure><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4JTest01</span> </span>&#123;<br><br>    <span class="hljs-comment">//使用log4j的api来获取日志的对象</span><br>    <span class="hljs-comment">//弊端：如果以后我们更换日志的实现类，那么下面的代码就需要跟着改</span><br>    <span class="hljs-comment">//不推荐使用</span><br>    <span class="hljs-comment">//private static final Logger LOGGER = Logger.getLogger(Log4JTest01.class);</span><br><br><br>    <span class="hljs-comment">//使用slf4j里面的api来获取日志的对象</span><br>    <span class="hljs-comment">//好处：如果以后我们更换日志的实现类，那么下面的代码不需要跟着修改</span><br>    <span class="hljs-comment">//推荐使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Log4JTest01.class);<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.导入jar包</span><br>        <span class="hljs-comment">//2.编写配置文件</span><br>        <span class="hljs-comment">//3.在代码中获取日志的对象</span><br>        <span class="hljs-comment">//4.按照日志级别设置日志信息</span><br><br>        LOGGER.debug(<span class="hljs-string">&quot;debug级别的日志&quot;</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;info级别的日志&quot;</span>);<br>        LOGGER.warn(<span class="hljs-string">&quot;warn级别的日志&quot;</span>);<br>        LOGGER.error(<span class="hljs-string">&quot;error级别的日志&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog4j</span> </span>&#123;<br><br>    <span class="hljs-comment">//获取日志对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MyLog4j.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//键盘录入一个数字</span><br>        String number = sc.nextLine();<br><br>        <span class="hljs-comment">//类型转换</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> result = Integer.parseInt(number);<br>           <span class="hljs-comment">// System.out.println(&quot;类型转换成功&quot; + result);</span><br>            LOGGER.info(<span class="hljs-string">&quot;类型转换成功&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>           <span class="hljs-comment">// System.out.println(&quot;类型转换失败，请录入一个整数&quot;);</span><br>            LOGGER.info(<span class="hljs-string">&quot;类型转换失败，请录入一个整数&quot;</span>,e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程补充</tag>
      
      <tag>单元测试</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day14多线程2</title>
    <link href="/blog-public/2021/04/02/SAd14/"/>
    <url>/blog-public/2021/04/02/SAd14/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​        所谓等待唤醒,指的是线程的等待和唤醒<br>​        是一个线程叫醒另外一个线程去运行代码的机制</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void wait()</td><td align="center">导致当前线程等待直到另一个线程调用该对象的notify()方法或notifyAll()方法</td></tr><tr><td align="center">void notify()</td><td align="center">唤醒正在等待对象监视器的单个线程</td></tr><tr><td align="center">void notifyAll()</td><td align="center">唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>只用锁对象才能调用等待和唤醒的方法.</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        一个实现了等待和唤醒机制的容器.</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成:"></a>组成:</h3><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a><code>ArrayBlockingQueue</code></h4><h4 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a><code>LinkedBlockingDeque</code></h4><table><thead><tr><th align="center">类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ArrayBlockingQueue</td><td align="center">底层是数组,元素是有限的.</td></tr><tr><td align="center">LinkedBlockingDeque</td><td align="center">底层是链表,元素是无限的.并不是真正的无限,最大是int的最大值</td></tr></tbody></table><p>​        </p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h3><h4 id="public-void-put-E-e"><a href="#public-void-put-E-e" class="headerlink" title="public void put(E e)"></a><code>public void put(E e)</code></h4><h4 id="public-E-take"><a href="#public-E-take" class="headerlink" title="public E take();"></a><code>public E take();</code></h4><p>​<br>​            </p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public void put(E e)</td><td align="center">存入元素.该方法是阻塞的.当容器满的时候,该方法就会停止,等待着容器空</td></tr><tr><td align="center">public E take();</td><td align="center">获取元素.该方法是阻塞的.当容器空的时候,该方法会停止,等待着容器存入</td></tr></tbody></table><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 创建阻塞队列的对象,容量为 1</span><br>        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 存储元素</span><br>        arrayBlockingQueue.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br><br>        <span class="hljs-comment">// 取元素</span><br>        System.out.println(arrayBlockingQueue.take());<br>        System.out.println(arrayBlockingQueue.take()); <span class="hljs-comment">// 取不到会阻塞</span><br><br>        System.out.println(<span class="hljs-string">&quot;程序结束了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><h4 id="1-新建"><a href="#1-新建" class="headerlink" title="1.新建"></a><code>1.新建</code></h4><h4 id="2-可运行状态-就绪状态"><a href="#2-可运行状态-就绪状态" class="headerlink" title="2.可运行状态(就绪状态)"></a><code>2.可运行状态</code>(就绪状态)</h4><h4 id="3-阻塞状态"><a href="#3-阻塞状态" class="headerlink" title="3.阻塞状态"></a><code>3.阻塞状态</code></h4><h4 id="4-无限等待状态"><a href="#4-无限等待状态" class="headerlink" title="4.无限等待状态"></a><code>4.无限等待状态</code></h4><h4 id="5-计时等待"><a href="#5-计时等待" class="headerlink" title="5.计时等待"></a><code>5.计时等待</code></h4><h4 id="6-终止"><a href="#6-终止" class="headerlink" title="6.终止"></a><code>6.终止</code></h4><table><thead><tr><th align="center">状态(English)</th><th align="center">状态(Chinese)</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">新建</td></tr><tr><td align="center">RUNNABLE</td><td align="center">可运行状态</td></tr><tr><td align="center">BLOCKED</td><td align="center">阻塞状态</td></tr><tr><td align="center">WAITING</td><td align="center">无限等待状态</td></tr><tr><td align="center">TIMED_WAITING</td><td align="center">计时等待</td></tr><tr><td align="center">TERMINATED</td><td align="center">终止</td></tr></tbody></table><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环向阻塞队列中添加包子</p><p>3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环获取阻塞队列中的包子</p><p>3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建阻塞队列对象</p><p>创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><p>见day13死锁那里</p></li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池:"></a>线程池:</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​        线程池,就是存储线程的池子.<br>​        线程池可以创建和回收线程.</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h3><h4 id="ExecutorService-es-Executors-newCachedThreadPool"><a href="#ExecutorService-es-Executors-newCachedThreadPool" class="headerlink" title="ExecutorService es = Executors.newCachedThreadPool();"></a><code>ExecutorService es = Executors.newCachedThreadPool();</code></h4><h4 id="ExecutorService-es-Executors-newFixedThreadPool-int-num"><a href="#ExecutorService-es-Executors-newFixedThreadPool-int-num" class="headerlink" title="ExecutorService es = Executors.newFixedThreadPool(int num);"></a><code>ExecutorService es = Executors.newFixedThreadPool(int num);</code></h4><table><thead><tr><th align="center">创建格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ExecutorService es = Executors.newCachedThreadPool();</td><td align="center">创建一个默认线程池.内部最多有int最大值个线程</td></tr><tr><td align="center">ExecutorService es = Executors.newFixedThreadPool(int num);</td><td align="center">创建一个线程池.内部线程最大数量为num​</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><h4 id="submit-Runnable-task"><a href="#submit-Runnable-task" class="headerlink" title="submit(Runnable task)"></a><code>submit(Runnable task)</code></h4><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a><code>shutdown()</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">submit(Runnable task);</td><td align="center">提交任务.把要执行的任务交给线程池,由线程池分配线程执行</td></tr><tr><td align="center">shutdown();</td><td align="center">关闭线程池</td></tr></tbody></table><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//static ExecutorService newCachedThreadPool()   创建一个默认的线程池</span><br><span class="hljs-comment">//static newFixedThreadPool(int nThreads)        创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        <span class="hljs-comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span><br>        ExecutorService executorService = Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//Executors --- 可以帮助我们创建线程池对象</span><br>        <span class="hljs-comment">//ExecutorService --- 可以帮助我们控制线程池</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-comment">//Thread.sleep(2000);</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.shutdown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class="hljs-comment">//创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//参数不是初始值而是最大值</span><br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>        ThreadPoolExecutor pool = (ThreadPoolExecutor) executorService;<br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//0</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//2</span><br><span class="hljs-comment">//        executorService.shutdown();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ThreadPoolExecutor-了解"><a href="#ThreadPoolExecutor-了解" class="headerlink" title="ThreadPoolExecutor(了解)"></a>ThreadPoolExecutor(了解)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>用于自定义线程池.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(  <span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                             <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                             <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-function"><span class="hljs-params">                             TimeUnit unit,</span></span><br><span class="hljs-function"><span class="hljs-params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-function"><span class="hljs-params">                             ThreadFactory threadFactory,</span></span><br><span class="hljs-function"><span class="hljs-params">                             RejectedExecutionHandler handler)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h3><p>​        </p><table><thead><tr><th align="center">参数</th><th align="center">解析</th></tr></thead><tbody><tr><td align="center">corePoolSize</td><td align="center">核心线程的最大值,不能小于0</td></tr><tr><td align="center">maximumPoolSize</td><td align="center">最大线程数,不能小于等于0,maximumPoolSize&gt;=corePoolSize</td></tr><tr><td align="center">keepAliveTime</td><td align="center">空闲线程最大存活时间,不能小于0</td></tr><tr><td align="center">unit</td><td align="center">空闲线程最大存活时间的时间单位,一般使用TimeUtil选项</td></tr><tr><td align="center">workQueue</td><td align="center">任务队列(排队的数量),不能为null</td></tr><tr><td align="center">threadFactory</td><td align="center">创建线程方式,一般为Executors.defaultThreadFactory(),不能为null</td></tr><tr><td align="center">handler</td><td align="center">任务的拒绝策略(多余任务的处理方案)不能为null</td></tr></tbody></table><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略:"></a>拒绝策略:</h3><table><thead><tr><th align="center">策略</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ThreadPoolExecutor.AbortPolicy</td><td align="center">丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</td></tr><tr><td align="center">ThreadPoolExecutor.DiscardPolicy</td><td align="center">丢弃任务，但是不抛出异常 这是不推荐的做法。</td></tr><tr><td align="center">ThreadPoolExecutor.DiscardOldestPolicy</td><td align="center">抛弃队列中等待最久的任务 然后把当前任务加入队列中。</td></tr><tr><td align="center">ThreadPoolExecutor.CallerRunsPolicy</td><td align="center">调用任务的run()方法绕过线程池直接执行。</td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a><code>test</code></h3><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类MyThreadPoolDemo3</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo3</span> </span>&#123;<br><span class="hljs-comment">//    参数一：核心线程数量</span><br><span class="hljs-comment">//    参数二：最大线程数</span><br><span class="hljs-comment">//    参数三：空闲线程最大存活时间</span><br><span class="hljs-comment">//    参数四：时间单位</span><br><span class="hljs-comment">//    参数五：任务队列</span><br><span class="hljs-comment">//    参数六：创建线程工厂</span><br><span class="hljs-comment">//    参数七：任务的拒绝策略</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadPoolExecutor pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,TimeUnit.SECONDS,<span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">10</span>), Executors.defaultThreadFactory(),<span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br>        pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br>        pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br><br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        多线程之间共享数据,在A线程修改数据的情况下,B没有看到A修改后的最新数据,这种现象就是”多线程的可见性问题”.</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><h3 id="1-使用volatile关键字-修饰该数据"><a href="#1-使用volatile关键字-修饰该数据" class="headerlink" title="1:使用volatile关键字,修饰该数据."></a>1:使用volatile关键字,修饰该数据.</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><h5 id="Money类"><a href="#Money类" class="headerlink" title="Money类"></a><code>Money类</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread1"><a href="#线程类MyThread1" class="headerlink" title="线程类MyThread1"></a><code>线程类MyThread1</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(Money.money == <span class="hljs-number">100000</span>)&#123;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread2"><a href="#线程类MyThread2" class="headerlink" title="线程类MyThread2"></a><code>线程类MyThread2</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Money.money = <span class="hljs-number">90000</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类Demo"><a href="#测试类Demo" class="headerlink" title="测试类Demo"></a><code>测试类Demo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-可以使用synchronized加锁解决"><a href="#2-可以使用synchronized加锁解决" class="headerlink" title="2:可以使用synchronized加锁解决."></a>2:可以使用synchronized加锁解决.</h3><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><h5 id="Money类-1"><a href="#Money类-1" class="headerlink" title="Money类"></a><code>Money类</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object lock = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread1-1"><a href="#线程类MyThread1-1" class="headerlink" title="线程类MyThread1"></a><code>线程类MyThread1</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Money.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Money.money != <span class="hljs-number">100000</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread2-1"><a href="#线程类MyThread2-1" class="headerlink" title="线程类MyThread2"></a><code>线程类MyThread2</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (Money.lock) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            Money.money = <span class="hljs-number">90000</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类Demo-1"><a href="#测试类Demo-1" class="headerlink" title="测试类Demo"></a><code>测试类Demo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述:"></a>概述:</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>​            指的是: “多个操作,要么一起成功,要么一起失败”.</p><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a><code>test1</code></h5><p>volatile关键字不能保证原子性</p><h6 id="实现类MyAtomThread"><a href="#实现类MyAtomThread" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类AtomDemo"><a href="#测试类AtomDemo" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><h6 id="实现类MyAtomThread-1"><a href="#实现类MyAtomThread-1" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br>    <span class="hljs-keyword">private</span> Object lock = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                count++;<br>                System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类AtomDemo-1"><a href="#测试类AtomDemo-1" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="原子性问题-1"><a href="#原子性问题-1" class="headerlink" title="原子性问题"></a>原子性问题</h4><p>​            指的是:多个多线操作共同处理数据,并且出现了数据丢失的这种现象,就叫做”多线程的原子性问题”</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决:"></a>解决:</h3><p>​        使用原子性安全的类.</p><h4 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo1</span> </span>&#123;<br><span class="hljs-comment">//    public AtomicInteger()：                   初始化一个默认值为0的原子型Integer</span><br><span class="hljs-comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger();<br>        System.out.println(ac);<br><br>        AtomicInteger ac2 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">10</span>);<br>        System.out.println(ac2);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo2</span> </span>&#123;<br><span class="hljs-comment">//    int get():                    获取值</span><br><span class="hljs-comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span><br><span class="hljs-comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span><br><span class="hljs-comment">//    int addAndGet(int data):     以原子方式将参数与对象中的值相加，并返回结果。</span><br><span class="hljs-comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        System.out.println(ac1.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int andIncrement = ac2.getAndIncrement();</span><br><span class="hljs-comment">//        System.out.println(andIncrement);</span><br><span class="hljs-comment">//        System.out.println(ac2.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac3.incrementAndGet();</span><br><span class="hljs-comment">//        System.out.println(i);//自增后的值</span><br><span class="hljs-comment">//        System.out.println(ac3.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac4.addAndGet(20);</span><br><span class="hljs-comment">//        System.out.println(i);</span><br><span class="hljs-comment">//        System.out.println(ac4.get());</span><br><br>        AtomicInteger ac5 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">int</span> andSet = ac5.getAndSet(<span class="hljs-number">20</span>);<br>        System.out.println(andSet);<br>        System.out.println(ac5.get());<br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><h5 id="实现类MyAtomThread-2"><a href="#实现类MyAtomThread-2" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//private volatile int count = 0; //送冰淇淋的数量</span><br>    <span class="hljs-comment">//private Object lock = new Object();</span><br>    AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-comment">//synchronized (lock) &#123;</span><br><span class="hljs-comment">//                count++;</span><br><span class="hljs-comment">//                ac++;</span><br>            <span class="hljs-keyword">int</span> count = ac.incrementAndGet();<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>           <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//private volatile int count = 0; //送冰淇淋的数量</span><br>    <span class="hljs-comment">//private Object lock = new Object();</span><br>    AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-comment">//synchronized (lock) &#123;</span><br><span class="hljs-comment">//                count++;</span><br><span class="hljs-comment">//                ac++;</span><br>            <span class="hljs-keyword">int</span> count = ac.incrementAndGet();<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>           <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类AtomDemo-2"><a href="#测试类AtomDemo-2" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a><code>源码解析</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//先自增，然后获取自增后的结果</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//+ 1 自增后的结果</span><br>        <span class="hljs-comment">//this 就表示当前的atomicInteger（值）</span><br>        <span class="hljs-comment">//1    自增一次</span><br>        <span class="hljs-keyword">return</span> U.getAndAddInt(<span class="hljs-keyword">this</span>, VALUE, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-keyword">long</span> offset, <span class="hljs-keyword">int</span> delta)</span> </span>&#123;<br>        <span class="hljs-comment">//v 旧值</span><br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-comment">//自旋的过程</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//不断的获取旧值</span><br>            v = getIntVolatile(o, offset);<br>            <span class="hljs-comment">//如果这个方法的返回值为false，那么继续自旋</span><br>            <span class="hljs-comment">//如果这个方法的返回值为true，那么自旋结束</span><br>            <span class="hljs-comment">//o 表示的就是内存值</span><br>            <span class="hljs-comment">//v 旧值</span><br>            <span class="hljs-comment">//v + delta 修改后的值</span><br>        &#125; <span class="hljs-keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));<br>            <span class="hljs-comment">//作用：比较内存中的值，旧值是否相等，如果相等就把修改后的值写到内存中，返回true。表示修改成功。</span><br>            <span class="hljs-comment">//                                 如果不相等，无法把修改后的值写到内存中，返回false。表示修改失败。</span><br>            <span class="hljs-comment">//如果修改失败，那么继续自旋。</span><br>        <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></div></td></tr></table></figure><pre><code class=" mermaid">graph LRid0(JavaSE进阶)---id14(第十四天)subgraph day14id14(第十四天)---id141(01-线程状态)id14(第十四天)---id142(02-线程池一基本原理)id14(第十四天)---id143(03-线程池-Executors默认线程池)id14(第十四天)---id144(04-线程池-Executors创建指定上限的线程池)id14(第十四天)---id145(05-线程池-ThreadPoolExecutor)id14(第十四天)---id146(05-线程池一参数详解)id14(第十四天)---id147(07-线程池一非默认任务拒绝策略)id14(第十四天)---id148(08-volatile-问题)id14(第十四天)---id149(09-volatile解决)id14(第十四天)---id1410(10-synchronized解决)id14(第十四天)---id1411(11-原子性)id14(第十四天)---id1412(12-volatile关键字不能保证原子性)id14(第十四天)---id1413(13-原子性-AtomicInteger)id14(第十四天)---id1414(14-AtomicInteger-内存解析)id14(第十四天)---id1415(15-AtomicInteger-源码解析)id14(第十四天)---id1416(16-悲观锁和乐观锁)id14(第十四天)---id1417(17-并发工具类-Hashtable)id14(第十四天)---id1418(18-并发工具类-ConcurrentHashMap基本使用)id14(第十四天)---id1419(19-并发工具类ConcurrentHashMap1.7原理)id14(第十四天)---id1420(20-并发工具类ConcurrentHashMap1.8原理)id14(第十四天)---id1421(21-并发工具类CountDownLatch)id14(第十四天)---id1422(22-并发工具类-Semaphore)end</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day13多线程1</title>
    <link href="/blog-public/2021/04/02/SAd13/"/>
    <url>/blog-public/2021/04/02/SAd13/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><span id="more"></span><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="并行"><a href="#并行" class="headerlink" title="并行:"></a>并行:</h3><p>​        同一时刻，有多个指令在多个CPU上同时执行。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发:"></a>并发:</h3><p>​        同一时刻，有多个指令在单个CPU上交替执行。<br>​    进程:<br>​        是正在运行的程序,包含多个线程.<br>​    线程:<br>​        是进程中的一条执行路径,是cpu的最小执行单元.</p><h2 id="多线程程序"><a href="#多线程程序" class="headerlink" title="多线程程序"></a>多线程程序</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        同时拥有多个执行路径的进程</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>​        1.多个线程之间交替执行.<br>​        2.每个线程执行的时间是随机的.<br>​        3.线程的执行顺序也是随机的.</p><h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:定义一个类,继承Thread类</li><li>2:重写run方法<div class="hljs code-wrapper"><pre><code>把需要执行的代码写入run方法中.</code></pre></div></li><li>3:创建自定义类的对象.</li><li>4:调用自定义对象的start方法,启动线程</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="1-创建线程类"><a href="#1-创建线程类" class="headerlink" title="1.创建线程类"></a>1.创建线程类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-CTRL-O选择run方法重写-把需要执行的代码写入run方法中"><a href="#2-CTRL-O选择run方法重写-把需要执行的代码写入run方法中" class="headerlink" title="2.CTRL+O选择run方法重写,把需要执行的代码写入run方法中."></a>2.CTRL+O选择run方法重写,把需要执行的代码写入run方法中.</h5><p><code>test卖票逻辑</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> ticket=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    <span class="hljs-keyword">if</span>(ticket==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ticket--;<br>        System.out.println(Thread.currentThread().getName()<br>                            + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-测试类中使用线程"><a href="#3-测试类中使用线程" class="headerlink" title="3.测试类中使用线程"></a>3.测试类中使用线程</h5><p>测试类<code>Demo</code>main方法中使用线程</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//使用线程</span><br>        MyThread mt=<span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//创建对象,类名 变量名=new 类名();</span><br>        mt.start();<br>        <span class="hljs-comment">//调用方法,变量名.方法名();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//代码就是线程在开启之后执行的代码</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;开启了&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        MyThread t2 = <span class="hljs-keyword">new</span> MyThread();<br>        t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br>        <span class="hljs-comment">//t1.run();//表示的仅仅是创建对象,用对象去调用方法,并没有开启线程.</span><br>        <span class="hljs-comment">//t2.run();</span><br>        <span class="hljs-comment">//开启一条线程</span><br>        t1.start();<br>        <span class="hljs-comment">//开启第二条线程</span><br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:自定义一个类,该类实现Runnable接口</li><li>2:重写run方法<br>  把需要执行的代码写入run方法中.</li><li>3:创建自定义类的对象</li><li>4:创建Thread类的对象<br>  把”自定义类的对象”作为构造方法的参数</li><li>5:调用Thread类的对象start方法,启动线程</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h5><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="CTRL-O重写run方法-把需要执行的代码写入run方法中"><a href="#CTRL-O重写run方法-把需要执行的代码写入run方法中" class="headerlink" title="CTRL+O重写run方法,把需要执行的代码写入run方法中."></a>CTRL+O重写run方法,把需要执行的代码写入run方法中.</h5><p><code>实现类MyRunnable</code>继承的Runnable的run方法中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>        <span class="hljs-comment">//线程启动后执行的代码</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;第二种方式实现多线程&quot;</span> + i);<br>        &#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类中使用线程"><a href="#测试类中使用线程" class="headerlink" title="测试类中使用线程"></a>测试类中使用线程</h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//使用线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建了一个参数的对象</span><br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br>        <span class="hljs-comment">//创建了一个线程对象,并把参数传递给这个线程.</span><br>        <span class="hljs-comment">//在线程启动之后,执行的就是参数里面的run方法</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br>        <br>        MyRunnable mr2 = <span class="hljs-keyword">new</span> MyRunnable();<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr2);<br>        t2.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3.实现Callable接口"></a>3.实现Callable接口</h3><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:自定义一个类,该类实现Callable接口</li><li>2:重写call方法<div class="hljs code-wrapper"><pre><code>把需要执行的代码写入call方法中.</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>3:创建自定义类的对象</code></pre></div></li><li>  3:创建FutureTask类的对象<br>   把”自定义类的对象”作为构造方法的参数</li><li>  4:创建Thread类的对象<br>  把”FutureTask类的对象”作为构造方法的参数</li><li><div class="hljs code-wrapper"><pre><code>5:调用Thread类的对象start方法,启动线程</code></pre></div></li><li>  6:再调”FutureTask类的对象”的get方法<div class="hljs code-wrapper"><pre><code>      获取线程结束之后的结果。</code></pre></div></li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="1-创建实现类"><a href="#1-创建实现类" class="headerlink" title="1.创建实现类"></a>1.创建实现类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-comment">//创建实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入call方法中.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行后的返回值&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-重写call方法-把需要执行的代码写入call方法中"><a href="#2-重写call方法-把需要执行的代码写入call方法中" class="headerlink" title="2.重写call方法,把需要执行的代码写入call方法中"></a>2.重写call方法,把需要执行的代码写入call方法中</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;跟女孩表白&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">//返回值就表示线程运行完毕之后的结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;答应&quot;</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-使用线程-获取返回值"><a href="#3-使用线程-获取返回值" class="headerlink" title="3.使用线程,获取返回值"></a>3.使用线程,获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">//使用线程</span><br>        MyCallable mc = <span class="hljs-keyword">new</span> MyCallable();<br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc);<br>        Thread t = <span class="hljs-keyword">new</span> Thread(ft);<br>        t.start();<br>        <span class="hljs-comment">//获取返回值</span><br>        String str = ft.get();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程API"><a href="#线程API" class="headerlink" title="线程API"></a>线程API</h2><h4 id="线程对象-setName-quot-线程的名字-quot"><a href="#线程对象-setName-quot-线程的名字-quot" class="headerlink" title="线程对象.setName(&quot;线程的名字&quot;)"></a><code>线程对象.setName(&quot;线程的名字&quot;)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public void setName(String name);</td><td align="center">//设置线程的名字</td></tr></tbody></table><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;@@@&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1,线程是有默认名字的,格式:Thread-编号</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       MyThread t1 = <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">&quot;小蔡&quot;</span>);<br>       MyThread t2 = <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">&quot;小强&quot;</span>);<br><br>       <span class="hljs-comment">//t1.setName(&quot;小蔡&quot;);</span><br>       <span class="hljs-comment">//t2.setName(&quot;小强&quot;);</span><br><br>       t1.start();<br>       t2.start();<br>   &#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-getName"><a href="#线程对象-getName" class="headerlink" title="线程对象.getName()"></a><code>线程对象.getName()</code></h4><h4 id="Thread-currentThread"><a href="#Thread-currentThread" class="headerlink" title="Thread.currentThread()"></a>Thread.currentThread()</h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public String getName();</td><td align="center">//获取线程的名字</td></tr><tr><td align="center">public static Thread currentThread();</td><td align="center">//获取当前线程对象</td></tr></tbody></table><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String name = Thread.currentThread().getName();<br>        <span class="hljs-comment">//获取当前线程对象,获取线程的名字</span><br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Thread-sleep-long-times"><a href="#Thread-sleep-long-times" class="headerlink" title="Thread.sleep(long times)"></a><code>Thread.sleep(long times)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public static void sleep(long times);</td><td align="center">//让当前线程休息times毫秒.</td></tr></tbody></table><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">/*System.out.println(&quot;睡觉前&quot;);</span><br><span class="hljs-comment">        Thread.sleep(3000);</span><br><span class="hljs-comment">        System.out.println(&quot;睡醒了&quot;);*/</span><br><br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-setPriority-1-10"><a href="#线程对象-setPriority-1-10" class="headerlink" title="线程对象.setPriority(1-10)"></a><code>线程对象.setPriority(1-10)</code></h4><p>设定线程优先级</p><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//优先级: 1 - 10 默认值:5</span><br>        MyCallable mc = <span class="hljs-keyword">new</span> MyCallable();<br><br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc);<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ft);<br>        t1.setName(<span class="hljs-string">&quot;飞机&quot;</span>);<br>        t1.setPriority(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//System.out.println(t1.getPriority());//5</span><br>        t1.start();<br><br>        MyCallable mc2 = <span class="hljs-keyword">new</span> MyCallable();<br><br>        FutureTask&lt;String&gt; ft2 = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc2);<br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ft2);<br>        t2.setName(<span class="hljs-string">&quot;坦克&quot;</span>);<br>        t2.setPriority(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//System.out.println(t2.getPriority());//5</span><br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现类MyCallable</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行完毕了&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-setDaemon-boolean-b"><a href="#线程对象-setDaemon-boolean-b" class="headerlink" title="线程对象.setDaemon(boolean b)"></a><code>线程对象.setDaemon(boolean b)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public final void setDaemon(boolean b);</td><td align="center">//让当前线程变为守护线程.</td></tr></tbody></table><p><code>线程类MyThread1</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>线程类MyThread2</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br><br>        t1.setName(<span class="hljs-string">&quot;女神&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;备胎&quot;</span>);<br><br>        <span class="hljs-comment">//把第二个线程设置为守护线程</span><br>        <span class="hljs-comment">//当普通线程执行完之后,那么守护线程也没有继续运行下去的必要了.</span><br>        t2.setDaemon(<span class="hljs-keyword">true</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​        多个线程之间,共同操作同一个数据(数据共享), 从而可能引发的数据信息不精确的现象, 这种现象被称之为:”线程安全问题”.</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><ul><li><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4></li><li><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4></li><li><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4></li></ul><p>​    提示:<br>​        所谓解决方案, 其实就是给操作数据的代码加上限定, 要求同一时间只允许一个线程操作. </p><h4 id="1-同步代码块"><a href="#1-同步代码块" class="headerlink" title="1.同步代码块"></a>1.同步代码块</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">格式:<br><span class="hljs-keyword">synchronized</span>(锁对象) &#123; <br>    <span class="hljs-comment">//需要限定的代码 </span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:&quot;锁&quot;可以是任意对象.    2:多个线程之间必须共用同一把&quot;锁&quot;    3:一般可以使用&quot;类名.class&quot;作为&quot;锁&quot;</code></pre></div><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><p><code>实现类Ticket</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//票的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object obj = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123;<span class="hljs-comment">//多个线程必须使用同一把锁.</span><br>                <span class="hljs-keyword">if</span>(ticket &lt;= <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticket--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*Ticket ticket1 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket2 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket3 = new Ticket();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Thread t1 = new Thread(ticket1);</span><br><span class="hljs-comment">        Thread t2 = new Thread(ticket2);</span><br><span class="hljs-comment">        Thread t3 = new Thread(ticket3);*/</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(ticket);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticketCount = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object obj = <span class="hljs-keyword">new</span> Object();<br><span class="hljs-comment">//为了保证一把锁加 static关键字</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123; <span class="hljs-comment">//就是当前的线程对象.</span><br>                <span class="hljs-keyword">if</span>(ticketCount &lt;= <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticketCount--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        MyThread t2 = <span class="hljs-keyword">new</span> MyThread();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-同步方法"><a href="#2-同步方法" class="headerlink" title="2.同步方法"></a>2.同步方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">格式:<br>访问修饰符 <span class="hljs-keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; <br>    <span class="hljs-comment">//需要限定的代码 (方法体)</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:同步方法也有锁对象.    2:普通同步方法锁对象是&quot;this&quot;    3:静态同步方法锁对象是&quot;类名.class&quot;</code></pre></div><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticketCount = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口一&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步方法</span><br>                <span class="hljs-keyword">boolean</span> result = synchronizedMthod();<br>                <span class="hljs-keyword">if</span>(result)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口二&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步代码块</span><br>                <span class="hljs-keyword">synchronized</span> (MyRunnable.class)&#123;<br>                    <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>                       <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">10</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        ticketCount--;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">synchronizedMthod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            ticketCount--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-Lock锁-了解"><a href="#3-Lock锁-了解" class="headerlink" title="3.Lock锁(了解)"></a>3.Lock锁(了解)</h4><p>​    格式:<br>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:Lock对象本身,可以看作是当前同步块的&quot;锁对象&quot;.所以也需要保证唯一    2:如果在unlock方法执行之前,停止了代码的运行,则有可能&quot;锁对象&quot;不会被释放    3:unlock一般需要放在finally模块中</code></pre></div><p><code>实现类Ticket</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//票的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">private</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//synchronized (obj)&#123;//多个线程必须使用同一把锁.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br>                <span class="hljs-keyword">if</span> (ticket &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                    ticket--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>            <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*Ticket ticket1 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket2 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket3 = new Ticket();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Thread t1 = new Thread(ticket1);</span><br><span class="hljs-comment">        Thread t2 = new Thread(ticket2);</span><br><span class="hljs-comment">        Thread t3 = new Thread(ticket3);*/</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(ticket);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="死锁-了解"><a href="#死锁-了解" class="headerlink" title="死锁(了解)"></a>死锁(了解)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​        多线程之间,相互占有对方资源,并且不释放,从而导致的”线程卡死”这种现象,就称之为”死锁”.</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h3><p>​        1:多线程之间<br>​        2:有两把以上的锁.<br>​        3:锁之间交叉嵌套.</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决:"></a>解决:</h3><p>​        以后写代码,尽量不要让锁交叉嵌套.</p><h5 id="死锁代码案例"><a href="#死锁代码案例" class="headerlink" title="死锁代码案例"></a><code>死锁代码案例</code></h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object objA = <span class="hljs-keyword">new</span> Object();<br>        Object objB = <span class="hljs-keyword">new</span> Object();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                    <span class="hljs-comment">//线程一</span><br>                    <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小康同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                    <span class="hljs-comment">//线程二</span><br>                    <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小薇同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="生产者消费者案例-线程唤醒等待机制"><a href="#生产者消费者案例-线程唤醒等待机制" class="headerlink" title="生产者消费者案例(线程唤醒等待机制)"></a>生产者消费者案例(线程唤醒等待机制)</h5><h6 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h6><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie();<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker();<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>桌子类Desk</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desk</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object lock = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(Desk.flag)&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-keyword">false</span>;<br>                        Desk.lock.notifyAll();<br>                        Desk.count--;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(!Desk.flag)&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-keyword">true</span>;<br>                        Desk.lock.notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2优化"><a href="#test2优化" class="headerlink" title="test2优化"></a>test2优化</h6><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        Desk desk = <span class="hljs-keyword">new</span> Desk();<br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie(desk);<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker(desk);<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>桌子类Desk</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desk</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-comment">//public static boolean flag = false;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-comment">//public static int count = 10;</span><br>    <span class="hljs-comment">//以后我们在使用这种必须有默认值的变量</span><br>   <span class="hljs-comment">// private int count = 10;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-comment">//public static final Object lock = new Object();</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object lock = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Desk</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-keyword">false</span>,<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Desk</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, <span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFlag</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlag</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getLock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Desk&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;flag=&quot;</span> + flag +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, lock=&quot;</span> + lock +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foodie</span><span class="hljs-params">(Desk desk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.desk = desk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(desk.isFlag())&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-keyword">false</span>);<br>                        desk.getLock().notifyAll();<br>                        desk.setCount(desk.getCount() - <span class="hljs-number">1</span>);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cooker</span><span class="hljs-params">(Desk desk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.desk = desk;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(!desk.isFlag())&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-keyword">true</span>);<br>                        desk.getLock().notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="阻塞队列实现等待唤醒机制"><a href="#阻塞队列实现等待唤醒机制" class="headerlink" title="阻塞队列实现等待唤醒机制"></a><code>阻塞队列实现等待唤醒机制</code></h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        // 创建阻塞队列的对象,容量为 1</span><br><span class="hljs-comment">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = new ArrayBlockingQueue&lt;&gt;(1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 存储元素</span><br><span class="hljs-comment">        arrayBlockingQueue.put(&quot;汉堡包&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 取元素</span><br><span class="hljs-comment">        System.out.println(arrayBlockingQueue.take());</span><br><span class="hljs-comment">        System.out.println(arrayBlockingQueue.take()); // 取不到会阻塞</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;程序结束了&quot;);</span><br><span class="hljs-comment">        */</span><br>        ArrayBlockingQueue&lt;String&gt; bd = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">1</span>);<br><br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie(bd);<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker(bd);<br><br>        f.start();<br>        c.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.threaddemo015.Desk;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foodie</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bd = bd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>        <span class="hljs-comment">//1. while(true)死循环</span><br>        <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>        <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>        <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String take = bd.take();<br>                System.out.println(<span class="hljs-string">&quot;吃货将&quot;</span> + take + <span class="hljs-string">&quot;拿出来吃了&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.threaddemo015.Desk;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cooker</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bd = bd;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bd.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;厨师放入一个汉堡包&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day12其他流</title>
    <link href="/blog-public/2021/04/02/SAd12/"/>
    <url>/blog-public/2021/04/02/SAd12/</url>
    
    <content type="html"><![CDATA[<h1 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h1><span id="more"></span><h2 id="基本字符流"><a href="#基本字符流" class="headerlink" title="基本字符流"></a>基本字符流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><div class="hljs code-wrapper"><pre><code>字符流在读写时, 操作的都是字符基本字符流  =  基本字节流 + 默认编码表</code></pre></div><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法:"></a><code>构造方法:</code></h5><table><thead><tr><th align="center">构造方法:</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public FileReader(String fileName);</td><td align="center"></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><code>常用方法</code></h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">一次读取一个字符,返回值为读取字符的编码,读到-1时结束</td></tr><tr><td align="center">int read( char[] chs )</td><td align="center">一次读取一个字符数组,返回值为读取到的字符个数,读到-1时结束</td></tr></tbody></table><h6 id="test1"><a href="#test1" class="headerlink" title="test1"></a><code>test1</code></h6><p><code>测试类CharStreamDemo1</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//使用构造方法创建字符输入流</span><br>        <span class="hljs-keyword">int</span> b ;<br>        <span class="hljs-keyword">while</span>((b = fis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br>        <span class="hljs-comment">//调用read()方法判断是否读完</span><br>        fis.close();<br>        <span class="hljs-comment">//关闭字符输入流</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2"><a href="#test2" class="headerlink" title="test2"></a><code>test2</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建字符输入流的对象</span><br>       <span class="hljs-comment">// FileReader fr = new FileReader(new File(&quot;charstream\\a.txt&quot;));</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br><br>        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-comment">//一次读取一个字符</span><br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test3"><a href="#test3" class="headerlink" title="test3"></a><code>test3</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//一次读取多个字符。</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//创建一个数组</span><br>        <span class="hljs-keyword">char</span> [] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br><br>        <span class="hljs-comment">//read方法还是读取，但是是一次读取多个字符</span><br>        <span class="hljs-comment">//他把读到的字符都存入到chars数组。</span><br>        <span class="hljs-comment">//返回值：表示本次读到了多少个字符。</span><br>        <span class="hljs-keyword">while</span>((len = fr.read(chars))!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(chars,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>String类</code></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">byte[] getBytes()</td><td align="center">字符串转字节数组,返回一个字节数组</td></tr><tr><td align="center">byte[] getBytes(String charsetName)</td><td align="center">使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</td></tr></tbody></table><p><code>Arrays</code></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Arrays.toString(byte[ ] b)</td><td align="center">字节数组转字符串</td></tr></tbody></table><p><code>测试类CharStreamDemo2</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">// String(byte[] bytes)：</span><br>                <span class="hljs-comment">//通过使用平台的默认字符集解码指定的字节数组来构造新的 String</span><br>       <span class="hljs-comment">// String(byte[] bytes, String charsetName)：</span><br>                <span class="hljs-comment">//通过指定的字符集解码指定的字节数组来构造新的 String</span><br><br>        <span class="hljs-comment">//UTF-8</span><br>        <span class="hljs-keyword">byte</span> [] bytes1 = &#123;-<span class="hljs-number">23</span>, -<span class="hljs-number">69</span>, -<span class="hljs-number">111</span>, -<span class="hljs-number">23</span>, -<span class="hljs-number">87</span>, -<span class="hljs-number">84</span>, -<span class="hljs-number">25</span>, -<span class="hljs-number">88</span>, -<span class="hljs-number">117</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">113</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">111</span>, -<span class="hljs-number">104</span>&#125;;<br>        <span class="hljs-comment">//gbk</span><br>        <span class="hljs-keyword">byte</span> [] bytes2 = &#123;-<span class="hljs-number">70</span>, -<span class="hljs-number">38</span>, -<span class="hljs-number">62</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">77</span>, -<span class="hljs-number">52</span>, -<span class="hljs-number">48</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">44</span>, -<span class="hljs-number">79</span>&#125;;<br><br>        <span class="hljs-comment">//利用默认的UTF-8进行解码</span><br>        String s1 = <span class="hljs-keyword">new</span> String(bytes1);<br>        System.out.println(s1);<span class="hljs-comment">//黑马程序员</span><br><br>        <span class="hljs-comment">//利用指定的GBK进行解码</span><br>        String s2 = <span class="hljs-keyword">new</span> String(bytes2,<span class="hljs-string">&quot;gbk&quot;</span>);<br>        System.out.println(s2);<span class="hljs-comment">//黑马程序员</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        <span class="hljs-comment">// byte[] getBytes()方法</span><br>        <span class="hljs-comment">//使用平台的默认字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</span><br>        <span class="hljs-comment">// byte[] getBytes(String charsetName)方法</span><br>        <span class="hljs-comment">//使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</span><br><br>        String s = <span class="hljs-string">&quot;黑马程序员&quot;</span>;<br>        <span class="hljs-comment">//利用idea默认的UTF-8将中文编码为一系列的字节</span><br>        <span class="hljs-keyword">byte</span>[] bytes1 = s.getBytes();<br>        System.out.println(Arrays.toString(bytes1));<br><br>        <span class="hljs-comment">//byte[] bytes2 = s.getBytes(&quot;UTF-8&quot;);</span><br>        <span class="hljs-keyword">byte</span>[] bytes2 = s.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        System.out.println(Arrays.toString(bytes2));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法:"></a><code>构造方法:</code></h5><table><thead><tr><th align="center">构造方法:</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public FileWriter(String fileName)</td><td align="center">创建字符输出流的对象</td></tr><tr><td align="center">FileWriter(String fileName, boolean append)</td><td align="center"></td></tr></tbody></table><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a><code>常用方法</code></h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void write( char c )</td><td align="center">写出一个字符</td></tr><tr><td align="center">void write( char[] chs )</td><td align="center">写出一个字符组中的所有字符</td></tr><tr><td align="center">void write( char[] chs ,int off,int len )</td><td align="center">写出字符数组的一部分,从off开始,写len个字符</td></tr><tr><td align="center">void write( String str )</td><td align="center">写出一个字符串</td></tr><tr><td align="center">void write( String str ,int offset,int len )</td><td align="center">写出字符串的一部分,从offset开始,写len个字符</td></tr><tr><td align="center">void flush( )</td><td align="center">清空缓冲区(全部写到硬盘里)</td></tr><tr><td align="center">void close( )</td><td align="center">清空缓冲区并且关闭流</td></tr></tbody></table><h6 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a><code>test1</code></h6><p><code>测试类CharStreamDemo3</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建字符输出流的对象</span><br>        <span class="hljs-comment">//FileWriter fw = new FileWriter(new File(&quot;charstream\\a.txt&quot;));</span><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br><br>        <span class="hljs-comment">/*//写出数据</span><br><span class="hljs-comment">        //void write(int c)            写一个字符</span><br><span class="hljs-comment">        fw.write(97);</span><br><span class="hljs-comment">        fw.write(98);</span><br><span class="hljs-comment">        fw.write(99);*/</span><br><br><br>        <span class="hljs-comment">//void write(char[] cbuf)      写出一个字符数组</span><br>       <span class="hljs-comment">/* char [] chars = &#123;97,98,99,100,101&#125;;</span><br><span class="hljs-comment">        fw.write(chars);*/</span><br><br><br>        <span class="hljs-comment">//void write(char[] cbuf, int off, int len)    写出字符数组的一部分</span><br>        <span class="hljs-comment">/*char [] chars = &#123;97,98,99,100,101&#125;;</span><br><span class="hljs-comment">        fw.write(chars,0,3);*/</span><br><br><br>        <span class="hljs-comment">//void write(String str)       写一个字符串</span><br>       <span class="hljs-comment">/* String line = &quot;黑马程序员abc&quot;;</span><br><span class="hljs-comment">        fw.write(line);*/</span><br><br><br>        <span class="hljs-comment">//void write(String str, int off, int len)     写一个字符串的一部分</span><br>        String line = <span class="hljs-string">&quot;黑马程序员abc&quot;</span>;<br>        fw.write(line,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//释放资源</span><br>        fw.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a><code>test2</code></h6><p><code>测试类CharStreamDemo4</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//fw.write(&quot;黑马程序员&quot;);</span><br>        <span class="hljs-comment">//fw.write(97);</span><br>        fw.write(<span class="hljs-string">&quot;97&quot;</span>);<br><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a><code>test3</code></h6><p><code>测试类CharStreamDemo5</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//flush()刷新流。刷新完毕之后，还可以继续写数据</span><br>        <span class="hljs-comment">//close()关闭流。释放资源。一旦关闭，就不能写数据</span><br><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        fw.write(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>        <span class="hljs-comment">//fw.flush();</span><br>        fw.write(<span class="hljs-string">&quot;666&quot;</span>);<br>        <span class="hljs-comment">//fw.flush();</span><br><br>        fw.close();<br><br>        fw.write(<span class="hljs-string">&quot;aaa&quot;</span>);<span class="hljs-comment">//Stream closed</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test4"><a href="#test4" class="headerlink" title="test4"></a><code>test4</code></h6><p>从控制台录入数据写入文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//将键盘录入的用户名和密码保存到本地实现永久化存储</span><br>        <span class="hljs-comment">//要求：用户名独占一行，密码独占一行</span><br><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1，实现键盘录入，把用户名和密码录入进来</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请录入用户名&quot;</span>);<br>        String username = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请录入密码&quot;</span>);<br>        String password = sc.next();<br><br>        <span class="hljs-comment">//2.分别把用户名和密码写到本地文件。</span><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//将用户名和密码写到文件中</span><br>        fw.write(username);<br>        <span class="hljs-comment">//表示写出一个回车换行符 windows \r\n  MacOS \r  Linux \n</span><br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        fw.write(password);<br>        <span class="hljs-comment">//刷新流</span><br>        fw.flush();<br>        <span class="hljs-comment">//释放资源</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        任何字符流都内置的有缓冲区</p><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        字符缓冲流  =  基本字符流 + 缓冲区(8K数组)</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a><code>BufferedWriter</code></h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">构造方法:</td><td align="left">public BufferedWriter(Writer w);</td></tr><tr><td align="center">特有方法:</td><td align="left">public void newLine();  //写出一个换行,该换行会根据操作系统自动变化.</td></tr></tbody></table><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲输出流</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br>        <span class="hljs-comment">//写出数据</span><br>        <span class="hljs-comment">//实际写出的是97对应的字符a</span><br>        bw.write(<span class="hljs-number">97</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//实际写出的是97 - 101 对应的字符 abcde</span><br>        <span class="hljs-keyword">char</span> [] chars = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>&#125;;<br>        bw.write(chars);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//实际写的是abc</span><br>        bw.write(chars,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//会把字符串的内容原样写出</span><br>        bw.write(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//会把字符串的一部分写出 abcde</span><br>        String line = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>        bw.write(line,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br><br>        bw.flush();<br><br>        bw.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输出流BufferedWrite ： newLine  跨平台的换行符</span><br><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//写出数据</span><br>        bw.write(<span class="hljs-string">&quot;黑马程序员666&quot;</span>);<br>        <span class="hljs-comment">//跨平台的回车换行</span><br>        bw.newLine();<br>        bw.write(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        <span class="hljs-comment">//跨平台的回车换行</span><br>        bw.newLine();<br>        bw.write(<span class="hljs-string">&quot;-------------&quot;</span>);<br><br>        <span class="hljs-comment">//刷新流</span><br>        bw.flush();<br>        <span class="hljs-comment">//释放资源</span><br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​    </p><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a><code>BufferedReader</code></h3><table><thead><tr><th align="center">方法</th><th>说明</th></tr></thead><tbody><tr><td align="center">构造方法:</td><td>public BufferedReader(Reader r);</td></tr><tr><td align="center">特有方法:</td><td>public String readLine();  //一次读取一行数据,如果读取不到,则返回null</td></tr></tbody></table><h4 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲输入流</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br>        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-keyword">char</span> [] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = br.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(chars,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输入流BufferedReader： readLine 读一整行</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//读取数据</span><br>        String line1 = br.readLine();<br>        String line2 = br.readLine();<br>        String line3 = br.readLine();<br><br>        <span class="hljs-comment">//在之前，如果读不到数据，返回-1</span><br>        <span class="hljs-comment">//但是readLine如果读不到数据返回null</span><br>        String line4 = br.readLine();<br>        String line5 = br.readLine();<br><br><br>        System.out.println(line1);<br>        System.out.println(line2);<br>        System.out.println(line3);<br>        System.out.println(line4);<br>        System.out.println(line5);<br><br>        <span class="hljs-comment">// 释放资源</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-2"><a href="#test3-2" class="headerlink" title="test3"></a><code>test3</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo13</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输入流BufferedReader： readLine 读一整行</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//使用循环来进行改进</span><br>        String line;<br>        <span class="hljs-comment">//可以读取一整行数据。一直读，读到回车换行为止。</span><br>        <span class="hljs-comment">//但是他不会读取回车换行符。</span><br>        <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        br.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="读取文件中的数据，排序后再次写到本地文件-应用场景"><a href="#读取文件中的数据，排序后再次写到本地文件-应用场景" class="headerlink" title="读取文件中的数据，排序后再次写到本地文件(应用场景)"></a>读取文件中的数据，排序后再次写到本地文件(应用场景)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo14</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//需求：读取文件中的数据，排序后再次写到本地文件</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.要把文件中的数据读取进来。</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\sort.txt&quot;</span>));<br>        <span class="hljs-comment">//输出流一定不能写在这里，因为会清空文件中的内容</span><br>        <span class="hljs-comment">//BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;charstream\\sort.txt&quot;));</span><br><br>        String line = br.readLine();<br>        System.out.println(<span class="hljs-string">&quot;读取到的数据为&quot;</span> + line);<br>        br.close();<br><br>        <span class="hljs-comment">//2.按照空格进行切换</span><br>        String[] split = line.split(<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//9 1 2 5 3 10 4 6 7 8</span><br>        <span class="hljs-comment">//3.把字符串类型的数组变成int类型</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[split.length];<br>        <span class="hljs-comment">//遍历split数组，可以进行类型转换。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>            String smallStr = split[i];<br>            <span class="hljs-comment">//类型转换</span><br>            <span class="hljs-keyword">int</span> number = Integer.parseInt(smallStr);<br>            <span class="hljs-comment">//把转换后的结果存入到arr中</span><br>            arr[i] = number;<br>        &#125;<br>        <span class="hljs-comment">//4.排序</span><br>        Arrays.sort(arr);<br>        System.out.println(Arrays.toString(arr));<br><br><br>        <span class="hljs-comment">//5.把排序之后结果写回到本地 1 2 3 4...</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\sort.txt&quot;</span>));<br>        <span class="hljs-comment">//写出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            bw.write(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>            bw.flush();<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        bw.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        专门用于输出的IO流<br>​        该流中包含了一些用于输出的方法</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a><code>PrintStream</code></h4><p>​            构造方法: public  PrintStream(OutputStream os)</p><h4 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a><code>PrintWriter</code></h4><p>​            构造方法: public  PrintWriter(Writer w)</p><h3 id="特有方法："><a href="#特有方法：" class="headerlink" title="特有方法："></a>特有方法：</h3><h4 id="print"><a href="#print" class="headerlink" title="print();"></a><code>print();</code></h4><h4 id="println"><a href="#println" class="headerlink" title="println();"></a><code>println();</code></h4><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>​        转换流 = 基本字节流 + 指定编码表</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h4 id="可以按照指定的编码来读写文件"><a href="#可以按照指定的编码来读写文件" class="headerlink" title="可以按照指定的编码来读写文件"></a>可以按照指定的编码来读写文件</h4><p>​            JDK11之后,基本字符流中也有指定编码表的功能<br>​            public FileReader(String fileName, Charset charset)<br>​            public FileWriter(String fileName, Charset charset)</p><h4 id="把字节流转换为字符流"><a href="#把字节流转换为字符流" class="headerlink" title="把字节流转换为字符流"></a>把字节流转换为字符流</h4><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><h4 id="InputStreanReader"><a href="#InputStreanReader" class="headerlink" title="InputStreanReader"></a>InputStreanReader</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public InputStreanReader(InputStream in, String charsetName);</td><td align="center">注意:FileReader = InputStreamReader + 默认编码表;</td></tr></tbody></table><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public OutputStreamWriter(OutputStream os, String charsetName);</td><td align="center">FileWriter = OutputStreamWriter + 默认编码表;</td></tr></tbody></table><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//在JDK11之后,字符流新推出了一个构造,也可以指定编码表</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>, Charset.forName(<span class="hljs-string">&quot;gbk&quot;</span>));<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span> ((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        fr.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//如何解决乱码现象</span><br>        <span class="hljs-comment">//文件是什么码表,那么咱们就必须使用什么码表去读取.</span><br>        <span class="hljs-comment">//我们就要指定使用GBK码表去读取文件.</span><br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>),<span class="hljs-string">&quot;gbk&quot;</span>);<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch = isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        isr.close();<br><br><br>        OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\b.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        osw.write(<span class="hljs-string">&quot;我爱学习,谁也别打扰我&quot;</span>);<br>        osw.close();<br>    &#125;<br><br>    <span class="hljs-comment">//这个方法直接读取会产生乱码</span><br>    <span class="hljs-comment">//因为文件是GBK码表</span><br>    <span class="hljs-comment">//而idea默认的是UTF-8编码格式.</span><br>    <span class="hljs-comment">//所以两者不一致,导致乱码</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span> ((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        fr.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​                </p><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>​        专门用来读写对象的IO流</p><h3 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h3><h4 id="对象输出流-序列化流"><a href="#对象输出流-序列化流" class="headerlink" title="对象输出流(序列化流):"></a>对象输出流(序列化流):</h4><h5 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h5><p>​                 <code>ObjectOutputStream</code></p><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><p>​                <code>public ObjectOutputStream(OutputStream os);</code></p><h5 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法:"></a>特有方法:</h5><p>​                <code>void writeObject(Object obj);</code></p><h4 id="对象输入流-反序列化流"><a href="#对象输入流-反序列化流" class="headerlink" title="对象输入流(反序列化流):"></a>对象输入流(反序列化流):</h4><h5 id="类名-1"><a href="#类名-1" class="headerlink" title="类名"></a>类名</h5><p>​                  <code>ObjectInputStream</code></p><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5><p>​                <code>public ObjectInputStream(InputStream is);</code></p><h5 id="特有方法-1"><a href="#特有方法-1" class="headerlink" title="特有方法:"></a>特有方法:</h5><p>​                <code>Object readObject();</code></p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​        1.被序列化的对象必须实现Serializable接口<br>​        2.被序列化的类的内部需要添加一个序列化号<br>​            private static final long serialVersionUID = 1L;<br>​            在类的后边选择”Alt + 回车”<br>​        3.如果某个成员变量不想参与序列化,则可以使用transient关键字修饰<br>​            private transient int age;<br>​        4.序列化对象的个数 == 反序列化对象个数</p><h3 id="应用与练习"><a href="#应用与练习" class="headerlink" title="应用与练习"></a>应用与练习</h3><h4 id="User"><a href="#User" class="headerlink" title="User"></a><code>User</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">//如果想要这个类的对象能被序列化,那么这个类必须要实现一个接口.Serializable</span><br><br><span class="hljs-comment">//Serializable 接口的意义</span><br><span class="hljs-comment">//称之为是一个标记性接口,里面没有任何的抽象方法</span><br><span class="hljs-comment">//只要一个类实现了这个Serializable接口,那么就表示这个类的对象可以被序列化.</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">//serialVersionUID 序列号</span><br>    <span class="hljs-comment">//如果我们自己没有定义,那么虚拟机会根据类中的信息会自动的计算出一个序列号.</span><br>    <span class="hljs-comment">//问题:如果我们修改了类中的信息.那么虚拟机会再次计算出一个序列号.</span><br><br>    <span class="hljs-comment">//第一步:把User对象序列化到本地. --- -5824992206458892149</span><br>    <span class="hljs-comment">//第二步:修改了javabean类. 导致 --- 类中的序列号 4900133124572371851</span><br>    <span class="hljs-comment">//第三步:把文件中的对象读到内存. 本地中的序列号和类中的序列号不一致了.</span><br><br>    <span class="hljs-comment">//解决?</span><br>    <span class="hljs-comment">//不让虚拟机帮我们自动计算,我们自己手动给出.而且这个值不要变.</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String username, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo2"><a href="#ConvertedDemo2" class="headerlink" title="ConvertedDemo2"></a><code>ConvertedDemo2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br>        <span class="hljs-comment">//需求:把这个用户信息保存到本地文件去.</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        bw.write(user.getUsername());<br>        bw.newLine();<br>        bw.write(user.getPassword());<br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo3"><a href="#ConvertedDemo3" class="headerlink" title="ConvertedDemo3"></a><code>ConvertedDemo3</code></h4><h5 id="对象输入流"><a href="#对象输入流" class="headerlink" title="对象输入流"></a>对象输入流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(user);<br>        oos.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo4"><a href="#ConvertedDemo4" class="headerlink" title="ConvertedDemo4"></a><code>ConvertedDemo4</code></h4><h5 id="对象输出流"><a href="#对象输出流" class="headerlink" title="对象输出流"></a>对象输出流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        User o = (User) ois.readObject();<br>        System.out.println(o);<br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo5"><a href="#ConvertedDemo5" class="headerlink" title="ConvertedDemo5"></a><code>ConvertedDemo5</code></h4><h5 id="综合运用对象输出流和对象输入流"><a href="#综合运用对象输出流和对象输入流" class="headerlink" title="综合运用对象输出流和对象输入流"></a>综合运用对象输出流和对象输入流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.写对象</span><br>        <span class="hljs-comment">//2.修改javabean类</span><br>        <span class="hljs-comment">//3.读对象</span><br><br>        <span class="hljs-comment">//写对象 --- 序列化</span><br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">//读对象 --- 反序列化</span><br>       method2();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        User o = (User) ois.readObject();<br>        System.out.println(o);<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(user);<br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Student"><a href="#Student" class="headerlink" title="Student"></a><code>Student</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">2L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo6"><a href="#ConvertedDemo6" class="headerlink" title="ConvertedDemo6"></a><code>ConvertedDemo6</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杜子腾&quot;</span>,<span class="hljs-number">16</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(s1);<br>        oos.writeObject(s2);<br>        oos.writeObject(s3);<br><br>        oos.close();<br><br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        Object obj;<br>      <span class="hljs-comment">/*  while((obj = ois.readObject()) != null)&#123;</span><br><span class="hljs-comment">            System.out.println(obj);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               Object o = ois.readObject();<br>               System.out.println(o);<br>           &#125; <span class="hljs-keyword">catch</span> (EOFException e) &#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo7"><a href="#ConvertedDemo7" class="headerlink" title="ConvertedDemo7"></a><code>ConvertedDemo7</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杜子腾&quot;</span>,<span class="hljs-number">16</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br><br>        <span class="hljs-comment">//我们往本地文件中写的就是一个集合</span><br>        oos.writeObject(list);<br><br>        oos.close();<br><br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        ArrayList&lt;Student&gt; list2 = (ArrayList&lt;Student&gt;) ois.readObject();<br>        <span class="hljs-keyword">for</span> (Student student : list2) &#123;<br>            System.out.println(student);<br>        &#125;<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述:"></a>概述:</h3><p>​        Properties本质上是一个Map集合.<br>​        专门用于读取配置文件(文件中只包含键值对)</p><h3 id="特有方法-2"><a href="#特有方法-2" class="headerlink" title="特有方法:"></a>特有方法:</h3><table><thead><tr><th align="center">特有方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void setProperty(String key,String value);</td><td align="center">就相当于map集合的put方法</td></tr><tr><td align="center">String getProperty(String key);</td><td align="center">就相当于map集合的get方法</td></tr><tr><td align="center">void load(Reader fr);</td><td align="center">把配置文件中的键值对,读取到Properties集合中.</td></tr><tr><td align="center">void store(Writer fw, String comments);</td><td align="center">把Properties集合中的键值对,同步到配置文件中.</td></tr></tbody></table><h4 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//增</span><br>        prop.put(<span class="hljs-string">&quot;小龙女&quot;</span>,<span class="hljs-string">&quot;尹志平&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;郭襄&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;黄蓉&quot;</span>,<span class="hljs-string">&quot;欧阳克&quot;</span>);<br>        System.out.println(prop);<br><br>        <span class="hljs-comment">//删</span><br>        <span class="hljs-comment">//prop.remove(&quot;郭襄&quot;);</span><br>        <span class="hljs-comment">//System.out.println(prop);</span><br><br>        <span class="hljs-comment">//改</span><br>        <span class="hljs-comment">//put --- 如果键不存在,那么就添加,如果键存在,那么就覆盖.</span><br>        prop.put(<span class="hljs-string">&quot;小龙女&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>);<br>        System.out.println(prop);<br>        <span class="hljs-comment">//查</span><br><br>        <span class="hljs-comment">//Object value = prop.get(&quot;黄蓉&quot;);</span><br>        <span class="hljs-comment">//System.out.println(value);</span><br><br>        <span class="hljs-comment">//遍历</span><br>        Set&lt;Object&gt; keys = prop.keySet();<br>        <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>            Object value = prop.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//装的是所有的键值对对象.</span><br>        Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = prop.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entries) &#123;<br>            Object key = entry.getKey();<br>            Object value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//Object setProperty(String key, String value) --- put</span><br>                    <span class="hljs-comment">//设置集合的键和值，都是String类型，底层调用 Hashtable方法 put</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.setProperty(<span class="hljs-string">&quot;江苏&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;安徽&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;山东&quot;</span>,<span class="hljs-string">&quot;济南&quot;</span>);<br><br>        System.out.println(prop);<br>        <span class="hljs-comment">//String getProperty(String key)  --- get</span><br>                    <span class="hljs-comment">//使用此属性列表中指定的键搜索属性</span><br><br>       <span class="hljs-comment">/* String value = prop.getProperty(&quot;江苏&quot;);</span><br><span class="hljs-comment">        System.out.println(value);*/</span><br><br><br>        <span class="hljs-comment">//Set&lt;String&gt; stringPropertyNames()  --- keySet</span><br>                    <span class="hljs-comment">//从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span><br><br>        Set&lt;String&gt; keys = prop.stringPropertyNames();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            String value = prop.getProperty(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-3"><a href="#test3-3" class="headerlink" title="test3"></a><code>test3</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//void load(Reader reader)                     将本地文件中的键值对数据读取到集合中</span><br>        <span class="hljs-comment">//void store(Writer writer, String comments)   将集合中的数据以键值对形式保存在本地</span><br><br><br>        <span class="hljs-comment">//读取</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        <span class="hljs-comment">//调用完了load方法之后,文件中的键值对数据已经在集合中了.</span><br>        prop.load(fr);<br>        fr.close();<br><br>        System.out.println(prop);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4-1"><a href="#test4-1" class="headerlink" title="test4"></a><code>test4</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//void load(Reader reader)                     将本地文件中的键值对数据读取到集合中</span><br>        <span class="hljs-comment">//void store(Writer writer, String comments)   将集合中的数据以键值对形式保存在本地</span><br><br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.put(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;456&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;789&quot;</span>);<br><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        prop.store(fw,<span class="hljs-keyword">null</span>);<br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="day12思维导图"><a href="#day12思维导图" class="headerlink" title="day12思维导图"></a><code>day12思维导图</code></h2><pre><code class=" mermaid">graph LRid0(JavaSE进阶)---id12(第十二天)        subgraph day12        id12(第十二天)---id121(01-字节流操作文本文件出现乱码的问题)        id12(第十二天)---id122(02-字符流-编码表)        id12(第十二天)---id123(03-字符流编码和解码的方法)        id12(第十二天)---id124(04-字节流读取中文出现乱码的原因)        id12(第十二天)---id125(05-字符流-读取中文的过程)        id12(第十二天)---id126(06-字符流-写出数据)        id12(第十二天)---id127(07-字符流-写出数据的注意事项)        id12(第十二天)---id128(08-字符流-flush和close方法)        id12(第十二天)---id129(09-字符流-读取数据)        id12(第十二天)---id1210(10-字符流-练习)        id12(第十二天)---id1211(11-字符缓冲输入流-读取数据)        id12(第十二天)---id1212(12-字符缓冲输出流-输出数据)        id12(第十二天)---id1213(13-缓冲流特有方法)        id12(第十二天)---id1214(14-缓冲流-练习)        id12(第十二天)---id1215(15-10流-小结)        id12(第十二天)---id1216(16-转换流一概念)        id12(第十二天)---id1217(17-转换流-指定编码读写)        id12(第十二天)---id1218(18-对象操作流-基本特点)        id12(第十二天)---id1219(19-对象操作流-序列化)        id12(第十二天)---id1220(20-对象操作流-反序列化)        id12(第十二天)---id1221(21-对象操作流两个注意点)        id12(第十二天)---id1222(22-对象操作流-两个注意点2)        id12(第十二天)---id1223(23-对象操作流-练习)        id12(第十二天)---id1224(24-Properties-概述)        id12(第十二天)---id1225(25-Properties-作为map集合的基本使用)        id12(第十二天)---id1226(26-Properties-特有方法)        id12(第十二天)---id1227(27-Properties-load)        id12(第十二天)---id1228(28-Properties-store)        end</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他流</tag>
      
      <tag>Properties类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day11 IO流</title>
    <link href="/blog-public/2021/04/02/SAd11/"/>
    <url>/blog-public/2021/04/02/SAd11/</url>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><input disabled="" type="checkbox">  I: Input输入</p><div class="hljs code-wrapper"><pre><code>    把文件上的数据读取到内存中</code></pre></div></li><li><p><input disabled="" type="checkbox">  O: Output输出</p><div class="hljs code-wrapper"><pre><code>    把内存中的数据写出去的技术</code></pre></div></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="根据流向分类"><a href="#根据流向分类" class="headerlink" title="根据流向分类"></a>根据流向分类</h3><h4 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h4><p>​            就是把数据读取到内存中的流<br>​                所有输入流都有read方法</p><h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>​            就是把内存中的数据写出去的流<br>​                所有输出流都有write方法</p><h3 id="根据单位分类"><a href="#根据单位分类" class="headerlink" title="根据单位分类"></a>根据单位分类</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><p>​            不论读写,操作的都是字节<br>​                可以操作任何文件</p><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>​            不论读写,操作的都是字符<br>​                只能操作文本类文件</p><h2 id="基本字节流"><a href="#基本字节流" class="headerlink" title="基本字节流"></a>基本字节流</h2><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>​            <code>FileOutputStream</code></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileOutputStream(String path)</td><td align="center">直接指向一个文件,表示要向文件中输出内容</td></tr><tr><td align="center">public FileOutputStream(String path, boolean append)</td><td align="center">直接指向一个文件,表示要向文件中输出内容<br/>                append表示是否追加. true表示追加</td></tr></tbody></table><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>​            </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void write( int b)</td><td align="center">写出一个字节b到文件输出流</td></tr><tr><td align="center">void write( byte[ ]  b)</td><td align="center">写出一个字节数组中的所有字节</td></tr><tr><td align="center">void write( byte[ ]  b,int off,int len)</td><td align="center">写出字节数组的一部分,从off开始,写len个</td></tr></tbody></table><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建字节输出流的对象 --- 告诉虚拟机我要往哪个文件中写数据了</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//FileOutputStream fos = new FileOutputStream(new File(&quot;D:\\a.txt&quot;));</span><br><br>        <span class="hljs-comment">//2,写数据</span><br>        fos.write(<span class="hljs-number">97</span>);<br><br>        <span class="hljs-comment">//3,释放资源</span><br>        fos.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建字节输出流的对象</span><br>                        <span class="hljs-comment">//注意点:如果文件不存在,会帮我们自动创建出来.</span><br>                        <span class="hljs-comment">//       如果文件存在,会把文件清空.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//2,写数据     传递一个整数时,那么实际上写到文件中的,是这个整数在码表中对应的那个字符.</span><br>        fos.write(<span class="hljs-number">98</span>);<br><br>        <span class="hljs-comment">//3,释放资源</span><br>        fos.close(); <span class="hljs-comment">//告诉操作系统,我现在已经不要再用这个文件了.</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br>        fos.write(<span class="hljs-number">97</span>);<br>        fos.write(<span class="hljs-number">98</span>);<br>        fos.write(<span class="hljs-number">99</span>);<br><br>        fos.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">/*byte [] bys = &#123;97,98,99&#125;;</span><br><span class="hljs-comment">        fos.write(bys);*/</span><br><br>        <span class="hljs-keyword">byte</span> [] bys = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>,<span class="hljs-number">103</span>&#125;;<br>        fos.write(bys,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="tset5"><a href="#tset5" class="headerlink" title="tset5"></a>tset5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//第二个参数就是续写开关,如果没有传递,默认就是false,</span><br>        <span class="hljs-comment">//表示不打开续写功能,那么创建对象的这行代码会清空文件.</span><br><br>        <span class="hljs-comment">//如果第二个参数为true,表示打开续写功能</span><br>        <span class="hljs-comment">//那么创建对象的这行代码不会清空文件.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<br><br>        fos.write(<span class="hljs-number">97</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">98</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">99</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">101</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//System.out.println(2/0);</span><br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\a.txt&quot;</span>);<br>            fos.write(<span class="hljs-number">97</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>           e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//finally语句里面的代码,一定会被执行.</span><br>            <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><h4 id="类名-1"><a href="#类名-1" class="headerlink" title="类名"></a>类名</h4><p>​            <code>FileInputStream</code></p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileInputStream(String path)</td><td align="center">直接指向一个文件,表示要从文件中读取内容</td></tr></tbody></table><p>​<br>​                </p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">一次读取一个字节,返回值为读取字节的int值,读到-1时结束</td></tr><tr><td align="center">int read(byte [] b)</td><td align="center">一次读取一个字节数组,返回值为读取到的字节个数,读到-1时结束</td></tr></tbody></table><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//如果文件存在,那么就不会报错.</span><br>        <span class="hljs-comment">//如果文件不存在,那么就直接报错.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> read = fis.read();<br>        <span class="hljs-comment">//一次读取一个字节,返回值就是本次读到的那个字节数据.</span><br>        <span class="hljs-comment">//也就是字符在码表中对应的那个数字.</span><br>        <span class="hljs-comment">//如果我们想要看到的是字符数据,那么一定要强转成char</span><br><br><br>        System.out.println((<span class="hljs-keyword">char</span>)read);<br><br>        <span class="hljs-comment">//释放资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//1,文件中多个字节我怎么办?</span><br>        <span class="hljs-comment">/*while(true)&#123;</span><br><span class="hljs-comment">            int i1 = fis.read();</span><br><span class="hljs-comment">            System.out.println(i1);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><h3 id="单字节拷贝"><a href="#单字节拷贝" class="headerlink" title="单字节拷贝"></a>单字节拷贝</h3><h4 id="思路与格式"><a href="#思路与格式" class="headerlink" title="思路与格式"></a>思路与格式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">//创建输入流,表示要读取&quot;E:\itcast\mn.jpg&quot;</span><br>    FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:\\itcast\\mn.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输出流,表示要把读取到的数据写入&quot;myByteStream\\mn.jpg&quot;</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;myByteStream\\\\mn.jpg&quot;</span>);<br>    <span class="hljs-comment">//输入流读取数据,输出流写出数据(一次读取一个字节,一次写入一个字节)</span><br>    <span class="hljs-keyword">int</span> by;<br>    <span class="hljs-keyword">while</span> ((by = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>        fos.write(by);<br>    &#125;<br>    <span class="hljs-comment">//释放资源</span><br>    fos.close();<br>    fis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建了字节输入流,准备读数据.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\itheima\\a.avi&quot;</span>);<br>        <span class="hljs-comment">//创建了字节输出流,准备写数据.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            fos.write(b);<br>        &#125;<br><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字节数组拷贝"><a href="#字节数组拷贝" class="headerlink" title="字节数组拷贝"></a>字节数组拷贝</h3><h4 id="思路与格式-1"><a href="#思路与格式-1" class="headerlink" title="思路与格式"></a>思路与格式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建输入流,表示要读取&quot;E:\itcast\mn.jpg&quot;</span><br>       FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:\\itcast\\mn.jpg&quot;</span>);<br>       <span class="hljs-comment">//创建输出流,表示要把读取到的数据写入&quot;myByteStream\\mn.jpg&quot;</span><br>       FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;myByteStream\\\\mn.jpg&quot;</span>);<br>       <span class="hljs-comment">//输入流读取数据,输出流写出数据(一次读取一个字节数组,一次写入一个字节数组的一部分)</span><br>       <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">int</span> len;<br>       <span class="hljs-keyword">while</span> ((len = fis.read(bys)) != -<span class="hljs-number">1</span>) &#123;<br>           fos.write(bys, <span class="hljs-number">0</span>, len);<br>       &#125;<br>       <span class="hljs-comment">//释放资源</span><br>       fos.close();<br>       fis.close();<br></code></pre></div></td></tr></table></figure><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\itheima\\a.avi&quot;</span>);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//本次读到的有效字节个数 --- 这次读了几个字节</span><br><br>        <span class="hljs-keyword">while</span>((len = fis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            fos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        缓冲流  =  基本流 + 缓冲区(数组)</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h4 id="缓冲输入流-BufferedInputStream"><a href="#缓冲输入流-BufferedInputStream" class="headerlink" title="缓冲输入流: BufferedInputStream"></a>缓冲输入流: BufferedInputStream</h4><h5 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h5><p>​                public BufferedInputStream(InputStream is);</p><h5 id="本质"><a href="#本质" class="headerlink" title="本质:"></a>本质:</h5><p>​                BufferedInputStream = InputStream + 8K数组;</p><h4 id="缓冲输出流-BufferedOutputStream"><a href="#缓冲输出流-BufferedOutputStream" class="headerlink" title="缓冲输出流: BufferedOutputStream"></a>缓冲输出流: BufferedOutputStream</h4><h5 id="构造-1"><a href="#构造-1" class="headerlink" title="构造:"></a>构造:</h5><p>​                public BufferedOutputStream(OutputStream os);</p><h5 id="本质-1"><a href="#本质-1" class="headerlink" title="本质:"></a>本质:</h5><p>​                BufferedOutputStream = OutputStream + 8K数组;</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//就要利用缓冲流去拷贝文件</span><br><br>        <span class="hljs-comment">//创建一个字节缓冲输入流</span><br>        <span class="hljs-comment">//在底层创建了一个默认长度为8192的字节数组。</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>));<br>        <span class="hljs-comment">//创建一个字节缓冲输出流</span><br>        <span class="hljs-comment">//在底层也创建了一个默认长度为8192的字节数组。</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\copy.avi&quot;</span>));<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<br>        &#125;<br><br>        <span class="hljs-comment">//方法的底层会把字节流给关闭。</span><br>        bis.close();<br>        bos.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//缓冲流结合数组，进行文件拷贝</span><br><br>        <span class="hljs-comment">//创建一个字节缓冲输入流</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>));<br><br>        <span class="hljs-comment">//创建一个字节缓冲输出流</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\copy.avi&quot;</span>));<br><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        bis.close();<br>        bos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        该编解码操作指的都是对String的操作</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码:"></a>编码:</h4><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">public byte[] getBytes();</td><td align="center">//按照”默认编码格式”进行编码.</td></tr><tr><td align="center">public byte[] getBytes(String charsetName)</td><td align="center">//按照”指定编码格式charsetName”编码</td></tr></tbody></table><p>​    </p><h3 id="解码"><a href="#解码" class="headerlink" title="解码:"></a>解码:</h3><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">public String(byte[] bys);</td><td align="center">//按照”默认编码格式”进行解码.</td></tr><tr><td align="center">public String(byte[] bys,String charsetName);</td><td align="center">//按照”指定编码格式charsetName”进行解码.</td></tr></tbody></table><p>​        </p><h2 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        就是字符和对应的数据组成的一张表。</p><h3 id="常见的编码表"><a href="#常见的编码表" class="headerlink" title="常见的编码表"></a>常见的编码表</h3><h4 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h4><p>​            最原始的编码表, 所有编码表都兼容<br>​            只包含英文字母,数字,和英文标点符号</p><h4 id="ISO-8859-1"><a href="#ISO-8859-1" class="headerlink" title="ISO-8859-1"></a>ISO-8859-1</h4><p>​            欧洲常用编码表</p><h4 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h4><p>​            简体中文编码表, 国内常用. </p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>​            万国码, 包含了世界上大多数国家的文字和符号</p><h2 id="Try-catah-finally"><a href="#Try-catah-finally" class="headerlink" title="Try-catah-finally"></a>Try-catah-finally</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//可能会出现异常的代码</span><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>   <span class="hljs-comment">// e.printStackTrace();</span><br>    <span class="hljs-comment">//如果出现异常则执行catch</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">//无论是否出现异常,最终都会执行finally</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建输出流对象,并给予初始化值</span><br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//2.关联文件</span><br>    fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;Mytest\\a.txt&quot;</span>);<br>    String s = <span class="hljs-string">&quot;我爱中国&quot;</span>;<br>    <span class="hljs-comment">//3.向文件输出内容</span><br>    fos.write(s.getBytes());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//4.判断输出流是否创建成功(如果没有创建成功,则就没有必要关闭了)</span><br>    <span class="hljs-keyword">if</span> (fos != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day10 Stream&amp;File</title>
    <link href="/blog-public/2021/04/02/SAd10/"/>
    <url>/blog-public/2021/04/02/SAd10/</url>
    
    <content type="html"><![CDATA[<h1 id="Stream-amp-File"><a href="#Stream-amp-File" class="headerlink" title="Stream&amp;File"></a>Stream&amp;File</h1><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        专门用来快速的处理集合或数组的一个工具.</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><p>​        </p><table><thead><tr><th align="center">数据类型</th><th align="center">如何转换为Stream流</th></tr></thead><tbody><tr><td align="center">Collection集合</td><td align="center">Stream s=集合.stream();</td></tr><tr><td align="center">Map集合-&gt;键</td><td align="center">Stream s=集合.keySet().stream();</td></tr><tr><td align="center">Map集合-&gt;值</td><td align="center">Stream s=集合.values().stream();</td></tr><tr><td align="center">Map集合-&gt;键值对</td><td align="center">Stream s=集合.entrySet().stream();</td></tr><tr><td align="center">数组</td><td align="center">Stream s=Stream.of(数组名)</td></tr><tr><td align="center">多个零散元素</td><td align="center">Stream s=Stream.of(数组元素1,数组元素2…)</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的获取</span><br><span class="hljs-comment"> 单列集合 : 集合对象.stream();</span><br><span class="hljs-comment"> 双列集合 : 不能直接获取,需要间接获取</span><br><span class="hljs-comment">            集合对象.keySet().stream();</span><br><span class="hljs-comment">            集合对象.entrySet().stream();</span><br><span class="hljs-comment"> 数组     :</span><br><span class="hljs-comment">            Arrays.stream(数组名);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 同种数据类型的多个数据:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            Stream.of(数据1,数据2,数据3......);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//单列集合</span><br>        <span class="hljs-comment">//method1();</span><br><br><br>        <span class="hljs-comment">//双列集合</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//数组</span><br>        <span class="hljs-comment">//method3();</span><br><br>        <span class="hljs-comment">//同种数据类型的多个数据</span><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;<br>        Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        Arrays.stream(arr).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        HashMap&lt;String,Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        hm.put(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">24</span>);<br>        hm.put(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">25</span>);<br>        hm.put(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">26</span>);<br>        hm.put(<span class="hljs-string">&quot;qianqi&quot;</span>,<span class="hljs-number">27</span>);<br><br>        <span class="hljs-comment">//双列集合不能直接获取Stream流</span><br>        <span class="hljs-comment">//keySet</span><br>        <span class="hljs-comment">//先获取到所有的键</span><br>        <span class="hljs-comment">//再把这个Set集合中所有的键放到Stream流中</span><br>        <span class="hljs-comment">//hm.keySet().stream().forEach(s-&gt; System.out.println(s));</span><br><br><br>        <span class="hljs-comment">//entrySet</span><br>        <span class="hljs-comment">//先获取到所有的键值对对象</span><br>        <span class="hljs-comment">//再把这个Set集合中所有的键值对对象放到Stream流中</span><br>        hm.entrySet().stream().forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br><span class="hljs-comment">//        Stream&lt;String&gt; stream = list.stream();</span><br><span class="hljs-comment">//        stream.forEach(s-&gt; System.out.println(s));</span><br>        list.stream().forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Stream<T> filter(Predicate predicate)</td><td align="center">按照指定的Predicate规则,对流中数据进行过滤</td></tr><tr><td align="center">public Stream<T>limit(long maxSize)</td><td align="center">获取前几个元素</td></tr><tr><td align="center">public Stream<T>skip(long n)</td><td align="center">跳过指定参数个元素</td></tr><tr><td align="center">public static  <T> Stream <T> concat(Stream a,Stream b)</td><td align="center">合并a和b两个流为一个流</td></tr><tr><td align="center">public Stream<T> distinct()</td><td align="center">移除流中重复的元素</td></tr><tr><td align="center">public void forEach( Consumer action )</td><td align="center">按照指定Consumer规则,遍历流中数据</td></tr><tr><td align="center">public long count()</td><td align="center">返回此流中的元素数</td></tr><tr><td align="center">public <R> Stream <R> map(Function mapper)</td><td align="center">把当前Stream流转换为其他类型的Stream流</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的中间方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Stream&lt;T&gt; filter(Predicate predicate)：过滤</span><br><span class="hljs-comment">//                Predicate接口中的方法    boolean test(T t)：对给定的参数进行判断，返回一个布尔值</span><br><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//filter方法获取流中的 每一个数据.</span><br>        <span class="hljs-comment">//而test方法中的s,就依次表示流中的每一个数据.</span><br>        <span class="hljs-comment">//我们只要在test方法中对s进行判断就可以了.</span><br>        <span class="hljs-comment">//如果判断的结果为true,则当前的数据留下</span><br>        <span class="hljs-comment">//如果判断的结果为false,则当前数据就不要.</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                new Predicate&lt;String&gt;() &#123;</span><br><span class="hljs-comment">//                    @Override</span><br><span class="hljs-comment">//                    public boolean test(String s) &#123;</span><br><span class="hljs-comment">//                        boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br><br>        <span class="hljs-comment">//因为Predicate接口中只有一个抽象方法test</span><br>        <span class="hljs-comment">//所以我们可以使用lambda表达式来简化</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                (String s)-&gt;&#123;</span><br><span class="hljs-comment">//                    boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br>        list.stream().filter(s -&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 体验Stream流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 创建一个集合，存储多个字符串元素</span><br><span class="hljs-comment"> * &quot;张三丰&quot;,&quot;张无忌&quot;,&quot;张翠山&quot;,&quot;王二麻子&quot;,&quot;张良&quot;,&quot;谢广坤&quot;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 把集合中所有以&quot;张&quot;开头的元素存储到一个新的集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 把&quot;张&quot;开头的集合中的长度为3的元素存储到一个新的集合</span><br><span class="hljs-comment"> * 遍历上一步得到的集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//集合的批量添加</span><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(List.of(<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张翠山&quot;</span>,<span class="hljs-string">&quot;王二麻子&quot;</span>,<span class="hljs-string">&quot;张良&quot;</span>,<span class="hljs-string">&quot;谢广坤&quot;</span>));<br>        <span class="hljs-comment">//list.add()</span><br><br>        <span class="hljs-comment">//遍历list1把以张开头的元素添加到list2中。</span><br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list1) &#123;<br>            <span class="hljs-keyword">if</span>(s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))&#123;<br>                list2.add(s);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历list2集合，把其中长度为3的元素，再添加到list3中。</span><br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list2) &#123;<br>            <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">3</span>)&#123;<br>                list3.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String s : list3) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br>       <span class="hljs-comment">//Stream流</span><br>        list1.stream().filter(s-&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))<br>                .filter(s-&gt;s.length() == <span class="hljs-number">3</span>)<br>                .forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的中间方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4(list);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; distinct()：去除流中重复的元素。依赖(hashCode和equals方法)</span><br>        list.stream().distinct().forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)：合并a和b两个流为一个流</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><br><span class="hljs-comment">//        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="hljs-comment">//        Stream&lt;String&gt; stream2 = list2.stream();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Stream&lt;String&gt; stream3 = Stream.concat(stream1, stream2);</span><br><span class="hljs-comment">//        stream3.forEach(s-&gt; System.out.println(s));</span><br><br>        Stream.concat(list.stream(),list2.stream()).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; skip(long n)：跳过指定参数个数的数据</span><br>        list.stream().skip(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; limit(long maxSize)：截取指定参数个数的数据</span><br>        list.stream().limit(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的终结方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//method1(list);</span><br><br><br><span class="hljs-comment">//        long count()：返回此流中的元素数</span><br>        <span class="hljs-keyword">long</span> count = list.stream().count();<br>        System.out.println(count);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void forEach(Consumer action)：对此流的每个元素执行操作</span><br><span class="hljs-comment">//                      Consumer接口中的方法    void accept(T t)：对给定的参数执行此操作</span><br>        <span class="hljs-comment">//在forEach方法的底层,会循环获取到流中的每一个数据.</span><br>        <span class="hljs-comment">//并循环调用accept方法,并把每一个数据传递给accept方法</span><br>        <span class="hljs-comment">//s就依次表示了流中的每一个数据.</span><br>        <span class="hljs-comment">//所以,我们只要在accept方法中,写上处理的业务逻辑就可以了.</span><br>        list.stream().forEach(<br>                <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                        System.out.println(s);<br>                    &#125;<br>                &#125;<br>        );<br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//lambda表达式的简化格式</span><br>        <span class="hljs-comment">//是因为Consumer接口中,只有一个accept方法</span><br>        list.stream().forEach(<br>                (String s)-&gt;&#123;<br>                    System.out.println(s);<br>                &#125;<br>        );<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//lambda表达式还是可以进一步简化的.</span><br>        list.stream().forEach(s-&gt;System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="转换-收集"><a href="#转换-收集" class="headerlink" title="转换(收集):"></a>转换(收集):</h3><table><thead><tr><th align="center">转换目标</th><th align="center">操作方式</th></tr></thead><tbody><tr><td align="center">Stream流转换为List集合</td><td align="center">List list=Stream流.collect(Collectors.toList())</td></tr><tr><td align="center">Stream流转换为Set集合</td><td align="center">Set set=Stream流.collect(Collectors.toSet())</td></tr><tr><td align="center">Stream流转换为Map集合</td><td align="center">Map map=Stream流.collect(Collectors.toMap( Function keyMapper,Function valueMapper))</td></tr></tbody></table><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> * 练习:</span><br><span class="hljs-comment"> * 定义一个集合，并添加一些整数1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment"> * 将集合中的奇数删除，只保留偶数。</span><br><span class="hljs-comment"> * 遍历集合得到2，4，6，8，10。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                (Integer i)-&gt;&#123;</span><br><span class="hljs-comment">//                    return i % 2 == 0;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        )</span><br>        list.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).forEach(number -&gt; System.out.println(number));<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Integer integer : list) &#123;<br>            System.out.println(integer);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> * 练习:</span><br><span class="hljs-comment"> * 定义一个集合，并添加一些整数1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment"> * 将集合中的奇数删除，只保留偶数。</span><br><span class="hljs-comment"> * 遍历集合得到2，4，6，8，10。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            list1.add(i);<br>        &#125;<br><br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">//filter负责过滤数据的.</span><br>        <span class="hljs-comment">//collect负责收集数据.</span><br>                <span class="hljs-comment">//获取流中剩余的数据,但是他不负责创建容器,也不负责把数据添加到容器中.</span><br>        <span class="hljs-comment">//Collectors.toList() : 在底层会创建一个List集合.并把所有的数据添加到List集合中.</span><br>        List&lt;Integer&gt; list = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                .collect(Collectors.toList());<br><br>        System.out.println(list);<br><br><br>        Set&lt;Integer&gt; set = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                .collect(Collectors.toSet());<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 创建一个ArrayList集合，并添加以下字符串。字符串中前面是姓名，后面是年龄</span><br><span class="hljs-comment"> * &quot;zhangsan,23&quot;</span><br><span class="hljs-comment"> * &quot;lisi,24&quot;</span><br><span class="hljs-comment"> * &quot;wangwu,25&quot;</span><br><span class="hljs-comment"> * 保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;zhangsan,23&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;lisi,24&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;wangwu,25&quot;</span>);<br><br>        Map&lt;String, Integer&gt; map = list.stream().filter(<br>                s -&gt; &#123;<br>                    String[] split = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                    <span class="hljs-keyword">int</span> age = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">return</span> age &gt;= <span class="hljs-number">24</span>;<br>                &#125;<br><br>         <span class="hljs-comment">//   collect方法只能获取到流中剩余的每一个数据.</span><br>         <span class="hljs-comment">//在底层不能创建容器,也不能把数据添加到容器当中</span><br><br>         <span class="hljs-comment">//Collectors.toMap 创建一个map集合并将数据添加到集合当中</span><br><br>          <span class="hljs-comment">// s 依次表示流中的每一个数据</span><br><br>          <span class="hljs-comment">//第一个lambda表达式就是如何获取到Map中的键</span><br>          <span class="hljs-comment">//第二个lambda表达式就是如何获取Map中的值</span><br>        ).collect(Collectors.toMap(<br>                s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>],<br>                s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]) ));<br><br>        System.out.println(map);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="JavaBean-标准类"><a href="#JavaBean-标准类" class="headerlink" title="JavaBean(标准类)"></a>JavaBean(标准类)</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Actor&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试类MyStream9"><a href="#测试类MyStream9" class="headerlink" title="测试类MyStream9"></a>测试类MyStream9</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</span><br><span class="hljs-comment"> * 1.男演员只要名字为3个字的前两人</span><br><span class="hljs-comment"> * 2.女演员只要姓杨的，并且不要第一个</span><br><span class="hljs-comment"> * 3.把过滤后的男演员姓名和女演员姓名合并到一起</span><br><span class="hljs-comment"> * 4.把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</span><br><span class="hljs-comment"> * 演员类Actor，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt;  manList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        manList.add(<span class="hljs-string">&quot;张国立&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;张晋&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;刘烨&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;郑伊健&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;徐峥&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;王宝强&quot;</span>);<br><br>        ArrayList&lt;String&gt;  womanList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        womanList.add(<span class="hljs-string">&quot;郑爽&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;杨紫&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;关晓彤&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;张天爱&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;杨幂&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;赵丽颖&quot;</span>);<br><br>        <span class="hljs-comment">//男演员只要名字为3个字的前两人</span><br>        Stream&lt;String&gt; stream1 = manList.stream().filter(name -&gt; name.length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//女演员只要姓杨的，并且不要第一个</span><br>        Stream&lt;String&gt; stream2 = womanList.stream().filter(name -&gt; name.startsWith(<span class="hljs-string">&quot;杨&quot;</span>)).skip(<span class="hljs-number">1</span>);<br><br><br>        Stream.concat(stream1,stream2).forEach(name -&gt; &#123;<br>            Actor actor = <span class="hljs-keyword">new</span> Actor(name);<br>            System.out.println(actor);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><div class="hljs code-wrapper"><pre><code>    在Java中用来表示&quot;文件或文件夹&quot;的类    File封装的文件或文件夹,也可以是不存在的路径</code></pre></div><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">File( String pathname )</td><td align="center">通过将给定的路径名字字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td align="center">File( String parent,String child)</td><td align="center">从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td align="center">File( File parent,String child )</td><td align="center">从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(File parent, String child)      从父抽象路径名和子路径名字符串创建新的File实例</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        String path = <span class="hljs-string">&quot;a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(file1,path);<br>        System.out.println(file);<span class="hljs-comment">//C:\itheima\a.txt</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(String parent, String child)    从父路径名字符串和子路径名字符串创建新的File实例</span><br>        String path1 = <span class="hljs-string">&quot;C:\\itheima&quot;</span>;<br>        String path2 = <span class="hljs-string">&quot;a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path1,path2);<span class="hljs-comment">//把两个路径拼接.</span><br>        System.out.println(file);<span class="hljs-comment">//C:\itheima\a.txt</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(String pathname)        通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</span><br>        String path = <span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-comment">//问题:为什么要把字符串表示形式的路径变成File对象?</span><br>        <span class="hljs-comment">//就是为了使用File类里面的方法.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//这个路径固定不变了.</span><br>       File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\itheima\\a.txt&quot;</span>);<br>       <span class="hljs-comment">//当前项目下的a.txt</span><br>       File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>       <span class="hljs-comment">//当前项目下 --- 指定模块下的 a.txt</span><br>       File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule\\a.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean createNewFile();</td><td align="center">创建空文件</td></tr><tr><td align="center">public boolean mkdir();</td><td align="center">创建单级文件夹</td></tr><tr><td align="center">public boolean mkdirs();</td><td align="center">创建多级文件夹</td></tr></tbody></table><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//public boolean createNewFile()    创建一个新的空的文件</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.如果文件存在,那么创建失败,返回false</span><br>                    <span class="hljs-comment">//2.如果文件不存在,那么创建成功,返回true</span><br>                    <span class="hljs-comment">//3.createNewFile方法不管调用者有没有后缀名,只能创建文件.</span><br><br>        <span class="hljs-comment">//public boolean mkdir()            创建一个单级文件夹</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.只能创建单级文件夹,不能创建多级文件夹</span><br>                    <span class="hljs-comment">//2.不管调用者有没有后缀名,只能创建单级文件夹</span><br><br>        <span class="hljs-comment">//public boolean mkdirs()           创建一个多级文件夹</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1,可以创建单级文件夹,也可以创建多级文件夹</span><br>                    <span class="hljs-comment">//2.不管调用者有没有后缀名,只能创建文件夹</span><br><br>        <span class="hljs-comment">//疑问:</span><br>            <span class="hljs-comment">//既然mkdirs能创建单级,也能创建多级.那么mkdir还有什么用啊? 是的</span><br><br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">//method2();</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.mkdirs();<br>        System.out.println(result);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.mkdir();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file1.createNewFile();<br>        System.out.println(result1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//练习一：在当前模块下的aaa文件夹中创建一个a.txt文件</span><br>       <span class="hljs-comment">/* File file = new File(&quot;filemodule\\aaa\\a.txt&quot;);</span><br><span class="hljs-comment">        file.createNewFile();*/</span><br>        <span class="hljs-comment">//注意点:文件所在的文件夹必须要存在.</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule\\aaa&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>            <span class="hljs-comment">//如果文件夹不存在,就创建出来</span><br>            file.mkdirs();<br>        &#125;<br>        File newFile = <span class="hljs-keyword">new</span> File(file,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        newFile.createNewFile();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean delete();</td><td align="center">删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><h5 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo4</span> </span>&#123;<br>    <span class="hljs-comment">//注意点:</span><br>        <span class="hljs-comment">//1.不走回收站的.</span><br>        <span class="hljs-comment">//2.如果删除的是文件,那么直接删除.如果删除的是文件夹,那么能删除空文件夹</span><br>        <span class="hljs-comment">//3.如果要删除一个有内容的文件夹,只能先进入到这个文件夹,把里面的内容全部删除完毕,才能再次删除这个文件夹</span><br>    <span class="hljs-comment">//简单来说:</span><br>        <span class="hljs-comment">//只能删除文件和空文件夹.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.delete();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.delete();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//练习二：删除一个多级文件夹</span><br>        <span class="hljs-comment">//delete方法</span><br>        <span class="hljs-comment">//只能删除文件和空文件夹.</span><br>        <span class="hljs-comment">//如果现在要删除一个有内容的文件夹?</span><br>        <span class="hljs-comment">//先删掉这个文件夹里面所有的内容.</span><br>        <span class="hljs-comment">//最后再删除这个文件夹</span><br><br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\src&quot;</span>);<br>        deleteDir(src);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteDir</span><span class="hljs-params">(File src)</span> </span>&#123;<br>        <span class="hljs-comment">//先删掉这个文件夹里面所有的内容.</span><br>        <span class="hljs-comment">//递归 方法在方法体中自己调用自己.</span><br>        <span class="hljs-comment">//注意: 可以解决所有文件夹和递归相结合的题目</span><br>        <span class="hljs-comment">//1.进入 --- 得到src文件夹里面所有内容的File对象.</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//2.遍历 --- 因为我想得到src文件夹里面每一个文件和文件夹的File对象.</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                <span class="hljs-comment">//3.判断 --- 如果遍历到的File对象是一个文件,那么直接删除</span><br>                file.delete();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//4.判断</span><br>                <span class="hljs-comment">//递归</span><br>                deleteDir(file);<span class="hljs-comment">//参数一定要是src文件夹里面的文件夹File对象</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//最后再删除这个文件夹</span><br>        src.delete();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getAbsolutePath()</td><td align="center">获取绝对路径</td></tr><tr><td align="center">public String getParent()</td><td align="center">获取父级路径</td></tr><tr><td align="center">public String getName()</td><td align="center">获取文件或文件夹的名字</td></tr></tbody></table><h4 id="高级获取"><a href="#高级获取" class="headerlink" title="高级获取"></a>高级获取</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public File[] listFiles()</td><td align="center">获取一个文件夹中的所有文件和文件夹</td></tr><tr><td align="center">public static File[] listRoots()</td><td align="center">获取硬盘上的所有盘符</td></tr></tbody></table><h4 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean isDirectory();</td><td align="center">判断此抽象路径名表示的file是否是目录</td></tr><tr><td align="center">public boolean isFile();</td><td align="center">判断此抽象路径名表示的file是否是文件</td></tr><tr><td align="center">public boolean exists();</td><td align="center">判断此抽象路径名表示的file是否存在</td></tr></tbody></table><h5 id="test1-5"><a href="#test1-5" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo5</span> </span>&#123;<br>    <span class="hljs-comment">//public boolean isDirectory()  测试此抽象路径名表示的File是否为目录</span><br>    <span class="hljs-comment">//public boolean isFile()       测试此抽象路径名表示的File是否为文件</span><br>    <span class="hljs-comment">//public boolean exists()       测试此抽象路径名表示的File是否存在</span><br>    <span class="hljs-comment">//public String getName()       返回由此抽象路径名表示的文件或目录的名称</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.如果调用者是文件,那么获取的是文件名和后缀名</span><br>                    <span class="hljs-comment">//2.如果调用者是一个文件夹,那么获取的是文件夹的名字</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//method3();</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        String name = file.getName();<br>        System.out.println(name);<br><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        String name2 = file1.getName();<br>        System.out.println(name2);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.exists();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file.isFile();<br>        <span class="hljs-keyword">boolean</span> result2 = file.isDirectory();<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file.isFile();<br>        <span class="hljs-keyword">boolean</span> result2 = file.isDirectory();<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-5"><a href="#test2-5" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo6</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>       File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\aaa&quot;</span>);<br>        File[] files = file.listFiles();<span class="hljs-comment">//返回值是一个File类型的数组</span><br>        System.out.println(files.length);<br>        <span class="hljs-keyword">for</span> (File path : files) &#123;<br>            System.out.println(path);<br>        &#125;<br><br>        <span class="hljs-comment">//进入文件夹,获取这个文件夹里面所有的文件和文件夹的File对象,并把这些File对象都放在一个数组中返回.</span><br>        <span class="hljs-comment">//包括隐藏文件和隐藏文件夹都可以获取.</span><br><br>        <span class="hljs-comment">//注意事项:</span><br>            <span class="hljs-comment">//1.当调用者是一个文件时</span><br>            <span class="hljs-comment">//2,当调用者是一个空文件夹时</span><br>            <span class="hljs-comment">//3.当调用者是一个有内容的文件夹时</span><br>            <span class="hljs-comment">//4.当调用者是一个有权限才能进入的文件夹时</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//统计一个文件夹中,每种文件出现的次数.</span><br>        <span class="hljs-comment">//统计 --- 定义一个变量用来统计. ---- 弊端:同时只能统计一种文件</span><br>        <span class="hljs-comment">//利用map集合进行数据统计,键 --- 文件后缀名  值 ----  次数</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule&quot;</span>);<br>        HashMap&lt;String, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        getCount(hm, file);<br>        System.out.println(hm);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCount</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; hm, File file)</span> </span>&#123;<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (File f : files) &#123;<br>            <span class="hljs-keyword">if</span>(f.isFile())&#123;<br>                String fileName = f.getName();<br>                String[] fileNameArr = fileName.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>                <span class="hljs-keyword">if</span>(fileNameArr.length == <span class="hljs-number">2</span>)&#123;<br>                    String fileEndName = fileNameArr[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(hm.containsKey(fileEndName))&#123;<br>                        <span class="hljs-comment">//已经存在</span><br>                        <span class="hljs-comment">//将已经出现的次数获取出来</span><br>                        Integer count = hm.get(fileEndName);<br>                        <span class="hljs-comment">//这种文件又出现了一次.</span><br>                        count++;<br>                        <span class="hljs-comment">//把已经出现的次数给覆盖掉.</span><br>                        hm.put(fileEndName,count);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//不存在</span><br>                        <span class="hljs-comment">//表示当前文件是第一次出现</span><br>                        hm.put(fileEndName,<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                getCount(hm,f);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径:"></a>绝对路径:</h3><p>​        是绝对不会发生变化的路径.<br>​        一般是从盘符开始.</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径:"></a>相对路径:</h3><p>​        是根据某个固定参照物,对比出来的路径.<br>​        在Java程序中,默认参照物是”当前项目”</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        当前所说的路径, 指的是Java项目的路径<br>​        Web项目中的相对和绝对路径会有少许差别</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stream</tag>
      
      <tag>File</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day09 Map集合</title>
    <link href="/blog-public/2021/04/02/SAd09/"/>
    <url>/blog-public/2021/04/02/SAd09/</url>
    
    <content type="html"><![CDATA[<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        HashSet是Set集合的子类<br>​        HashSet也是”无序,无索引,元素不可以重复”</p><h3 id="原理-元素不重复原理"><a href="#原理-元素不重复原理" class="headerlink" title="原理(元素不重复原理)"></a>原理(元素不重复原理)</h3><p>​        HashSet会自动对比元素的equals方法和hashCode方法<br>​        如果一样就不存储<br>​        HashSet的底层是Hash表</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>​        HashSet中存储的元素,必须重写hashCode和equals方法</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>​            是HashSet的子类<br>​            Set体系里边唯一有序的set集合</p><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><h5 id="单列集合的工具类"><a href="#单列集合的工具类" class="headerlink" title="单列集合的工具类"></a>单列集合的工具类</h5><h5 id="里边包含了很多操作集合的方法"><a href="#里边包含了很多操作集合的方法" class="headerlink" title="里边包含了很多操作集合的方法"></a>里边包含了很多操作集合的方法</h5><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static void sort(List<T> list)</td><td align="center">对list集合进行排序,顺序是自然顺序</td></tr><tr><td align="center">public static void sort(List<T> list,Comper<T> c)</td><td align="center">按照指定排序规则,对list集合进行排序</td></tr><tr><td align="center">public static void reverse(List&lt;?&gt; list)</td><td align="center">让list集合中的元素反转</td></tr><tr><td align="center">public static void shuffle(List&lt;?&gt; list)</td><td align="center">随机打乱list集合中元素的顺序</td></tr></tbody></table><p>​    </p><h2 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h2><h3 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h3><p>​        数组 + 链表</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​            默认创建一个长度为16, 加载因子0.75的数组<br>​                当数组中存储的元素超过16*0.75时<br>​                数组的长度扩容为原来的2倍<br>​            数组中的每个位置都维护一个链表</p><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="https://cdn.jsdelivr.net/gh/Zfqwb/pic//img/image-20210412194254422.png" alt="image-20210412194254422">            </p><h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><p>​        数组 + 链表 + 红黑树</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>​            默认创建一个长度为16, 加载因子0.75的数组<br>​                当数组中存储的元素超过16*0.75时<br>​                数组的长度扩容为原来的2倍<br>​            数组中的每个位置都维护一个链表<br>​            链表的长度超过8时, 该链表会自动转换为红黑树</p><h4 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h4><p><img src="https://cdn.jsdelivr.net/gh/Zfqwb/pic//img/image-20210412194327875.png" alt="image-20210412194327875"></p><h2 id="Map集合-1"><a href="#Map集合-1" class="headerlink" title="Map集合"></a>Map集合</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        是一个双列集合.也叫”键值对”集合.</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>​        1.”键”和”值”必须成对出现.<br>​        2.”键”不允许重复,”值”可以重复.<br>​        3.”键”和”值”结合在一块,称之为一个”键值对”, 是集合的一个元素.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">V put( K key,V val)</td><td align="center">添加元素,如果键不存在则添加,如果键存在则覆盖</td></tr><tr><td align="center">V remove(K key)</td><td align="center">根据键,删除键值对元素</td></tr><tr><td align="center">void clear()</td><td align="center">清空集合</td></tr><tr><td align="center">boolean containsKey(K key)</td><td align="center">判断集合中是否包含指定的键</td></tr><tr><td align="center">boolean containsValue(V val)</td><td align="center">判断集合中是否包含指定的值</td></tr><tr><td align="center">boolean isEmpty()</td><td align="center">判断集合是否为空</td></tr><tr><td align="center">int size()</td><td align="center">获取集合的长度</td></tr><tr><td align="center">V get(Object key)</td><td align="center">根据键获取值</td></tr><tr><td align="center">Set<K>keySet()</td><td align="center">获取所有键的集合</td></tr><tr><td align="center">Collection<V>values()</td><td align="center">获取所有值的集合</td></tr><tr><td align="center">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td align="center">获取所有键值对对象的集合</td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br>  <span class="hljs-keyword">import</span> java.util.Map;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * Map的基本使用</span><br><span class="hljs-comment">     */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap1</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>         Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>      <span class="hljs-comment">//map.add();</span><br>      map.put(<span class="hljs-string">&quot;itheima001&quot;</span>,<span class="hljs-string">&quot;小智&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;itheima002&quot;</span>,<span class="hljs-string">&quot;小美&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;大胖&quot;</span>);<br><br>      System.out.println(map);<br><br>  &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的基本方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;itheima001&quot;</span>,<span class="hljs-string">&quot;小智&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima002&quot;</span>,<span class="hljs-string">&quot;小美&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;大胖&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima004&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima005&quot;</span>,<span class="hljs-string">&quot;大师&quot;</span>);<br><br>        <span class="hljs-comment">//method1(map);</span><br>        <span class="hljs-comment">//method2(map);</span><br>        <span class="hljs-comment">//method3(map);</span><br>        <span class="hljs-comment">//method4(map);</span><br>        <span class="hljs-comment">//method5(map);</span><br>        <span class="hljs-comment">//method6(map);</span><br>        <span class="hljs-comment">//method7(map);</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method7</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        int size()              集合的长度，也就是集合中键值对的个数</span><br>        <span class="hljs-keyword">int</span> size = map.size();<br>        System.out.println(size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method6</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean isEmpty()       判断集合是否为空</span><br>        <span class="hljs-keyword">boolean</span> empty1 = map.isEmpty();<br>        System.out.println(empty1);<span class="hljs-comment">//false</span><br><br>        map.clear();<br>        <span class="hljs-keyword">boolean</span> empty2 = map.isEmpty();<br>        System.out.println(empty2);<span class="hljs-comment">//true</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean containsValue(Object value) 判断集合是否包含指定的值</span><br>        <span class="hljs-keyword">boolean</span> result1 = map.containsValue(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = map.containsValue(<span class="hljs-string">&quot;小智&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean containsKey(Object key) 判断集合是否包含指定的键</span><br>        <span class="hljs-keyword">boolean</span> result1 = map.containsKey(<span class="hljs-string">&quot;itheima001&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = map.containsKey(<span class="hljs-string">&quot;itheima006&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        void clear()            移除所有的键值对元素</span><br>        map.clear();<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        V remove(Object key)    根据键删除键值对元素</span><br>        String s = map.remove(<span class="hljs-string">&quot;itheima001&quot;</span>);<br>        System.out.println(s);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        V put(K key,V value)    添加元素</span><br>        <span class="hljs-comment">//如果要添加的键不存在，那么会把键值对都添加到集合中</span><br>        <span class="hljs-comment">//如果要添加的键是存在的，那么会覆盖原先的值，把原先值当做返回值进行返回。</span><br>        String s = map.put(<span class="hljs-string">&quot;itheima001&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        System.out.println(s);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历:"></a>遍历:</h3><h4 id="根据键-获取值"><a href="#根据键-获取值" class="headerlink" title="根据键,获取值"></a>根据键,获取值</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h5><ul><li><p>获取所有键的集合。用keySet()方法实现</p></li><li><p>遍历键的集合，获取到每一个键。</p></li><li><p>根据键去找值。用get(Object key)方法实现</p></li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>       Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>       <span class="hljs-comment">//添加元素</span><br>       map.put(<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>       map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>       map.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>       <span class="hljs-comment">//读取所有键的集合.用keySet()方法实现</span><br>       Set&lt;String&gt; keySet = map.keySet();<br>       <span class="hljs-comment">//遍历键的集合,获取到每一个键.用增强for实现</span><br>       <span class="hljs-keyword">for</span> (String s : keySet) &#123;<br>           <span class="hljs-comment">//根据键去找值.用get(Object key)方法实现</span><br>           String value = map.get(s);<br>           System.out.println(s+<span class="hljs-string">&quot;,&quot;</span>+value);<br>       &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的第一种遍历方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建集合并添加元素</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;1号丈夫&quot;</span>,<span class="hljs-string">&quot;1号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;2号丈夫&quot;</span>,<span class="hljs-string">&quot;2号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;3号丈夫&quot;</span>,<span class="hljs-string">&quot;3号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;4号丈夫&quot;</span>,<span class="hljs-string">&quot;4号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;5号丈夫&quot;</span>,<span class="hljs-string">&quot;5号妻子&quot;</span>);<br><br>        <span class="hljs-comment">//获取到所有的键</span><br>        Set&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-comment">//遍历Set集合得到每一个键</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">//通过每一个键key，来获取到对应的值</span><br>            String value = map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="根据键值对-获取键和值"><a href="#根据键值对-获取键和值" class="headerlink" title="根据键值对,获取键和值"></a>根据键值对,获取键和值</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h5><p>1- 获取所有键值对对象的集合<br> entrySet()<br>2- 遍历键值对对象的集合<br>3- 获取键和值</p><ul><li><p>用getKey()得到键</p></li><li><p>用getValue()得到值</p></li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>      Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>      <span class="hljs-comment">//添加元素</span><br>      map.put(<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>      <span class="hljs-comment">//获取所有键值对对象的集合</span><br>      Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br>      <span class="hljs-comment">//遍历键值对对象的集合,得到每一个键值对对象</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;<br>          <span class="hljs-comment">//根据键值对对象获取键和值</span><br>          String key = me.getKey();<br>          String value = me.getValue();<br>          System.out.println(key+<span class="hljs-string">&quot;,&quot;</span>+value);<br>      &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的第二种遍历方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建集合并添加元素</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;1号丈夫&quot;</span>,<span class="hljs-string">&quot;1号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;2号丈夫&quot;</span>,<span class="hljs-string">&quot;2号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;3号丈夫&quot;</span>,<span class="hljs-string">&quot;3号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;4号丈夫&quot;</span>,<span class="hljs-string">&quot;4号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;5号丈夫&quot;</span>,<span class="hljs-string">&quot;5号妻子&quot;</span>);<br><br>        <span class="hljs-comment">//首先要获取到所有的键值对对象。</span><br>        <span class="hljs-comment">//Set集合中装的是键值对对象（Entry对象）</span><br>        <span class="hljs-comment">//而Entry里面装的是键和值</span><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>            <span class="hljs-comment">//得到每一个键值对对象</span><br>            String key = entry.getKey();<br>            String value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Map集合子类"><a href="#Map集合子类" class="headerlink" title="Map集合子类"></a>Map集合子类</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h3><h4 id="HashMap的键-本质上就是HashSet"><a href="#HashMap的键-本质上就是HashSet" class="headerlink" title="HashMap的键,本质上就是HashSet."></a>HashMap的键,本质上就是HashSet.</h4><h4 id="HashMap的键要求不允许重复-也要重写hashCode和equals方法"><a href="#HashMap的键要求不允许重复-也要重写hashCode和equals方法" class="headerlink" title="HashMap的键要求不允许重复,也要重写hashCode和equals方法."></a>HashMap的键要求不允许重复,也要重写hashCode和equals方法.</h4><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap:"></a>TreeMap:</h3><h4 id="TreeMap的键-本质上就是TreeSet"><a href="#TreeMap的键-本质上就是TreeSet" class="headerlink" title="TreeMap的键,本质上就是TreeSet."></a>TreeMap的键,本质上就是TreeSet.</h4><h4 id="TreeMap的键-不允许重复-需要让键实现Comparable接口-或者提供一个Comparator比较器对象"><a href="#TreeMap的键-不允许重复-需要让键实现Comparable接口-或者提供一个Comparator比较器对象" class="headerlink" title="TreeMap的键,不允许重复,需要让键实现Comparable接口,或者提供一个Comparator比较器对象."></a>TreeMap的键,不允许重复,需要让键实现Comparable接口,或者提供一个Comparator比较器对象.</h4><h3 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h3><h4 id="test1排序"><a href="#test1排序" class="headerlink" title="test1排序"></a>test1排序</h4><h5 id="测试类Test1"><a href="#测试类Test1" class="headerlink" title="测试类Test1"></a>测试类Test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：创建一个TreeMap集合，键是学生对象(Student)，值是籍贯(String)。</span><br><span class="hljs-comment"> *           学生属性姓名和年龄，按照年龄进行排序并遍历。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeMap&lt;Student,String&gt; tm = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> result = o1.getAge() - o2.getAge();<br>                result = result== <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : result;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dapang&quot;</span>,<span class="hljs-number">22</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        tm.put(s1,<span class="hljs-string">&quot;江苏&quot;</span>);<br>        tm.put(s2,<span class="hljs-string">&quot;北京&quot;</span>);<br>        tm.put(s3,<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        tm.forEach(<br>                (Student key, String value)-&gt;&#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>/* <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;*/</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>   <span class="hljs-comment">/* @Override</span><br><span class="hljs-comment">    public int compareTo(Student o) &#123;</span><br><span class="hljs-comment">        //按照年龄进行排序</span><br><span class="hljs-comment">        int result = o.getAge() - this.getAge();</span><br><span class="hljs-comment">        //次要条件，按照姓名排序。</span><br><span class="hljs-comment">        result = result == 0 ? o.getName().compareTo(this.getName()) : result;</span><br><span class="hljs-comment">        return result;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2遍历"><a href="#test2遍历" class="headerlink" title="test2遍历"></a>test2遍历</h4><h5 id="测试类-MyMap5"><a href="#测试类-MyMap5" class="headerlink" title="测试类 MyMap5"></a>测试类 MyMap5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的练习</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashMap&lt;Student,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dapang&quot;</span>,<span class="hljs-number">22</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        hm.put(s1,<span class="hljs-string">&quot;江苏&quot;</span>);<br>        hm.put(s2,<span class="hljs-string">&quot;北京&quot;</span>);<br>        hm.put(s3,<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        <span class="hljs-comment">//第一种：先获取到所有的键，再通过每一个键来找对应的值</span><br>        Set&lt;Student&gt; keys = hm.keySet();<br>        <span class="hljs-keyword">for</span> (Student key : keys) &#123;<br>            String value = hm.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br><br>        <span class="hljs-comment">//第二种：先获取到所有的键值对对象。再获取到里面的每一个键和每一个值</span><br>        Set&lt;Map.Entry&lt;Student, String&gt;&gt; entries = hm.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : entries) &#123;<br>            Student key = entry.getKey();<br>            String value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br>        <span class="hljs-comment">//第三种：</span><br>        hm.forEach(<br>                (Student key, String value)-&gt;&#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>                &#125;<br>        );<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student-1"><a href="#Student-1" class="headerlink" title="Student"></a>Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>​        用于方法的形参上,当参数类型确定,参数个数不确定的时候使用.</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><p>​        修饰符 返回值类型 方法名(数据类型… 变量名) {  }</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><h4 id="1-可变参数本质上是一个数组"><a href="#1-可变参数本质上是一个数组" class="headerlink" title="1.可变参数本质上是一个数组."></a>1.可变参数本质上是一个数组.</h4><h4 id="2-一个方法中最多只有一个可变参数"><a href="#2-一个方法中最多只有一个可变参数" class="headerlink" title="2.一个方法中最多只有一个可变参数"></a>2.一个方法中最多只有一个可变参数</h4><h4 id="3-可变参数必须放在方法参数的最后"><a href="#3-可变参数必须放在方法参数的最后" class="headerlink" title="3.可变参数必须放在方法参数的最后"></a>3.可变参数必须放在方法参数的最后</h4><h3 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求两个数的和</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 需求：定义一个方法求三个数的和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">int</span> sum1 = getSum(a, b);<br>        System.out.println(sum1);<br><br>        <span class="hljs-keyword">int</span> sum2 = getSum(a, b, c);<br>        System.out.println(sum2);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b + c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求N个数的和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//在JDK5之前，会把所有的数据都先放到一个数组中</span><br>        <span class="hljs-comment">//我们自己定义的方法，形参只要写一个数组就可以了。</span><br><br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">int</span> sum1 = getSum(arr);<br>        System.out.println(sum1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sum = sum + arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3可变参数实现"><a href="#test3可变参数实现" class="headerlink" title="test3可变参数实现"></a>test3可变参数实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求N个数的和</span><br><span class="hljs-comment"> * 可变参数实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        int [] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="hljs-comment">//        System.out.println(arr);</span><br>        <span class="hljs-keyword">int</span> sum1 = getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>        System.out.println(sum1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number,<span class="hljs-keyword">int</span>... arr)</span> </span>&#123;<br>        <span class="hljs-comment">//System.out.println(arr);</span><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sum = sum + arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// static &lt;E&gt;  List&lt;E&gt;  of(E…elements)  创建一个具有指定元素的List集合对象</span><br>        <span class="hljs-comment">//static &lt;E&gt;  Set&lt;E&gt;  of(E…elements)    创建一个具有指定元素的Set集合对象</span><br>        <span class="hljs-comment">//static &lt;K , V&gt;   Map&lt;K，V&gt;  of(E…elements)</span><br>        <span class="hljs-comment">//                                      创建一个具有指定元素的Map集合对象</span><br><br><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//method3();</span><br><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = Map.ofEntries(<br>                Map.entry(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;江苏&quot;</span>),<br>                Map.entry(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>));<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = Map.of(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;江苏&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;天津&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//传递的参数当中，不能存在重复的元素。</span><br>        Set&lt;String&gt; set = Set.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//list.add(&quot;Q&quot;);</span><br>        <span class="hljs-comment">//list.remove(&quot;a&quot;);</span><br>        <span class="hljs-comment">//list.set(0,&quot;A&quot;);</span><br>        <span class="hljs-comment">//System.out.println(list);</span><br><br><span class="hljs-comment">//        ArrayList&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><br>        <span class="hljs-comment">//集合的批量添加。</span><br>        <span class="hljs-comment">//首先是通过调用List.of方法来创建一个不可变的集合，of方法的形参就是一个可变参数。</span><br>        <span class="hljs-comment">//再创建一个ArrayList集合，并把这个不可变的集合中所有的数据，都添加到ArrayList中。</span><br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(List.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>));<br>        System.out.println(list3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数组转换为集合"><a href="#数组转换为集合" class="headerlink" title="数组转换为集合"></a>数组转换为集合</h2><h3 id="JDK9之前"><a href="#JDK9之前" class="headerlink" title="JDK9之前:"></a>JDK9之前:</h3><p>​        List<T> list = Arrays.asList(T… t);<br>​            //把数组转换为集合.该集合不允许添加和删除,但可以修改</p><h3 id="JDK9之后"><a href="#JDK9之后" class="headerlink" title="JDK9之后:"></a>JDK9之后:</h3><h4 id="List-list-List-of-T…-t"><a href="#List-list-List-of-T…-t" class="headerlink" title="List list = List.of(T… t);"></a>List<T> list = List.of(T… t);</h4><p>​             //把数组转换为集合.该集合不允许添加,删除和修改</p><h4 id="Set-set-Set-of-T…-t"><a href="#Set-set-Set-of-T…-t" class="headerlink" title="Set set = Set.of(T… t);"></a>Set<T> set = Set.of(T… t);</h4><p>​             //把数组转换为集合.该集合不允许添加,删除和修改</p><h4 id="Map-lt-K-V-gt-map-Map-ofEntries-Map-Entry-lt-K-V-gt-…-entries"><a href="#Map-lt-K-V-gt-map-Map-ofEntries-Map-Entry-lt-K-V-gt-…-entries" class="headerlink" title="Map&lt;K,V&gt; map = Map.ofEntries(Map.Entry&lt;K,V&gt;… entries);"></a>Map&lt;K,V&gt; map = Map.ofEntries(Map.Entry&lt;K,V&gt;… entries);</h4><p>​            //把数组转换为集合.该集合不允许添加,删除和修改</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        数组转换的集合,长度都不允许发生变化.<br>​        如果想让集合再次发生变化,可以利用集合的构造方法,重新创建新的集合.<br>​        ArrayList<Integer> arrayList = new ArrayList&lt;&gt;(数组转换后的集合);</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day08 Set集合</title>
    <link href="/blog-public/2021/04/02/SAd08/"/>
    <url>/blog-public/2021/04/02/SAd08/</url>
    
    <content type="html"><![CDATA[<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​            可以变化的数据类型.<br>​            可以理解为”一个存储了数据类型的变量”</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>​            泛型可以定义在类上,方法上,接口上.<br>​            创建有泛型的类的对象时,需要给泛型指定数据类型<br>​            当泛型被指定数据类型时, 类中所有该泛型均被替换为对应的数据类型</p><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类:"></a>泛型类:</h4><p>​            public class 类名&lt;泛型&gt;{}</p><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><h6 id="测试类MyGenericityClass"><a href="#测试类MyGenericityClass" class="headerlink" title="测试类MyGenericityClass"></a>测试类MyGenericityClass</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义泛型类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyGenericityClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Box&lt;String&gt; box1 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box1.setElement(<span class="hljs-string">&quot;给小丽的土味情话&quot;</span>);<br><br>        String element1 = box1.getElement();<br>        System.out.println(element1);<br><br><br>        Box&lt;Integer&gt; box2 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box2.setElement(<span class="hljs-number">19</span>);<br><br>        Integer element2 = box2.getElement();<br>        System.out.println(element2);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="自定义泛型类class-Box"><a href="#自定义泛型类class-Box" class="headerlink" title="自定义泛型类class Box"></a>自定义泛型类class Box<E></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//就是一个泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> E element;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getElement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setElement</span><span class="hljs-params">(E element)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.element = element;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><h6 id="泛型类GenericityClass"><a href="#泛型类GenericityClass" class="headerlink" title="泛型类GenericityClass"></a>泛型类GenericityClass</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="不写泛型的弊端-不能同时存字符串和数字"><a href="#不写泛型的弊端-不能同时存字符串和数字" class="headerlink" title="不写泛型的弊端,不能同时存字符串和数字"></a>不写泛型的弊端,不能同时存字符串和数字</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  不写泛型的弊端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericitySummarize</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br><br>        Iterator it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String next = (String) it.next();<br>            <span class="hljs-keyword">int</span> len = next.length();<br>            System.out.println(len);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法:"></a>泛型方法:</h4><p>​            public &lt;泛型&gt; 返回值类型 方法名(参数){}</p><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">使用Java中的泛型方法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityMethod1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ArrayList list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <br>list.add(<span class="hljs-string">&quot;给小花同学的土味情话&quot;</span>); <br>    list.add(<span class="hljs-string">&quot;给小丽同学的土味情话&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;给小路同学的土味情话&quot;</span>); <br> <span class="hljs-comment">//将list集合转成一个数组并返回 </span><br> <span class="hljs-comment">//如果是空参的,那么返回的数组类型为Object类型的. Object[] objects = list.toArray();   System.out.println(Arrays.toString(objects));</span><br>    String[] strings = list.toArray(<span class="hljs-keyword">new</span> String[list.size()]);<br>    System.out.println(Arrays.toString(strings));<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义泛型方法</span><br><span class="hljs-comment"> * 定义一个泛型方法，传递一个集合和四个元素，将元素添加到集合中并返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityMethod2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list1 = addElement(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(), <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(list1);<br><br>        ArrayList&lt;Integer&gt; list2 = addElement(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>        System.out.println(list2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ArrayList&lt;T&gt; <span class="hljs-title">addElement</span><span class="hljs-params">(ArrayList&lt;T&gt; list , T t1 ,T t2 ,T t3 ,T t4)</span></span>&#123;<br>        list.add(t1);<br>        list.add(t2);<br>        list.add(t3);<br>        list.add(t4);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口:"></a>泛型接口:</h4><p>​            public interface 接口名&lt;泛型&gt;{}</p><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        GenericityImpl1&lt;String&gt; genericity = <span class="hljs-keyword">new</span> GenericityImpl1&lt;&gt;();<br>        genericity.method(<span class="hljs-string">&quot;小丽给我的土味情话&quot;</span>);<br><br>        GenericityImpl2 genericityImpl2 = <span class="hljs-keyword">new</span> GenericityImpl2();<br>        genericityImpl2.method(<span class="hljs-number">19</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(E e)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityImpl2</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(Integer integer)</span> </span>&#123;<br>        System.out.println(integer);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityImpl1</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符:"></a>泛型通配符:</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h4><p>​            一般使用”方法的参数上”</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><table><thead><tr><th align="center">格式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&lt;?&gt;</td><td align="center">//可以赋值为任意类型</td></tr><tr><td align="center">&lt;? extends A&gt;</td><td align="center">//可以赋值为A以及A的子类</td></tr><tr><td align="center">&lt;? super A&gt;</td><td align="center">//可以赋值为A以及A的父类.</td></tr></tbody></table><h4 id="test-​"><a href="#test-​" class="headerlink" title="test    ​"></a>test    ​</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类型通配符：&lt;?&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;?&gt;：表示元素类型未知的ArrayList，它的元素可以匹配任何的类型</span><br><span class="hljs-comment"> *      但是并不能把元素添加到ArrayListList中了，获取出来的也是Object类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 类型通配符上限：&lt;? extends 类型&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 类型通配符下限：&lt;? super 类型&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;? super Number&gt;：它表示的类型是Number或者其父类型</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">genericityglobbing1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Set集合-1"><a href="#Set集合-1" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>​        无序(存储和遍历的顺序不一致)<br>​        无索引<br>​        元素不可以重复</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set集合的基本使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySet1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><br><span class="hljs-comment">//        for (int i = 0; i &lt; set.size(); i++) &#123;</span><br><span class="hljs-comment">//            //Set集合是没有索引的，所以不能使用通过索引获取元素的方法</span><br><span class="hljs-comment">//        &#125;</span><br>        Iterator&lt;String&gt; it = set.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : set) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="子类"><a href="#子类" class="headerlink" title="子类:"></a>子类:</h3><h4 id="TreeSet-元素不重复原理"><a href="#TreeSet-元素不重复原理" class="headerlink" title="TreeSet(元素不重复原理):"></a>TreeSet(元素不重复原理):</h4><p>​             TreeSet中的元素会自动排序<br>​            小的在前,大的在后,如果一样就不存</p><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TreeSet集合来存储Integer类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        ts.add(<span class="hljs-number">5</span>);<br>        ts.add(<span class="hljs-number">3</span>);<br>        ts.add(<span class="hljs-number">4</span>);<br>        ts.add(<span class="hljs-number">1</span>);<br>        ts.add(<span class="hljs-number">2</span>);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TreeSet集合来存储Student类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">28</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">27</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">29</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">28</span>);<br>        Student s5 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;qianqi&quot;</span>,<span class="hljs-number">30</span>);<br><br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        ts.add(s5);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student-自然排序-实现接口-重写方法"><a href="#Student-自然排序-实现接口-重写方法" class="headerlink" title="Student(自然排序,实现接口,重写方法)"></a>Student(自然排序,实现接口,重写方法)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//按照对象的年龄进行排序</span><br>        <span class="hljs-comment">//主要判断条件</span><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-keyword">this</span>.age - o.age;<br>        <span class="hljs-comment">//次要判断条件</span><br>        result = result == <span class="hljs-number">0</span> ? <span class="hljs-keyword">this</span>.name.compareTo(o.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;ab&quot;</span>;<br><br>        System.out.println(s1.compareTo(s2));<br>        <span class="hljs-comment">//首先比较第一个字母，如果第一个字母是一样的，那么继续比较后面的字母</span><br>        <span class="hljs-comment">//当不一样的时候，就拿着对应的码表值97，减去 b的码表值 98</span><br>        <span class="hljs-comment">//认为a是比b要小的。</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4-比较器排序-指定排序规则"><a href="#test4-比较器排序-指定排序规则" class="headerlink" title="test4(比较器排序,指定排序规则)"></a>test4(比较器排序,指定排序规则)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Teacher&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Teacher&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Teacher o1, Teacher o2)</span> </span>&#123;<br>                <span class="hljs-comment">//o1表示现在要存入的那个元素</span><br>                <span class="hljs-comment">//o2表示已经存入到集合中的元素</span><br><br>                <span class="hljs-comment">//主要条件</span><br>                <span class="hljs-keyword">int</span> result = o1.getAge() - o2.getAge();<br>                <span class="hljs-comment">//次要条件</span><br>                result = result == <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : result;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><br>        Teacher t1 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        Teacher t2 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">22</span>);<br>        Teacher t3 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">24</span>);<br>        Teacher t4 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ts.add(t1);<br>        ts.add(t2);<br>        ts.add(t3);<br>        ts.add(t4);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Teacher"><a href="#Teacher" class="headerlink" title="Teacher"></a>Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;(new Comparator&lt;String&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public int compare(String o1, String o2) &#123;</span><br><span class="hljs-comment">//                int result = o1.length() - o2.length();</span><br><span class="hljs-comment">//                result = result == 0 ? o1.compareTo(o2) : result;</span><br><span class="hljs-comment">//                return result;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<br>                (String o1, String o2) -&gt; &#123;<br>                    <span class="hljs-keyword">int</span> result = o1.length() - o2.length();<br>                    result = result == <span class="hljs-number">0</span> ? o1.compareTo(o2) : result;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>        );<br><br>        ts.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;ab&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;df&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;qwer&quot;</span>);<br><br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet:"></a>HashSet:</h4><p>​            HashSet会自动对比元素的equals方法和hashCode方法<br>​            如果一样就不存储</p><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><h6 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetTest1"><a href="#测试类HashSetTest1" class="headerlink" title="测试类HashSetTest1"></a>测试类HashSetTest1</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</span><br><span class="hljs-comment"> * 要求：学生对象的成员变量值相同，我们就认为是同一个对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 结论：</span><br><span class="hljs-comment"> *  如果HashSet集合要存储自定义对象，那么必须重写hashCode和equals方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashSet&lt;Student&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        hs.add(s1);<br>        hs.add(s2);<br>        hs.add(s3);<br><br>        <span class="hljs-keyword">for</span> (Student student : hs) &#123;<br>            System.out.println(student);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><h6 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//我们可以对Object类中的hashCode方法进行重写</span><br>    <span class="hljs-comment">//在重写之后，就一般是根据对象的属性值来计算哈希值的。</span><br>    <span class="hljs-comment">//此时跟对象的地址值就没有任何关系了。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetDemo1"><a href="#测试类HashSetDemo1" class="headerlink" title="测试类HashSetDemo1"></a>测试类HashSetDemo1</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加字符串并进行遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>        hs.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br><br>        Iterator&lt;String&gt; it = hs.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : hs) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetDemo2"><a href="#测试类HashSetDemo2" class="headerlink" title="测试类HashSetDemo2"></a>测试类HashSetDemo2</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算哈希值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaozhi&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        <span class="hljs-comment">//因为在Object类中，是根据对象的地址值计算出来的哈希值。</span><br>        System.out.println(s1.hashCode());<span class="hljs-comment">//1060830840</span><br>        System.out.println(s1.hashCode());<span class="hljs-comment">//1060830840</span><br><br><br>        System.out.println(s2.hashCode());<span class="hljs-comment">//2137211482</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="集合元素排序"><a href="#集合元素排序" class="headerlink" title="集合元素排序"></a>集合元素排序</h2><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序:"></a>自然排序:</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>​            让元素本身具有排序规则<br>​            元素本身自己排序</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="1-让”集合元素所在的类”实现”Comparable接口”"><a href="#1-让”集合元素所在的类”实现”Comparable接口”" class="headerlink" title="1.让”集合元素所在的类”实现”Comparable接口”"></a>1.让”集合元素所在的类”实现”Comparable接口”</h5><h5 id="2-重写compareTo方法"><a href="#2-重写compareTo方法" class="headerlink" title="2.重写compareTo方法."></a>2.重写compareTo方法.</h5><h6 id="如果方法返回0-表示”新添加的元素”和”集合中已经存在的对象元素”重复-则不允许添加"><a href="#如果方法返回0-表示”新添加的元素”和”集合中已经存在的对象元素”重复-则不允许添加" class="headerlink" title="如果方法返回0: 表示”新添加的元素”和”集合中已经存在的对象元素”重复. 则不允许添加"></a>如果方法返回0: 表示”新添加的元素”和”集合中已经存在的对象元素”重复. 则不允许添加</h6><h6 id="如果方法返回正数-表示”新添加的元素”比”集合中已经存在的对象元素”大-则添加集合的后边"><a href="#如果方法返回正数-表示”新添加的元素”比”集合中已经存在的对象元素”大-则添加集合的后边" class="headerlink" title="如果方法返回正数: 表示”新添加的元素”比”集合中已经存在的对象元素”大. 则添加集合的后边"></a>如果方法返回正数: 表示”新添加的元素”比”集合中已经存在的对象元素”大. 则添加集合的后边</h6><h6 id="如果方法返回负数-表示”新添加的元素”比”集合中已经存在的对象元素”小-则添加集合的前边"><a href="#如果方法返回负数-表示”新添加的元素”比”集合中已经存在的对象元素”小-则添加集合的前边" class="headerlink" title="如果方法返回负数: 表示”新添加的元素”比”集合中已经存在的对象元素”小. 则添加集合的前边"></a>如果方法返回负数: 表示”新添加的元素”比”集合中已经存在的对象元素”小. 则添加集合的前边</h6><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> chinese;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> math;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> english;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> chinese, <span class="hljs-keyword">int</span> math, <span class="hljs-keyword">int</span> english)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.chinese = chinese;<br>        <span class="hljs-keyword">this</span>.math = math;<br>        <span class="hljs-keyword">this</span>.english = english;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getChinese</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> chinese;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChinese</span><span class="hljs-params">(<span class="hljs-keyword">int</span> chinese)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.chinese = chinese;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMath</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> math;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> math)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.math = math;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEnglish</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> english;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEnglish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> english)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.english = english;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, chinese=&quot;</span> + chinese +<br>                <span class="hljs-string">&quot;, math=&quot;</span> + math +<br>                <span class="hljs-string">&quot;, english=&quot;</span> + english +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span> + <span class="hljs-string">&quot;总分为&quot;</span> + getSum();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> chinese + math + english;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//按照总分进行排序</span><br>        <span class="hljs-comment">//int result = this.getChinese() + this.getMath() + this.getEnglish()</span><br>        <span class="hljs-keyword">int</span> result = o.getSum() - <span class="hljs-keyword">this</span>.getSum();<br>        <span class="hljs-comment">//次要条件</span><br>        <span class="hljs-comment">//总分一样，就比较语文成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getChinese() - <span class="hljs-keyword">this</span>.getChinese() : result;<br>        <span class="hljs-comment">//语文成绩一样，就比较数学成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getMath() - <span class="hljs-keyword">this</span>.getMath() : result;<br>        <span class="hljs-comment">//如果数学成绩一样，就比较英文成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getEnglish() - <span class="hljs-keyword">this</span>.getEnglish() : result;<br>        <span class="hljs-comment">//如果成绩都一样，则按照姓名进行排序</span><br>        result = result == <span class="hljs-number">0</span> ? o.getName().compareTo(<span class="hljs-keyword">this</span>.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试类TreeSetTest </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 键盘录入3个学生信息，属性为(姓名,语文成绩,数学成绩,英语成绩),按照总分从低到高输出到控制台</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt;  ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dahei&quot;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;erhei&quot;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">90</span>,<span class="hljs-number">90</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br><br><br>        <span class="hljs-keyword">for</span> (Student student : ts) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="比较器排序"><a href="#比较器排序" class="headerlink" title="比较器排序:"></a>比较器排序:</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>​            给元素指定一个排序规则<br>​            由排序规则指导元素排序</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-在创建TreeSet时-构造方法需要指定一个Comparator比较器对象"><a href="#1-在创建TreeSet时-构造方法需要指定一个Comparator比较器对象" class="headerlink" title="1.在创建TreeSet时,构造方法需要指定一个Comparator比较器对象"></a>1.在创建TreeSet时,构造方法需要指定一个Comparator比较器对象</h5><h5 id="2-TreeSet中的元素就会根据整个比较器对象的规则来进行排序"><a href="#2-TreeSet中的元素就会根据整个比较器对象的规则来进行排序" class="headerlink" title="2.TreeSet中的元素就会根据整个比较器对象的规则来进行排序"></a>2.TreeSet中的元素就会根据整个比较器对象的规则来进行排序</h5><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        如果自然排序和比较器排序同时存在时,则比较器排序优先</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Set集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day07 Collection集合</title>
    <link href="/blog-public/2021/04/02/SAd07/"/>
    <url>/blog-public/2021/04/02/SAd07/</url>
    
    <content type="html"><![CDATA[<h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><h2 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​            单列集合顶层接口<br>​            就是集合中一次只能存取一个元素</p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p>​                    有序(存储和遍历的顺序一致)<br>​                    有索引<br>​                    元素可以重复</p><h6 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h6><h6 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><code>ArrayList</code></h6><p>​                        底层结构是数组,查询快,增删慢<br>​                        线程不安全,效率高.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//数组可以存储基本数据类型也可以存储引用数据类型</span><br>        <span class="hljs-keyword">int</span> [] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        String [] arr2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>        System.out.println(Arrays.toString(arr1));<br>        System.out.println(Arrays.toString(arr2));<br><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list1.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        System.out.println(list1);<br><br>        <span class="hljs-comment">//如果集合要存储基本数据类型,那么实际存储的是他们的包装类</span><br>        <span class="hljs-comment">//ArrayList&lt;int&gt; list2 = new ArrayList&lt;int&gt;();</span><br>        ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-number">1</span>);<br>        list2.add(<span class="hljs-number">2</span>);<br>        list2.add(<span class="hljs-number">3</span>);<br>        System.out.println(list2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><code>LinkedList</code></h6><p>​                        底层数据结构是链表, 查询慢,增删快<br>​                        线程不安全,效率高.</p><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p>​                    无序(存储和遍历的顺序不一致)<br>​                    无索引<br>​                    元素不可以重复</p><h6 id="分支-2"><a href="#分支-2" class="headerlink" title="分支"></a>分支</h6><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><code>HashSet</code></h6><h6 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a><code>LinkedHashSet</code></h6><h6 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><code>TreeSet</code></h6><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>​            双列集合顶层接口<br>​            就是集合中一次存取一对元素<br>​            元素必须成对出现</p><h4 id="分支-3"><a href="#分支-3" class="headerlink" title="分支"></a>分支</h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><h5 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h5><h2 id="Collection集合-1"><a href="#Collection集合-1" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>​        是单例集合的顶层接口</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean add(E e)</td><td align="center">添加元素</td></tr><tr><td align="center">boolean remove(Object o)</td><td align="center">从集合中移除指定元素</td></tr><tr><td align="center">boolean removeif(Object o)</td><td align="center">根据条件进行移除</td></tr><tr><td align="center">void clear()</td><td align="center">清空集合中的元素</td></tr><tr><td align="center">boolean contains(Object o)</td><td align="center">判断集合中是否存在指定元素</td></tr><tr><td align="center">boolean isEmpty( )</td><td align="center">判断集合是否为空</td></tr><tr><td align="center">int size()</td><td align="center">集合的长度,也就是集合中元素的个数</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; collection = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//        boolean add(E e)        添加元素</span><br>        collection.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;dddd&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(collection);</span><br>        <span class="hljs-comment">//method1(collection);</span><br>        <span class="hljs-comment">//method2(collection);</span><br>        <span class="hljs-comment">//method3(collection);</span><br>        <span class="hljs-comment">//method4(collection);</span><br>        <span class="hljs-comment">//method5(collection);</span><br>        <span class="hljs-comment">//method6(collection);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method6</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        int size()            集合的长度，也就是集合中元素的个数</span><br>        <span class="hljs-keyword">int</span> size = collection.size();<br>        System.out.println(size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean isEmpty()        判断集合是否为空</span><br>        collection.clear();<br>        <span class="hljs-keyword">boolean</span> result = collection.isEmpty();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean contains(Object o)    判断集合中是否存在指定的元素</span><br>        <span class="hljs-keyword">boolean</span> result = collection.contains(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br><br><br>        <span class="hljs-keyword">boolean</span> result2 = collection.contains(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        void clear()            清空集合</span><br>        <span class="hljs-comment">//就是将集合中所有的元素全部删除.</span><br>        collection.clear();<br>        System.out.println(collection);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean removeif(Object o)    根据条件进行删除</span><br>        <span class="hljs-comment">//removeif底层会遍历集合,得到集合中的每一个元素</span><br>        <span class="hljs-comment">//s依次表示集合中的每一个元素</span><br>        <span class="hljs-comment">//就会把这每一个元素都到lambda表达式中去判断一下</span><br>        <span class="hljs-comment">//如果返回的是true,则删除</span><br>        <span class="hljs-comment">//如果返回的是false,则保留不删除.</span><br><br><br>        <span class="hljs-comment">//boolean test(String t);</span><br>        collection.removeIf(<br>                (String s)-&gt;&#123;<br>                    <span class="hljs-keyword">return</span> s.length() == <span class="hljs-number">3</span>;<br>                &#125;<br><br>        );<br>        System.out.println(collection);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean remove(Object o)        从集合中移除指定的元素</span><br>        <span class="hljs-comment">//如果删除成功了,则返回true</span><br>        <span class="hljs-comment">//如果删除失败了,则返回false</span><br>        <span class="hljs-keyword">boolean</span> result1 = collection.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = collection.remove(<span class="hljs-string">&quot;ddd&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>        System.out.println(collection);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>​        迭代器又名遍历器, 专门用于集合的遍历</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><p>​           Iterator<E> iterator():<br>​            返回此集合中元素的迭代器<br>​            通过”集合对象.iterator()”方法得到</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>​        boolean hasNext():<br>​             判断集合中是否还有更多元素可以被取出<br>​        E next():<br>​            从集合中获取下一个元素<br>​        void remove()<br>​            删除正在遍历的当前元素</p><h4 id="test1遍历"><a href="#test1遍历" class="headerlink" title="test1遍历"></a>test1遍历</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;e&quot;</span>);<br><br><br>        <span class="hljs-comment">//1,获得迭代器的对象</span><br>        <span class="hljs-comment">//迭代器对象一旦被创建出来,默认指向集合的0索引处</span><br>        Iterator&lt;String&gt; it = list.iterator();<br><br><br>        <span class="hljs-comment">//利用迭代器里面的方法进行遍历</span><br>        <span class="hljs-comment">//当前位置是否有元素可以被取出</span><br><span class="hljs-comment">//        System.out.println(it.hasNext());</span><br><span class="hljs-comment">//        //取出当前位置的元素  + 将迭代器往后移动一个索引的位置</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><br><br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2删除"><a href="#test2删除" class="headerlink" title="test2删除"></a>test2删除</h4><h6 id="for循环删除"><a href="#for循环删除" class="headerlink" title="for循环删除"></a>for循环删除</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            String s = list.get(i);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;b&quot;</span>.equals(s))&#123;<br>                list.remove(i);<br>                i--;<br>            &#125;<br>        &#125;<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="迭代器删除"><a href="#迭代器删除" class="headerlink" title="迭代器删除"></a>迭代器删除</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;b&quot;</span>.equals(s))&#123;<br>                <span class="hljs-comment">//指向谁,那么此时就删除谁.</span><br>                it.remove();<br>            &#125;<br>        &#125;<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        当使用迭代器进行遍历的时候<br>​            不允许对原始集合进行了添加或删除<br>​            如果非要删除,只能通过迭代器进行删除</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//添加元素</span><br>c.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>c.add(<span class="hljs-string">&quot;javaee&quot;</span>);<br><span class="hljs-comment">//Iterator&lt;E&gt; iterator(): 返回此集合元素的迭代器,通过集合的iterator()方法得到</span><br>Iterator&lt;String&gt; it = c.iterator();<br><span class="hljs-comment">//用while循环进行元素的判断和获取</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    String s = it.next();<br>    System.out.println(s);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​            </p><h4 id="删除集合元素"><a href="#删除集合元素" class="headerlink" title="删除集合元素"></a>删除集合元素</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>ArrayList&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//添加元素</span><br>c.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>c.add(<span class="hljs-string">&quot;javaee&quot;</span>);<br><span class="hljs-comment">//Iterator&lt;E&gt; iterator(): 返回此集合元素的迭代器,通过集合的iterator()方法得到</span><br>Iterator&lt;String&gt; it = c.iterator();<br><span class="hljs-comment">//用while循环进行元素的判断和获取</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    String s = it.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;java&quot;</span>.equals(s))&#123;<br>        it.remove();<br>        <span class="hljs-comment">//指向谁,那此时就删除谁</span><br>    &#125;<br>    System.out.println(s);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​         专门用来遍历集合或数组.</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (元素数据类型 变量名 : 集合或数组) &#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>(引入第三方变量)</p><ul><li><code>快捷键:  数组或集合后打 .iter</code></li></ul><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list =  <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;f&quot;</span>);<br><br>        <span class="hljs-comment">//1,数据类型一定是集合或者数组中元素的类型</span><br>        <span class="hljs-comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素</span><br>        <span class="hljs-comment">//3,list就是要遍历的集合或者数组.</span><br>        <span class="hljs-keyword">for</span>(String str : list)&#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list =  <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        for(String str : list)&#123;</span><br><span class="hljs-comment">//            str = &quot;q&quot;;</span><br><span class="hljs-comment">//            System.out.println(str);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//以上代码输出结果</span><br>        <span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><br>        <br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        <span class="hljs-comment">//System.out.println(list);</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​        JDK5之后出现的<br>​        增强for的底层其实是迭代器.<br>​        增强for中的变量, 存储的就是集合中的元素. </p><h3 id="增强for和迭代器遍历test"><a href="#增强for和迭代器遍历test" class="headerlink" title="增强for和迭代器遍历test"></a>增强for和迭代器遍历test</h3><h4 id="JavaBean-类Student"><a href="#JavaBean-类Student" class="headerlink" title="JavaBean 类Student"></a>JavaBean 类Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试类MyCollectonDemo8"><a href="#测试类MyCollectonDemo8" class="headerlink" title="测试类MyCollectonDemo8"></a>测试类MyCollectonDemo8</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小皮同学&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小路同学&quot;</span>,<span class="hljs-number">31</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小贾同学&quot;</span>,<span class="hljs-number">33</span>);<br><br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br><br><br>        <span class="hljs-comment">//迭代器的方式进行遍历</span><br>        Iterator&lt;Student&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            Student s = it.next();<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br>        <span class="hljs-comment">//增强for</span><br>        <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>​        有序(存储和遍历的顺序一致)<br>​        有索引<br>​        元素可以重复</p><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法:"></a>特有方法:</h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void add(int index,E element)</td><td align="center">在此集合中的指定位置插入指定的元素</td></tr><tr><td align="center">E remove(int index)</td><td align="center">删除指定索引处的元素,返回被删除的元素</td></tr><tr><td align="center">E set(int index,E element)</td><td align="center">修改指定索引处的元素,返回被修改的元素</td></tr><tr><td align="center">E get(int index,E element)</td><td align="center">返回指定索引处的元素</td></tr></tbody></table><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="test1基础"><a href="#test1基础" class="headerlink" title="test1基础"></a>test1基础</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.Iterator; <span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo1</span> </span>&#123; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; List list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>    Iterator&lt;String&gt; it = list.iterator();<br>    <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>        String s = it.next();<br>        System.out.println(s);<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String s : list) &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2特有方法"><a href="#test2特有方法" class="headerlink" title="test2特有方法"></a>test2特有方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3(list);</span><br>        <span class="hljs-comment">//method4(list);</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E get(int index)        返回指定索引处的元素</span><br>        String s = list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E set(int index,E element)    修改指定索引处的元素，返回被修改的元素</span><br>        <span class="hljs-comment">//被替换的那个元素,在集合中就不存在了.</span><br>        String result = list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(result);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E remove(int index)        删除指定索引处的元素，返回被删除的元素</span><br>        <span class="hljs-comment">//在List集合中有两个删除的方法</span><br>        <span class="hljs-comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span><br>        <span class="hljs-comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span><br>        String s = list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void add(int index,E element)    在此集合中的指定位置插入指定的元素</span><br>        <span class="hljs-comment">//原来位置上的元素往后挪一个索引.</span><br>        list.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3特有方法"><a href="#test3特有方法" class="headerlink" title="test3特有方法"></a>test3特有方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3(list);</span><br>        <span class="hljs-comment">//method4(list);</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E get(int index)        返回指定索引处的元素</span><br>        String s = list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E set(int index,E element)    修改指定索引处的元素，返回被修改的元素</span><br>        <span class="hljs-comment">//被替换的那个元素,在集合中就不存在了.</span><br>        String result = list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(result);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E remove(int index)        删除指定索引处的元素，返回被删除的元素</span><br>        <span class="hljs-comment">//在List集合中有两个删除的方法</span><br>        <span class="hljs-comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span><br>        <span class="hljs-comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span><br>        String s = list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void add(int index,E element)    在此集合中的指定位置插入指定的元素</span><br>        <span class="hljs-comment">//原来位置上的元素往后挪一个索引.</span><br>        list.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="栈结构"><a href="#栈结构" class="headerlink" title="- 栈结构"></a>- 栈结构</h3><p>​        先进后出</p><h3 id="队列结构"><a href="#队列结构" class="headerlink" title="- 队列结构"></a>- 队列结构</h3><p>​        先进先出</p><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="- 数组结构"></a>- 数组结构</h3><p>​        查询快、增删慢</p><h3 id="链表结构"><a href="#链表结构" class="headerlink" title="- 链表结构"></a>- 链表结构</h3><p>​        查询慢、增删快</p><h2 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍:"></a>介绍:</h3><p>​        底层是链表结构实现，查询慢、增删快</p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void addFirst(E e)</td><td align="center">在该链表开头插入的指定元素</td></tr><tr><td align="center">public void addLast(E e)</td><td align="center">将指定的元素追加到此链表的结尾</td></tr><tr><td align="center">public E getFirst()</td><td align="center">返回链表中的第一个元素</td></tr><tr><td align="center">public E getLast()</td><td align="center">返回链表中的最后一个元素</td></tr><tr><td align="center">public void removeFirst( )</td><td align="center">从此链表中删除并返回第一个元素</td></tr><tr><td align="center">public void remove( )</td><td align="center">从此链表中删除并返回最后一个元素</td></tr></tbody></table><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedListDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList&lt;String&gt;  list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedListDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-comment">//        public void addFirst(E e)    在该列表开头插入指定的元素</span><br>        <span class="hljs-comment">//method1(list);</span><br><br><span class="hljs-comment">//        public void addLast(E e)    将指定的元素追加到此列表的末尾</span><br>        <span class="hljs-comment">//method2(list);</span><br><br><br><span class="hljs-comment">//        public E getFirst()        返回此列表中的第一个元素</span><br><span class="hljs-comment">//        public E getLast()        返回此列表中的最后一个元素</span><br>        <span class="hljs-comment">//method3(list);</span><br><br><br><span class="hljs-comment">//        public E removeFirst()        从此列表中删除并返回第一个元素</span><br><span class="hljs-comment">//        public E removeLast()        从此列表中删除并返回最后一个元素</span><br>        <span class="hljs-comment">//method4(list);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        String first = list.removeFirst();<br>        System.out.println(first);<br><br>        String last = list.removeLast();<br>        System.out.println(last);<br><br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        String first = list.getFirst();<br>        String last = list.getLast();<br>        System.out.println(first);<br>        System.out.println(last);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        list.addLast(<span class="hljs-string">&quot;www&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        list.addFirst(<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Collection集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day06 时间&amp;异常</title>
    <link href="/blog-public/2021/04/02/SAd06/"/>
    <url>/blog-public/2021/04/02/SAd06/</url>
    
    <content type="html"><![CDATA[<h1 id="时间-amp-异常"><a href="#时间-amp-异常" class="headerlink" title="时间&amp;异常"></a>时间&amp;异常</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        在Java中用来表示时间的类<br>​        他仅仅只能”表示时间”,别的操作都没有</p><h3 id="构造-jdk7"><a href="#构造-jdk7" class="headerlink" title="构造:(jdk7)"></a>构造:(jdk7)</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Date();</td><td align="center">//获取当前系统时间</td></tr><tr><td align="center">public Date(long date)</td><td align="center">//根据一个毫秒值获取一个时间</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public Date()        创建一个Date对象，表示默认时间</span><br><span class="hljs-comment">//public Date(long date)    创建一个Date对象，表示指定时间</span><br><br>        <span class="hljs-comment">//那么这个时间就表示电脑中的当前时间。</span><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(date1);<br><br>        <span class="hljs-comment">//从计算机的时间原点开始，过了指定毫秒的那个时间。</span><br>        Date date2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">0L</span>);<br>        System.out.println(date2);<span class="hljs-comment">//Thu Jan 01 08:00:00 CST 1970</span><br>        <span class="hljs-comment">//从时间原点开始，过了0毫秒。</span><br>        <span class="hljs-comment">//因为我们是在中国，我们是在东八区需要+8小时。</span><br><br>        <span class="hljs-comment">//1970年1月1日 上午的9点</span><br>        Date date3 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">3600L</span> * <span class="hljs-number">1000</span>);<br>        System.out.println(date3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="转换-jdk7"><a href="#转换-jdk7" class="headerlink" title="转换:(jdk7)"></a>转换:(jdk7)</h3><h4 id="时间对象-–-gt-毫秒值"><a href="#时间对象-–-gt-毫秒值" class="headerlink" title="时间对象 –&gt; 毫秒值"></a>时间对象 –&gt; 毫秒值</h4><p>​            long 毫秒值 = 时间对象.getTime();</p><h4 id="毫秒值-–-gt-时间对象"><a href="#毫秒值-–-gt-时间对象" class="headerlink" title="毫秒值 –&gt; 时间对象"></a>毫秒值 –&gt; 时间对象</h4><p>​            Date 时间对象 = new Date(毫秒值);</p><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public long getTime()            获取时间对象的毫秒值</span><br><span class="hljs-comment">//        public void setTime(long time)        设置时间，传递毫秒值</span><br><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        date1.setTime(<span class="hljs-number">0L</span>);<br>        System.out.println(date1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把当前时间封装成一个date对象</span><br><br>Date date1 = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-comment">//获取这个date对象的毫秒值 --- 获取当前时间的毫秒值</span><br>        <span class="hljs-keyword">long</span> time = date1.getTime();<br>        System.out.println(time);<br><br>        <span class="hljs-keyword">long</span> time2 = System.currentTimeMillis();<br>        System.out.println(time2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="SimpleDateFormat-jdk7"><a href="#SimpleDateFormat-jdk7" class="headerlink" title="SimpleDateFormat(jdk7)"></a>SimpleDateFormat(jdk7)</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        用来格式化/解析时间<br>​        让时间的显示,更加适合我们的习惯.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public   SimpleDateFormat()</td><td align="center">使用默认模式和日期格式public</td></tr><tr><td align="center">public SimpleDateFormat(“时间格式”);</td><td align="center">使用指定时间格式,<br/>             格式:  y:年,M:月,d:日,H:时,m:分,s:秒</td></tr></tbody></table><h3 id="应用"><a href="#应用" class="headerlink" title="应用:"></a>应用:</h3><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化:"></a>格式化:</h4><h5 id="public-String-format-Date-date"><a href="#public-String-format-Date-date" class="headerlink" title="public String format(Date date);"></a>public String format(Date date);</h5><p>​            把一个Date时间,按照指定时间格式,转换为字符串</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><h5 id="public-Date-parse-String-source"><a href="#public-Date-parse-String-source" class="headerlink" title="public Date parse(String source);"></a>public Date parse(String source);</h5><p>​             把一个时间字符串,按照指定时间格式,转换为Date时间</p><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//当前时间的Date对象</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br><br>        <span class="hljs-comment">//创建了一个日期格式。</span><br>        <span class="hljs-comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br><span class="hljs-comment">//        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>        String result1 = sdf.format(date);<br>        System.out.println(result1);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        String s = <span class="hljs-string">&quot;2048-01-01&quot;</span>;<br><br>        <span class="hljs-comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>        Date date = sdf.parse(s);<br><br>        System.out.println(date);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        <span class="hljs-comment">//开始时间：2020年11月11日 0:0:0</span><br>        <span class="hljs-comment">//结束时间：2020年11月11日 0:10:0</span><br><br>        <span class="hljs-comment">//小贾2020年11月11日 0:03:47</span><br>        <span class="hljs-comment">//小皮2020年11月11日 0:10:11</span><br><br><br>        <span class="hljs-comment">//1.判断两位同学的下单时间是否在范围之内就可以了。</span><br><br>        <span class="hljs-comment">//2.要把每一个时间都换算成毫秒值。</span><br><br>        String start = <span class="hljs-string">&quot;2020年11月11日 0:0:0&quot;</span>;<br>        String end = <span class="hljs-string">&quot;2020年11月11日 0:10:0&quot;</span>;<br><br>        String jia = <span class="hljs-string">&quot;2020年11月11日 0:03:47&quot;</span>;<br>        String pi = <span class="hljs-string">&quot;2020年11月11日 0:10:11&quot;</span>;<br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">long</span> startTime = sdf.parse(start).getTime();<br>        <span class="hljs-keyword">long</span> endTime = sdf.parse(end).getTime();<br><br><span class="hljs-comment">//        System.out.println(startTime);</span><br><span class="hljs-comment">//        System.out.println(endTime);</span><br>        <span class="hljs-keyword">long</span> jiaTime = sdf.parse(jia).getTime();<br>        <span class="hljs-keyword">long</span> piTime = sdf.parse(pi).getTime();<br><br>        <span class="hljs-keyword">if</span>(jiaTime &gt;= startTime &amp;&amp; jiaTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾同学参加上了秒杀活动&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾同学没有参加上秒杀活动&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(piTime &gt;= startTime &amp;&amp; piTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮同学参加上了秒杀活动&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮同学没有参加上秒杀活动&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="LocalDateTime-jdk8"><a href="#LocalDateTime-jdk8" class="headerlink" title="LocalDateTime(jdk8)"></a>LocalDateTime(jdk8)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        LocalDate<br>​            仅仅封装了日期的对象<br>​        LocalTime<br>​            仅仅封装了时间的对象<br>​        LocalDateTime<br>​            既有日期, 又有时间</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象:"></a>创建对象:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static LocalDateTime now()</td><td align="center">//获取当前系统时间</td></tr><tr><td align="center">public static LocalDateTime of(年,月,日,时,分,秒)</td><td align="center">//使用指定年月日和时分秒初始化一个LocalDateTime对象</td></tr></tbody></table><h3 id="转换时间"><a href="#转换时间" class="headerlink" title="转换时间:"></a>转换时间:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDate toLocalDate()</td><td align="center">//转换成为一个LocalDate对象</td></tr><tr><td align="center">public LocalTime toLocalTime()</td><td align="center">//转换成为一个LocalTime对象</td></tr><tr><td align="center">public String format(DateTimeFormatter formatter)</td><td align="center">//按照指定格式格式化日期<br/>//LocalDateTime  -&gt;  String</td></tr><tr><td align="center">public static LocalDateTime parse(String source, DateTimeFormatter formatter)</td><td align="center">//按照指定格式解析字符串<br/>            //String  -&gt;  LocalDateTime</td></tr></tbody></table><h3 id="操作时间"><a href="#操作时间" class="headerlink" title="操作时间"></a>操作时间</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public int getYear()</td><td align="center">//获取年</td></tr><tr><td align="center">public int getMonthValue()</td><td align="center">//获取月份（1-12）</td></tr><tr><td align="center">public int getDayOfMonth()</td><td align="center">//获取月份中的第几天（1-31）</td></tr></tbody></table><h4 id="增加"><a href="#增加" class="headerlink" title="增加:"></a>增加:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime plusYears(long years)</td><td align="center">//添加或者减去年(正数增加,负数减少)</td></tr><tr><td align="center">public LocalDateTime plusMonths(long months)</td><td align="center">//添加或者减去月</td></tr><tr><td align="center">public LocalDateTime plusDays(long days)</td><td align="center">//添加或者减去日</td></tr></tbody></table><p>​        </p><h4 id="减少"><a href="#减少" class="headerlink" title="减少:"></a>减少:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime minusYears(long years)</td><td align="center">//减去或者添加年(正数减少,负数增加)</td></tr><tr><td align="center">public LocalDateTime minusMonths(long months)</td><td align="center">//减去或者添加月</td></tr><tr><td align="center">public LocalDateTime minusDays(long days)</td><td align="center">//减去或者添加日</td></tr></tbody></table><h4 id="修改"><a href="#修改" class="headerlink" title="修改:"></a>修改:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime withYear(int year)</td><td align="center">//直接修改年</td></tr><tr><td align="center">public LocalDateTime withMonth(int month)</td><td align="center">//直接修改月</td></tr></tbody></table><p>​    </p><h3 id="计算间隔"><a href="#计算间隔" class="headerlink" title="计算间隔:"></a>计算间隔:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public long until(LocalDateTime ldt, ChronoUnit.时间单位);</td><td align="center">//计算当前时间和ldt之间的时间间隔,<br/>        loaclDate和LocalTime均可以使用该方法</td></tr></tbody></table><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        <span class="hljs-comment">//JDKMethod();</span><br><br>        String s = <span class="hljs-string">&quot;2020年11月11日 00:00:00&quot;</span>;<br><br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        LocalDateTime localDateTime = LocalDateTime.parse(s, pattern);<br>        LocalDateTime newLocalDateTime = localDateTime.plusDays(<span class="hljs-number">1</span>);<br>        String result = newLocalDateTime.format(pattern);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JDKMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        String s = <span class="hljs-string">&quot;2020年11月11日 00:00:00&quot;</span>;<br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        Date date = sdf.parse(s);<br>        <span class="hljs-keyword">long</span> time = date.getTime();<br>        time = time + (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>        Date newDate = <span class="hljs-keyword">new</span> Date(time);<br>        String result = sdf.format(newDate);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime now = LocalDateTime.now();<br>        System.out.println(now);<br><br><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<br>        System.out.println(localDateTime);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.DayOfWeek;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.Month;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//public int getYear()           获取年</span><br>        <span class="hljs-keyword">int</span> year = localDateTime.getYear();<br>        System.out.println(<span class="hljs-string">&quot;年为&quot;</span> +year);<br>        <span class="hljs-comment">//public int getMonthValue()     获取月份（1-12）</span><br>        <span class="hljs-keyword">int</span> month = localDateTime.getMonthValue();<br>        System.out.println(<span class="hljs-string">&quot;月份为&quot;</span> + month);<br><br>        Month month1 = localDateTime.getMonth();<br><span class="hljs-comment">//        System.out.println(month1);</span><br><br>        <span class="hljs-comment">//public int getDayOfMonth()     获取月份中的第几天（1-31）</span><br>        <span class="hljs-keyword">int</span> day = localDateTime.getDayOfMonth();<br>        System.out.println(<span class="hljs-string">&quot;日期为&quot;</span> + day);<br><br><br>        <span class="hljs-comment">//public int getDayOfYear()      获取一年中的第几天（1-366）</span><br>        <span class="hljs-keyword">int</span> dayOfYear = localDateTime.getDayOfYear();<br>        System.out.println(<span class="hljs-string">&quot;这是一年中的第&quot;</span> + dayOfYear + <span class="hljs-string">&quot;天&quot;</span>);<br><br><br>        <span class="hljs-comment">//public DayOfWeek getDayOfWeek()获取星期</span><br>        DayOfWeek dayOfWeek = localDateTime.getDayOfWeek();<br>        System.out.println(<span class="hljs-string">&quot;星期为&quot;</span> + dayOfWeek);<br><br><br>        <span class="hljs-comment">//public int getMinute()        获取分钟</span><br>        <span class="hljs-keyword">int</span> minute = localDateTime.getMinute();<br>        System.out.println(<span class="hljs-string">&quot;分钟为&quot;</span> + minute);<br>        <span class="hljs-comment">//public int getHour()           获取小时</span><br><br>        <span class="hljs-keyword">int</span> hour = localDateTime.getHour();<br>        System.out.println(<span class="hljs-string">&quot;小时为&quot;</span> + hour);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//public LocalDate toLocalDate ()    转换成为一个LocalDate对象</span><br>        LocalDate localDate = localDateTime.toLocalDate();<br>        System.out.println(localDate);<br><br>        <span class="hljs-comment">//public LocalTime toLocalTime ()    转换成为一个LocalTime对象</span><br>        LocalTime localTime = localDateTime.toLocalTime();<br>        System.out.println(localTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//public static LocalDateTime parse (准备解析的字符串, 解析格式) 把一个日期字符串解析成为一个LocalDateTime对象</span><br>        String s = <span class="hljs-string">&quot;2020年11月12日 13:14:15&quot;</span>;<br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        LocalDateTime parse = LocalDateTime.parse(s, pattern);<br>        System.out.println(parse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        System.out.println(localDateTime);<br>        <span class="hljs-comment">//public String format (指定格式)   把一个LocalDateTime格式化成为一个字符串</span><br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        String s = localDateTime.format(pattern);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类添加或者减去时间的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime plusYears (long years)   添加或者减去年</span><br><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-comment">//LocalDateTime newLocalDateTime = localDateTime.plusYears(1);</span><br>        <span class="hljs-comment">//System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.plusYears(-<span class="hljs-number">1</span>);<br>        System.out.println(newLocalDateTime);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test7"><a href="#test7" class="headerlink" title="test7"></a>test7</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类减少或者添加时间的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime minusYears (long years)  减去或者添加年</span><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-comment">//LocalDateTime newLocalDateTime = localDateTime.minusYears(1);</span><br>        <span class="hljs-comment">//System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.minusYears(-<span class="hljs-number">1</span>);<br>        System.out.println(newLocalDateTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test8"><a href="#test8" class="headerlink" title="test8"></a>test8</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类修改时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime withYear(int year)   修改年</span><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>       <span class="hljs-comment">// LocalDateTime newLocalDateTime = localDateTime.withYear(2048);</span><br>       <span class="hljs-comment">// System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.withMonth(<span class="hljs-number">20</span>);<br>        System.out.println(newLocalDateTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test9"><a href="#test9" class="headerlink" title="test9"></a>test9</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.Period;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  计算两个时间的间隔</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public static Period between(开始时间,结束时间)  计算两个&quot;时间&quot;的间隔</span><br><br>        LocalDate localDate1 = LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        LocalDate localDate2 = LocalDate.of(<span class="hljs-number">2048</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br>        Period period = Period.between(localDate1, localDate2);<br>        System.out.println(period);<span class="hljs-comment">//P28Y11M11D</span><br><br>        <span class="hljs-comment">//public int getYears()         获得这段时间的年数</span><br>        System.out.println(period.getYears());<span class="hljs-comment">//28</span><br>        <span class="hljs-comment">//public int getMonths()        获得此期间的月数</span><br>        System.out.println(period.getMonths());<span class="hljs-comment">//11</span><br>        <span class="hljs-comment">//public int getDays()          获得此期间的天数</span><br>        System.out.println(period.getDays());<span class="hljs-comment">//11</span><br><br>        <span class="hljs-comment">//public long toTotalMonths()   获取此期间的总月数</span><br>        System.out.println(period.toTotalMonths());<span class="hljs-comment">//347</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test10"><a href="#test10" class="headerlink" title="test10"></a>test10</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  计算两个时间的间隔</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public static Duration between(开始时间,结束时间)  计算两个“时间&quot;的间隔</span><br><br>        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        LocalDateTime localDateTime2 = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>);<br>        Duration duration = Duration.between(localDateTime1, localDateTime2);<br>        System.out.println(duration);<span class="hljs-comment">//PT21H57M58S</span><br>        <span class="hljs-comment">//public long toSeconds()           获得此时间间隔的秒</span><br>        System.out.println(duration.toSeconds());<span class="hljs-comment">//79078</span><br>        <span class="hljs-comment">//public int toMillis()               获得此时间间隔的毫秒</span><br>        System.out.println(duration.toMillis());<span class="hljs-comment">//79078000</span><br>        <span class="hljs-comment">//public int toNanos()             获得此时间间隔的纳秒</span><br>        System.out.println(duration.toNanos());<span class="hljs-comment">//79078000000000</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="DateTimeFormatter-jdk8"><a href="#DateTimeFormatter-jdk8" class="headerlink" title="DateTimeFormatter(jdk8)"></a>DateTimeFormatter(jdk8)</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        用来表示日期/时间格式的类.<br>​         和SimpleDateFormat类似.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><p>​        public static DateTimeFormatter ofPattern(String pattern);<br>​        //根据字符串格式获取一个日期格式化对象</p><h2 id="时间间隔-了解"><a href="#时间间隔-了解" class="headerlink" title="时间间隔(了解)"></a>时间间隔(了解)</h2><h3 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述:"></a>概述:</h4><p>​            计算两个日期之间的间隔<br>​            JDK8之后</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static Period between(日期对象,日期对象);</td><td align="center">//计算两个日期之间的间隔.日期对象可以为: LocalDate</td></tr><tr><td align="center">public int getDays()</td><td align="center">//获得此期间的天数。</td></tr><tr><td align="center">public int getMonths()</td><td align="center">//获得此期间的月数。</td></tr><tr><td align="center">public int getYears()</td><td align="center">//获得此期间的年数。</td></tr><tr><td align="center">public long toTotalMonths()</td><td align="center">//获取此期间的总月数</td></tr></tbody></table><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述:"></a>概述:</h4><p>​            计算两个时间之间的间隔<br>​            JDK8之后</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static Duration between(时间对象,时间对象);</td><td align="center">//计算两个时间之间的间隔.<br/>                 时间对象可以为: LocalTime,LocalDateTime</td></tr><tr><td align="center">public int toHours()</td><td align="center">//获得此期间的小时数。</td></tr><tr><td align="center">public int toMinutes()</td><td align="center">//获得此期间的分钟数。</td></tr><tr><td align="center">public int toSeconds()</td><td align="center">//获得此期间的秒数。</td></tr></tbody></table><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>​         程序发生的不正常现象(报错),就称之为”异常”.<br>​        注意, 这里的错误指的不是”语法性错误”</p><h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4><p>​            Error:  错误.一般是硬件问题,是没法解决的问题.<br>​            Exception异常.<br>​                运行时异常:<br>​                    1.运行代码的时候报的错就是运行时异常.<br>​                    2.运行时异常一般指的是RuntimeException及其子类.<br>​                编译时异常:<br>​                    1.写代码的时候报的错(排除语法错误),就是编译时异常.<br>​                    2.除了RuntimeException及其子类,其他类都是编译时异常.</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>​            通常所说的异常, 指的就是Exception</p><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br><span class="hljs-comment">//        int [] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="hljs-comment">//        System.out.println(arr[10]);//ArrayIndexOutOfBoundsException</span><br><br><br><span class="hljs-comment">//        String s = null;</span><br><span class="hljs-comment">//        System.out.println(s.equals(&quot;嘿嘿&quot;));//NullPointerException</span><br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>        sdf.parse(<span class="hljs-string">&quot;2048-1月1日&quot;</span>);<span class="hljs-comment">//ParseException</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//思考:控制台为什么会有这样的红色字体呢? 是谁打印的?</span><br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(arr[<span class="hljs-number">10</span>]);<span class="hljs-comment">//当代码出现了异常,那么就在这里创建了一个异常对象.</span><br>                                    <span class="hljs-comment">//new ArrayIndexOutOfBoundsException();</span><br>                                    <span class="hljs-comment">//首先会看,程序中有没有自己处理异常的代码.</span><br>                                    <span class="hljs-comment">//如果没有,交给本方法的调用者处理.</span><br>                                    <span class="hljs-comment">//最终这个异常会交给虚拟机默认处理.</span><br>                                    <span class="hljs-comment">//JVM默认处理异常做了哪几件事情:</span><br>                                    <span class="hljs-comment">//1,将异常信息以红色字体展示在控制台上.</span><br>                                    <span class="hljs-comment">//2,停止程序运行. --- 哪里出现了异常,那么程序就在哪里停止,下面的代码不执行了.</span><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿,我最帅&quot;</span>);<br><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-2"><a href="#test3-2" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo3</span> </span>&#123;<br>    <span class="hljs-comment">//创建一个ArrayList集合,添加一些元素 &quot;aaa&quot; &quot;bbb&quot; &quot;bbb&quot; &quot;ccc&quot; &quot;bbb&quot; null</span><br>    <span class="hljs-comment">//遍历集合,并统计集合中有多少个&quot;bbb&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;bbb&quot;</span>.equals(it.next()))&#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;在集合中一共出现bbb有&quot;</span> + count+ <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4-1"><a href="#test4-1" class="headerlink" title="test4"></a>test4</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo4</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个方法,用来遍历数组.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int [] arr = &#123;1,2,3,4,5&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        printArr(arr);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>       <span class="hljs-comment">// if(arr != null)&#123;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>       <span class="hljs-comment">// &#125;</span><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test5-1"><a href="#test5-1" class="headerlink" title="test5"></a>test5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo5</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个猫类, 成员变量:姓名,年龄. 成员方法:睡觉,抓老鼠.</span><br>    <span class="hljs-comment">//定义一个狗类, 成员变量:姓名,年龄. 成员方法:睡觉,看家.</span><br>    <span class="hljs-comment">//定义一个饲养员类,成员方法:饲养动物,要求该方法既能养猫,又能养狗.</span><br>    <span class="hljs-comment">//并在方法中调用猫狗的睡觉方法和特有方法.</span><br>    <span class="hljs-comment">//在测试类中创建饲养员的对象,并调用饲养动物的方法.</span><br><br><br>    <span class="hljs-comment">//分析:</span><br>        <span class="hljs-comment">//1.本题涉及多少类?   猫  狗  饲养员  测试类</span><br>        <span class="hljs-comment">//2.有没有共性内容可以抽取? 猫 和 狗 中有共性内容.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Feeder feeder = <span class="hljs-keyword">new</span> Feeder();<br>        feeder.feedAnimal(<span class="hljs-keyword">new</span> Cat());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Feeder"><a href="#Feeder" class="headerlink" title="Feeder"></a>Feeder</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Feeder</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个饲养员类,成员方法:饲养动物,要求该方法既能养猫,又能养狗.</span><br>     <span class="hljs-comment">//并在方法中调用猫狗的睡觉方法和特有方法.</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">feedAnimal</span><span class="hljs-params">(Animal animal)</span></span>&#123;<br>        animal.sleep();<br>        <span class="hljs-comment">//向下转型</span><br>        <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>            Dog d = (Dog) animal;<br>            d.lookHome();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>            Cat c = (Cat) animal;<br>            c.catchMouse();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有这样的数据类型&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">//因为构造方法不能被继承只能被子类使用super关键字去调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Dog"><a href="#Dog" class="headerlink" title="Dog"></a>Dog</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookHome</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗看家&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Animal"><a href="#Animal" class="headerlink" title="Animal"></a>Animal</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Animal&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="JVM处理异常"><a href="#JVM处理异常" class="headerlink" title="JVM处理异常"></a>JVM处理异常</h4><p>​            1.把”异常类型,异常位置,异常原因”打印到控制台.<br>​            2.终止当前程序的运行.</p><h4 id="自己处理异常"><a href="#自己处理异常" class="headerlink" title="自己处理异常"></a>自己处理异常</h4><h5 id="方式"><a href="#方式" class="headerlink" title="方式:"></a>方式:</h5><p>​                异常声明: throws<br>​                异常捕获: try-catch</p><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h5><p>​                自己处理异常,目的并不是要把异常干掉<br>​                1.把异常信息获取到(类型,原因,位置等)<br>​                2.让这个异常不影响其他的代码的正常运行.</p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>​            throw叫做异常抛出<br>​            可以理解为”故意制造一个异常”</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>​            throw  new 异常类型(“异常信息”);</p><h4 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h4><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        method1(); <span class="hljs-comment">//此时调用者也没有处理.还是会交给虚拟机处理.</span><br>        method2(); <span class="hljs-comment">//还是继续交给调用者处理.而main方法的调用者是虚拟机还是会采取虚拟机默认处理异常的方法.</span><br>    &#125;<br><br>    <span class="hljs-comment">//告诉调用者,你调用我,有可能会出现这样的异常哦.</span><br>    <span class="hljs-comment">//如果方法中没有出现异常,那么正常执行</span><br>    <span class="hljs-comment">//如果方法中真的出现了异常,其实也是将这个异常交给了调用者处理.</span><br>    <span class="hljs-comment">//如果声明的异常是一个运行时异常,那么声明的代码可以省略</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-comment">/*throws NullPointerException*/</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">//出现的空指针异常,还是由虚拟机创建出来的.</span><br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//告诉调用者,你调用我,有可能会出现这样的异常哦.</span><br>    <span class="hljs-comment">//如果方法中没有出现异常,那么正常执行</span><br>    <span class="hljs-comment">//如果方法中真的出现了异常,其实也是将这个异常交给了调用者处理.</span><br>    <span class="hljs-comment">//如果声明的异常是一个编译时异常,那么声明的代码必须要手动写出.</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>        sdf.parse(<span class="hljs-string">&quot;2048-10月10日&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;家里有一个貌美如花的老婆&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;还有一个当官的兄弟&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;自己还有一个买卖&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;这样的生活你要不要?&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(); <span class="hljs-comment">//当代码执行到这里,就创建一个异常对象</span><br>                                    <span class="hljs-comment">//该异常创建之后,暂时没有手动处理.抛给了调用者处理</span><br>                                    <span class="hljs-comment">//下面的代码不会再执行了.</span><br>        <span class="hljs-comment">//System.out.println(&quot;武大郎的标准生活&quot;);</span><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-3"><a href="#test3-3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int [] arr = &#123;1,2,3,4,5&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        printArr(arr);<span class="hljs-comment">//就会 接收到一个异常.</span><br>                        <span class="hljs-comment">//我们还需要自己处理一下异常.</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//调用者知道成功打印了吗?</span><br>            <span class="hljs-comment">//System.out.println(&quot;参数不能为null&quot;);</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(); <span class="hljs-comment">//当参数为null的时候</span><br>                                                <span class="hljs-comment">//手动创建了一个异常对象,抛给了调用者.</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常声明-throws"><a href="#异常声明-throws" class="headerlink" title="异常声明 throws"></a>异常声明 throws</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>​            public void 方法名() throws 异常类型{   …   }</p><h4 id="位置"><a href="#位置" class="headerlink" title="位置:"></a>位置:</h4><p>​             方法参数后边.</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义:"></a>意义:</h4><p>​            告诉方法的调用者,我很危险.<br>​            一般”编译时异常”都使用该方式处理.</p><h3 id="异常捕获-try-catch"><a href="#异常捕获-try-catch" class="headerlink" title="异常捕获 try-catch"></a>异常捕获 try-catch</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法:"></a>语法:</h4><p>​            </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//可能出现异常的代码</span><br>       &#125; <span class="hljs-keyword">catch</span> (异常类型 e) &#123;<br>    <span class="hljs-comment">//当try中发生异常时,会执行这里</span><br>    <span class="hljs-comment">//把&quot;异常类型&quot;,异常原因,异常位置打印到控制台</span><br>           e.printStackTrace();<br>       &#125;<br></code></pre></div></td></tr></table></figure><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>​            1.如果try中不出现异常,则执行完try之后,整个try-catch结束, catch中的代码不执行<br>​            2.如果try中出现异常,则立即跳转到catch中执行,catch执行完毕后,整个try-catch结束<br>​            3.当try中出现异常的时候, JVM会把异常捕获,并做成一个异常对象, 交给catch()中的异常变量</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>​            1.catch()中的异常类型,必须和捕捉到的异常类型一致.<br>​            2.catch可以有多个.<br>​            3.catch()中的异常类型一般直接写为Exception</p><h4 id="意义-1"><a href="#意义-1" class="headerlink" title="意义:"></a>意义:</h4><p>​            对于可能出现异常的代码进行封装,让其不影响其他代码的执行.</p><h4 id="test-5"><a href="#test-5" class="headerlink" title="test"></a>test</h4><h5 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//好处:为了能让代码继续往下运行.</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//有肯能发现异常的代码</span><br>            printArr(arr);<br>        &#125;<span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>            <span class="hljs-comment">//如果出现了这样的异常,那么我们进行的操作</span><br>            System.out.println(<span class="hljs-string">&quot;参数不能为null&quot;</span>);<br>        &#125;<br><br><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿,我最帅!!!&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.如果 try 中没有遇到问题，怎么执行？ --- 会把try中所有的代码全部执行完毕,不会执行catch里面的代码</span><br>        <span class="hljs-comment">//2.如果 try 中遇到了问题，那么 try 下面的代码还会执行吗？</span><br>                            <span class="hljs-comment">//那么直接跳转到对应的catch语句中,try下面的代码就不会再执行了</span><br>                            <span class="hljs-comment">//当catch里面的语句全部执行完毕,表示整个体系全部执行完全,继续执行下面的代码</span><br>        <span class="hljs-comment">//3.如果出现的问题没有被捕获，那么程序如何运行？</span><br>                             <span class="hljs-comment">//那么try...catch就相当于没有写.那么也就是自己没有处理.</span><br>                             <span class="hljs-comment">//默认交给虚拟机处理.</span><br>        <span class="hljs-comment">//4.同时有可能出现多个异常怎么处理？</span><br>                            <span class="hljs-comment">//出现多个异常,那么就写多个catch就可以了.</span><br>                            <span class="hljs-comment">//注意点:如果多个异常之间存在子父类关系.那么父类一定要写在下面</span><br><br>       <span class="hljs-comment">// method1();</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>);<br>            String line = sc.nextLine();<br>            <span class="hljs-keyword">int</span> age = Integer.parseInt(line);<span class="hljs-comment">//格式化异常</span><br>            System.out.println(age);<br>            System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>); <span class="hljs-comment">//数学异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//以后我们针对于每种不同的异常,有可能会有不同的处理结果.</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;测试456&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>);<br>            String line = sc.nextLine();<br>            <span class="hljs-keyword">int</span> age = Integer.parseInt(line);<span class="hljs-comment">//格式化异常</span><br>            System.out.println(age);<br>            System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>); <span class="hljs-comment">//数学异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;格式化异常出现了&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数学运算异常出现了&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;测试456&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-4"><a href="#test3-4" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo11</span> </span>&#123;<br>    <span class="hljs-comment">//public String getMessage()    返回此 throwable 的详细消息字符串</span><br>    <span class="hljs-comment">//public String toString()      返回此可抛出的简短描述</span><br>    <span class="hljs-comment">//public void printStackTrace() 把异常的错误信息输出在控制台(字体为红色的)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>            System.out.println(arr[<span class="hljs-number">10</span>]);<span class="hljs-comment">//虚拟机帮我们创建了一个异常对象 new ArrayIndexOutOfBoundsException();</span><br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            <span class="hljs-comment">/*String message = e.getMessage();</span><br><span class="hljs-comment">            System.out.println(message);*/</span><br>           <span class="hljs-comment">/* String s = e.toString();</span><br><span class="hljs-comment">            System.out.println(s);*/</span><br>           e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>​        1.自定义一个类, 类名一般为”XxxxException”<br>​        2.继承任意一个异常父类<br>​        3.提供两个构造方法<br>​            空参构造方法<br>​            字符串参数构造方</p><h3 id="意义-2"><a href="#意义-2" class="headerlink" title="意义:"></a>意义:</h3><p>​        通过”异常类名”直接表现出异常的原因.</p><h3 id="test-6"><a href="#test-6" class="headerlink" title="test"></a>test</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 键盘录入学生的姓名和年龄,其中年龄为 18 - 25岁,</span><br>        <span class="hljs-comment">// 超出这个范围是异常数据不能赋值.需要重新录入,一直录到正确为止。</span><br><br>        Student s = <span class="hljs-keyword">new</span> Student();<br><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入姓名&quot;</span>);<br>        String name = sc.nextLine();<br>        s.setName(name);<br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;请输入年龄&quot;</span>);<br>           String ageStr = sc.nextLine();<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">int</span> age = Integer.parseInt(ageStr);<br>               s.setAge(age);<br>               <span class="hljs-keyword">break</span>;<br>           &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>               System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br>               <span class="hljs-keyword">continue</span>;<br>           &#125; <span class="hljs-keyword">catch</span> (AgeOutOfBoundsException e) &#123;<br>               System.out.println(e.toString());<br>               System.out.println(<span class="hljs-string">&quot;请输入一个符合范围的年龄&quot;</span>);<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-comment">/*if(age &gt;= 18 &amp;&amp; age &lt;=25)&#123;</span><br><span class="hljs-comment">               s.setAge(age);</span><br><span class="hljs-comment">               break;</span><br><span class="hljs-comment">           &#125;else&#123;</span><br><span class="hljs-comment">               System.out.println(&quot;请输入符合要求的年龄&quot;);</span><br><span class="hljs-comment">               continue;</span><br><span class="hljs-comment">           &#125;*/</span><br>       &#125;<br>        System.out.println(s);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeOutOfBoundsException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeOutOfBoundsException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeOutOfBoundsException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day05 常用API</title>
    <link href="/blog-public/2021/04/02/SAd05/"/>
    <url>/blog-public/2021/04/02/SAd05/</url>
    
    <content type="html"><![CDATA[<p>常用API</p><p>Object类<br>    概述<br>        Object是类层次结构的根类, 是一切类的祖宗.<br>        所有的类都直接或者间接的继承自Object类.<br>    方法<br>        public String toString();<br>            返回对象的字符串表示形式<br>            子类重写后,控制台直接打印会比较方便<br>        public boolean equals(对象);<br>            比较两个对象是否相等.默认比地址值<br>            子类重写后,重写后比内容.</p><p>Objects<br>    概述<br>        是Object的工具类, 包含了操作对象的一些方法<br>    方法<br>        public static boolean isNull(Object obj);<br>            判断对象是否为null<br>        public static boolean nonNull(Object obj);<br>            判断对象是否不为null</p><p>BigDecimal<br>    概述<br>        是一个比double类型更大的小数<br>        该类的精度比double更加的精确<br>    构造方法<br>        public BigDecimal(double d);<br>        public BigDecimal(String d);<br>            //推荐使用,因为更加精确<br>    成员方法<br>        基本运算<br>            public BigDecimal add(另一个BigDecimal对象)<br>                //加法<br>            public BigDecimal subtract(另一个BigDecimal对象)<br>                //减法<br>            public BigDecimal multiply(另一个BigDecimal对象)<br>                //乘法<br>            public BigDecimal divide(另一个BigDecimal对象)<br>                     //除法<br>        其他运算<br>            public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)<br>                //除法<br>            public BigDecimal setScale(精确几位，舍入模式)<br>                //保留几位精度<br>    常量:<br>        BigDecimal.ROUND_UP<br>            //舍入模式 -&gt; 进一法<br>        BigDecimal.ROUND_FLOOR<br>            //舍入模式 -&gt; 去尾法<br>        BigDecimal.ROUND_HALF_UP<br>            //舍入模式 -&gt; 四舍五入</p><p>包装类<br>    概述<br>        就是基本数据类型对应的”引用数据类型形式”<br>    作用<br>        基本数据类型和String之间的相互转换<br>    组成</p><div class="hljs code-wrapper"><pre><code>概念    装箱        把&quot;基本数据类型&quot;变为&quot;与之对应的包装类&quot;        自动装箱: 指的就是自动发生的装箱操作            JDK5    拆箱        把&quot;包装类&quot;变为&quot;与之对应的基本数据类型&quot;        自动拆箱: 指的就是自动发生的拆箱现象            JDK5</code></pre></div><p>Integer<br>    概述<br>        Integer是int类型的包装类<br>    转换<br>        String   -&gt;    int<br>            int num = Integer.parseInt(“数字类型字符串”);<br>        int   -&gt;    String<br>            String s = 数字 + “”;<br>            String s = String.valueOf(数字);</p><p>Arrays<br>    概述<br>        专门用来操作数组的工具类.<br>    方法:<br>        public static void sort(int[] arr);<br>            //对数组进行升序排列<br>        public static int binarySearch(int[] arr, int key);<br>            //二分查找数组arr中的key元素所在的索引位置.<br>            //二分查找时,要求数组必须是有序的, 而且是从小到大的顺序<br>        public static String toString(int[] arr);<br>            //返回数组的字符串形式.(“[1,2,3]”)</p><p>递归<br>    概述<br>        其实就是方法自己调用自己.<br>    要求:<br>        1.方法一定要有出口(一定要有结束的时候)<br>        2.方法一定要有规律.<br>        3.递归次数不能太多,否则会”栈内存溢出”</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day04 内部类&amp;Lambda</title>
    <link href="/blog-public/2021/04/02/SAd04/"/>
    <url>/blog-public/2021/04/02/SAd04/</url>
    
    <content type="html"><![CDATA[<h1 id="内部类-amp-Lambda"><a href="#内部类-amp-Lambda" class="headerlink" title="内部类&amp;Lambda"></a>内部类&amp;Lambda</h1><p>内部类<br>    概述<br>        方在类的内部的类,就称之为”内部类”<br>    分类<br>        成员内部类<br>            类中方法外的内部类<br>        局部内部类<br>            方法中的内部类</p><p>成员内部类(了解)<br>    位置<br>        类中方法外<br>    语法<br>        创建对象<br>            外部类名.内部类名 对象名 = new 外部类名().new 内部类名();<br>        使用对象<br>            对象名.成员变量<br>            对象名.成员方法<br>    分类<br>        静态内部类<br>            被static修饰的成员内部类<br>            外部类.内部类 对象名 = new 外部类.内部类();<br>        私有内部类<br>            被private修饰的成员内部类<br>            只能在他所在的外部类中,创建对象并使用.</p><p>局部内部类<br>    位置<br>        方法内部<br>    注意<br>        只能在方法内部进行使用<br>        局部内部类使用完毕之后, 会被立即销毁<br>    场景<br>        临时性的创建子类对象<br>        用完之后立即销毁</p><p>匿名内部类<br>    概述<br>        没有名字的局部内部类<br>        是局部内部类的简化写法<br>    格式</p><div class="hljs code-wrapper"><pre><code>注意    匿名内部类本质上是&quot;一个继承父类或实现接口的子类的对象&quot;</code></pre></div><p>Lambda<br>    概述<br>        可以理解为”是对匿名内部类的再次简化”<br>    要求<br>        父级必须是接口<br>        接口中有且仅有一个抽象方法<br>    格式<br>        (  )    -&gt;    {  }<br>        (  ) : “重写的方法”的形参<br>        {  } : “重写的方法”的方法体<br>    省略规则<br>        参数的数据类型可以省略<br>        如果参数只有一个,则()可以省略<br>        如果方法体只有一句话,则可以同时省略”{},分号和return”</p><p>Math<br>    概述<br>        包含了很多数学运算的工具类.<br>    方法<br>        public static int abs(int num);<br>            //求绝对值<br>        public static double ceil(double num);<br>                 //向上取整(取大于等于num的最小整数的double类型形式)<br>        public static double floor(double num);<br>             //向下取整(取小于等于num的最大整数的double类型形式)<br>        public static int max(int a,int b);<br>            //求两个数的最大值<br>        public static double round(double num);<br>            //四舍五入<br>        public static double pow(double a, double b);<br>            //计算a的b次幂<br>        public static double random();<br>            //产生0.0-1.0之间的随机数,包含0.0,不包含1.0</p><p>System<br>    概述<br>        包含了很多和系统有关系的方法<br>    方法<br>        public static void exit(int num);<br>            //停止虚拟机.(0代表正常停止,其他代表异常停止)<br>        public static long currentTimeMillis();<br>             //获取当前系统时间所代表的毫秒值(从1970.01.01.00:00:00开始计算)<br>        public static void arraycopy(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝长度);<br>             //数组拷贝</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内部类</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day03 接口&amp;多态</title>
    <link href="/blog-public/2021/04/02/SAd03/"/>
    <url>/blog-public/2021/04/02/SAd03/</url>
    
    <content type="html"><![CDATA[<h1 id="接口-amp-多态"><a href="#接口-amp-多态" class="headerlink" title="接口&amp;多态"></a>接口&amp;多态</h1><p>代码块<br>    概述<br>        被一对大括号包围的一块代码<br>    分类<br>        局部代码块<br>            位置<br>                方法中<br>            作用<br>                限制变量的使用范围<br>        构造代码块<br>            位置<br>                类中方法外<br>            作用<br>                抽取构造方法的重复代码<br>            注意<br>                只能抽取构造方法中开头的相同代码<br>                构造代码块是在构造方法之前执行<br>        静态代码块<br>            位置<br>                类中方法外<br>            语法<br>                static{   …    }<br>            特点<br>                在类加载时静态代码块执行<br>                静态代码块只能执行一次<br>            场景<br>                用户加载配置文件<br>                加载驱动</p><p>接口<br>    概述<br>        类中的方法全是抽象方法时, 该类就可以设置为”接口”<br>    语法<br>        定义<br>            public  interface 接口名{  }<br>        实现<br>            public class 类名  implements 接口名{   }<br>    特点<br>        接口中的方法全是抽象方法<br>        子类必须重写所有的抽象方法<br>    成员<br>        成员变量<br>            只能是静态常量<br>            默认修饰符 public static final<br>        成员方法<br>            只能是抽象方法<br>            默认修饰符 public abstract<br>        构造方法<br>            接口没有构造方法</p><p>接口新特性<br>    默认方法<br>        格式<br>            public default  返回值类型 方法名(参数…){  }<br>        注意<br>            子类可以重写, 也可以不重写, 不做强制要求<br>            如果重写,  在重写方法中不能携带default关键字<br>            如果多个接口中出现相同的默认方法, 则子类必须重写<br>            JKD8之后才能使用<br>    静态方法<br>        格式<br>            public static 返回值类型 方法名(参数…){  }<br>        注意<br>            只能通过接口名调用-&gt;”接口名.方法()”<br>            JKD8之后才能使用<br>    私有方法<br>        格式<br>            private 返回值类型 方法名(参数…){  }<br>            private static 返回值类型 方法名(参数…){  }<br>        应用<br>            一般用于抽取默认方法,或者静态方法重复部分<br>            JKD9之后才能使用</p><p>类与接口关系<br>    类与类<br>        继承关系extends<br>        只能单一继承,不能多继承,但可以多层继承<br>    类与接口<br>        实现关系Implements<br>        可以单实现,也可以多实现<br>        类可以继承父类的同时,实现多个接口<br>            必须先继承后实现<br>    接口与接口<br>        继承关系extends<br>        可以单继承, 也可以多继承</p><p>多态<br>    概述<br>        “父类/父接口”引用指向”子类对象”<br>        理解<br>             Cat c = new Cat();<br>                  //我要一只猫,你给我一只猫<br>             Animal a = new Cat();<br>                 //我要一只动物,你给我一只猫<br>    成员<br>        成员变量<br>            编译看父类, 运行看父类<br>        成员方法<br>            编译看父类, 运行看子类<br>    优缺点<br>        优点<br>            提高了代码的扩展性<br>        缺点<br>            不能使用子类独有的功能<br>    案例<br>        榨汁机<br>            TestDemo.java<br>        抓老鼠<br>            TestDemo.java</p><p>instanceof<br>    格式<br>        boolean flag = 对象  Instanceof 类型;<br>    规则<br>        判断对象是否是指定类型的对象<br>        如果是就返回true<br>        如果不是就返回false</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>接口</tag>
      
      <tag>多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day02 继承&amp;抽象</title>
    <link href="/blog-public/2021/04/02/SAd02/"/>
    <url>/blog-public/2021/04/02/SAd02/</url>
    
    <content type="html"><![CDATA[<h1 id="继承-amp-抽象"><a href="#继承-amp-抽象" class="headerlink" title="继承&amp;抽象"></a>继承&amp;抽象</h1><p>继承<br>    概述<br>        所谓继承,  和生活中的继承类似,  都是子继承父,  子就拥有了父的财产<br>        Java中的继承类似, 子类继承父类,  子类拥有父类的成员<br>    语法<br>        public class 子类 extends 父类{ }<br>    注意<br>        Java只支持单一继承, 不支持多继承,但支持多层继承<br>        构造方法不能集成<br>    优缺点<br>        优点<br>            提高代码的复用性<br>                其实就是少写代码了<br>            提高代码的维护性<br>        弊端<br>            增加了代码的耦合性<br>            降低了代码的灵活性<br>                继承就只能全部继承, 不允许部分继承<br>    成员特点<br>        成员变量<br>            就近原则<br>        成员方法<br>            就近原则<br>        构造方法<br>            子类构造方法执行之前必须先执行父类构造方法<br>                有儿子之前必须先有父亲<br>            子类默认调用父类的无参构造方法<br>            如果想调用父类的有参构造方法,可以使用”super(参数…)”<br>            如果想调用本类的有参构造发方法,可以使用”this(参数…)”, 但调用的最后, 仍然需要调用父类的构造方法</p><p>this和super<br>    this.成员<br>        找本类成员<br>    super.成员<br>        找父类成员<br>    注意<br>        super关键字是能在子类中使用</p><p>方法重写<br>    概述<br>        当父类中的方法和子类中的方法完全一模一样的时候, 这两个方法之间的关系就是”方法重写”<br>        方法重写也叫”方法覆写. 方法覆盖”<br>    特点<br>        有子父类关系<br>        子类中方法和父类中方法一模一样<br>    场景<br>        当子类对父类方法不满意的时候,就可以重写<br>    注意<br>        1.私有方法不能重写<br>        2.静态方法虽然可以书写,但不属于方法重写<br>        3.构造方法不能重写<br>        4.子类方法的权限必须大于等于父类方法权限<br>    区别<br>        方法重写Override<br>            在子父类中<br>            方法声明一模一样<br>            在方法中, 除了方法体之外的东西, 统称方法声明<br>        方法重载Overload<br>            在同一个类中<br>            方法名相同<br>            参数不同</p><p>权限修饰符<br>    private<br>        只能在本类内部访问<br>    缺省<br>        在同一个包下,可以访问<br>    protected<br>        在同一个包下, 或者在子类中, 可以访问<br>    public<br>        任何地方都可以访问</p><p>抽象<br>    关键字<br>        abstract<br>    概述<br>        被abstract修饰的类, 被称之为”抽象类”<br>        被abstract修饰的方法, 被称之为”抽象方法”<br>    特点<br>        抽象方法没有方法体<br>        抽象方法所在的类必须是抽象类<br>        子类必须重写抽象类中的所有抽象方法<br>    注意<br>        抽象类不能创建对象<br>        抽象类有构造方法<br>        抽象类中可以没有抽象方法,但抽象方法所在的类必须是抽象类<br>        抽象类的子类<br>            要么也是抽象类<br>            要么就重写抽象类中的所有抽象方法(推荐)</p><p>final<br>    概述<br>        代表最终的,不可改变的<br>    特点<br>        修饰类<br>            该类不能被继承<br>        修饰方法<br>            该方法不能被重写<br>        修饰变量<br>            基本数据类型<br>                值不允许修改<br>            引用数据类型<br>                内存地址不允许修改</p><p>代码块</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>继承</tag>
      
      <tag>抽象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day01 static</title>
    <link href="/blog-public/2021/04/02/SAd01/"/>
    <url>/blog-public/2021/04/02/SAd01/</url>
    
    <content type="html"><![CDATA[<p>分类思想<br>    概述<br>        一个类的代码太多了,写不下了,就分多个类书写<br>    拆分规则<br>        一般都拆分为三个部分<br>        “用户/界面”相关的<br>            界面层/UI层/Web层/Controller层<br>        其他代码,一般是和业务有关的<br>            业务逻辑层/Service层<br>        操作数据,进行增删改查的<br>            数据访问层/Dao层</p><p>包<br>    概述<br>        包其实就是文件夹, 当一个包中类太多的时候,可以分包存储<br>    规则<br>        包名全小写字母<br>        一般是公司域名倒着写,并且去掉www<br>            com.itheima<br>            com.baidu<br>    语法<br>        定义包<br>            语法:<br>                package 包名;<br>            位置:<br>                类的最上边<br>            意义:<br>                表示当前类所在的位置<br>        导入包<br>            语法:<br>                import  包名.类名;<br>            位置:<br>                类的上边, package的下边<br>            意义:<br>                导包,本质上其实是导入类, 相当于把类拉到了本类内部, 在本类可以直接使用被导入的类.<br>    类之间的访问<br>        相同包<br>            直接访问即可<br>        不同包<br>            先导入包,再访问<br>            通过全类名(“包名 + 类名”), 进行访问</p><p>static<br>    概述<br>        表示静态, 可以修饰成员变量. 可以修饰成员方法<br>    作用<br>        被static修饰的成员变量, 所有对象共享(共用一个)<br>        被static修饰的成员方法, 可以通过”类名.静态方法”来访问<br>    注意<br>        静态只能访问静态<br>    场景<br>        当成员变量被所有对象共享时, 可以把成员变量设置为static<br>        当想使用”类名.方法”调用方法时, 可以把成员方法设置为static</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo+GitHub/Gitee搭建个人图床</title>
    <link href="/blog-public/2021/04/02/p2/"/>
    <url>/blog-public/2021/04/02/p2/</url>
    
    <content type="html"><![CDATA[<h3 id="新建-public-仓库-gt-创建-token-gt-复制-token-一会填进PicGo插件中"><a href="#新建-public-仓库-gt-创建-token-gt-复制-token-一会填进PicGo插件中" class="headerlink" title="新建 public 仓库 -&gt; 创建 token -&gt; 复制 token ,一会填进PicGo插件中"></a>新建 public 仓库 -&gt; 创建 token -&gt; 复制 token ,一会填进PicGo插件中</h3><span id="more"></span><p>1.点击右上角头像，然后进入设置；</p><p>2.在页面左边最下找到 <code>Developer settings</code>，点击进入；</p><p>3.创建 token；</p><p>4.然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下</p><h3 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h3><p><a href="">PicGo下载</a></p><h3 id="安装成功后打开图床设置-点击GitHub图床-配置如下"><a href="#安装成功后打开图床设置-点击GitHub图床-配置如下" class="headerlink" title="安装成功后打开图床设置,点击GitHub图床,配置如下"></a>安装成功后打开图床设置,点击GitHub图床,配置如下</h3><table><thead><tr><th align="center">设定仓库名</th><th align="center">用户名/仓库名</th></tr></thead><tbody><tr><td align="center">设定分支名</td><td align="center">master或者main</td></tr><tr><td align="center">设定Token</td><td align="center">之前复制的token粘贴到这里</td></tr><tr><td align="center">指定存储路径</td><td align="center">img/(填入文件夹路径会自动在你仓库下创建同名文件夹)</td></tr><tr><td align="center">设定自定义域名(+cdn)</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/">https://cdn.jsdelivr.net/gh/用户名/仓库名/</a></td></tr></tbody></table><h3 id="设为默认图床-就可以开始使用了"><a href="#设为默认图床-就可以开始使用了" class="headerlink" title="设为默认图床,就可以开始使用了"></a>设为默认图床,就可以开始使用了</h3><h3 id="Gitee图床设置"><a href="#Gitee图床设置" class="headerlink" title="Gitee图床设置"></a>Gitee图床设置</h3><p>注册登录,创建gitee 仓库,创建token并复制</p><p>软件主页面点击插件设置,搜索gitee-uploader 1.1.2 并安装,配置如下</p><p>gitee 的repo 用户名以浏览器地址栏中的为准</p><table><thead><tr><th>repo</th><th>用户名/仓库名</th></tr></thead><tbody><tr><td>branch</td><td>master</td></tr><tr><td>token</td><td>你复制的</td></tr><tr><td>path</td><td>可而为空</td></tr><tr><td>…</td><td>…(剩下内容可为空或默认,不懂就不填)</td></tr></tbody></table><h3 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h3><p>文件-&gt;偏好设置-&gt;图像</p><p>插入图片时上传图片</p><p>上传服务设定</p><p>上传服务 picgo app</p><p>picgo 路径   你的安装路径</p><p>我的安装路径示例 C:\Program Files\PicGo\PicGo.exe</p><p>PicGo使用小技巧</p><p>好用的插件: </p><p>quick - capture 1.0.0-alpha.2</p><p>super-prefix 1.2.2</p><p>安装小窍门</p><p>安装软件不想安装在c盘可以在d盘创建一个文件夹,我的命名是develop,以后安装软件全部选这个文件夹</p>]]></content>
    
    
    <categories>
      
      <category>PicGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>PicGo</tag>
      
      <tag>个人图床</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsDeliver-A free CDN for Open Source</title>
    <link href="/blog-public/2021/04/02/p1/"/>
    <url>/blog-public/2021/04/02/p1/</url>
    
    <content type="html"><![CDATA[<p>注册<a href="https://github.com/">GitHub</a>并登录</p><p>创建public仓库</p><p>怎么使用参考官网</p><span id="more"></span><p><a href="https://www.jsdelivr.com/">jsDeliver CDN 官网</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://cdn.jsdelivr.net/gh/user/repo@version/file<br></code></pre></div></td></tr></table></figure><p>user: 用户名</p><p>repo@version: 仓库名@版本号</p><p>@: 分隔符</p><p>file: 文件名</p><p>前面的不用改,能自定义的从user开始</p>]]></content>
    
    
    <categories>
      
      <category>PicGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装与自定义主题</title>
    <link href="/blog-public/2021/04/01/h0/"/>
    <url>/blog-public/2021/04/01/h0/</url>
    
    <content type="html"><![CDATA[<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a><span id="more"></span></li></ul><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="https://nodejs.org/zh-cn/">node.js官网</a></p><p>输入 <strong>“node -v”</strong> 来测试是否成功安装</p><p>输入 <strong>“npm -v”</strong> 来测试是否成功安装</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><a href="https://git-scm.com/downloads">git官网</a> </p><p>输入 <strong>“git –version”</strong> 来测试是否成功安装</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><strong>npm是从国外服务器下载，速度慢可能出现异常，所以我们可以安装cnpm来替换npm</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 换源</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><span class="hljs-comment">#查看安装版本</span><br>cnpm -v<br></code></pre></div></td></tr></table></figure><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><p>在电脑中创建一个文件夹,右键 Git Bash Here </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init<br>cnpm install<br></code></pre></div></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs wiki">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></div></td></tr></table></figure><p>将指定文件夹里的内容复制到可以同步到远程的本地仓库里,方便备份</p><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>下载主题,并复制到themes文件夹下,修改博客根目录下_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">你下载的主题名称</span><br></code></pre></div></td></tr></table></figure><p>[^注意]: 使用git clone 下载的主题,要查看隐藏文件,删除掉.git  ,不然以后同步,本地有两个仓库会出错</p><p>修改用户名和网站默认语言</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">author:</span> <span class="hljs-string">nitto</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></div></td></tr></table></figure><h3 id="更新Hexo"><a href="#更新Hexo" class="headerlink" title="更新Hexo"></a>更新Hexo</h3><p> 将电脑的 <code>hexo v4.X.x</code> 升级到 <code>hexo v5.x.x</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用淘宝源的 cnpm 替换 npm</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g cnpm                 <span class="hljs-comment"># 升级 npm</span><br>cnpm cache clean -f                 <span class="hljs-comment"># 清除 npm 缓存</span><br><br>===更新 hexo: 进入 blog 目录，执行如下命令=== <br><span class="hljs-comment"># 更新 package.json 中的 hexo 及个插件版本</span><br>cnpm install -g npm-check           <span class="hljs-comment"># 检查之前安装的插件，都有哪些是可以升级的 </span><br>cnpm install -g npm-upgrade         <span class="hljs-comment"># 升级系统中的插件</span><br>npm-check<br>npm-upgrade<br><br><span class="hljs-comment"># 更新 hexo 及所有插件</span><br>cnpm update<br><br><span class="hljs-comment"># 确认 hexo 已经更新</span><br>hexo -v<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>gitee</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/blog-public/2021/04/01/h1/"/>
    <url>/blog-public/2021/04/01/h1/</url>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><span id="more"></span><p>文章名要用” “ 包裹,文章名前填写对应模板名称可以创建带模板的文章,写起来很方便</p><p>显示摘要</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&lt;!-- more --&gt;<br></code></pre></div></td></tr></table></figure><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo s<br></code></pre></div></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo g<br></code></pre></div></td></tr></table></figure><h3 id="部署到远程站点-以gitee为例"><a href="#部署到远程站点-以gitee为例" class="headerlink" title="部署到远程站点,以gitee为例"></a>部署到远程站点,以gitee为例</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo d<br></code></pre></div></td></tr></table></figure><p>首先要安装一个部署插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>需要在博客根目录配置文件中配置远程仓库,以gitee为例,GitHub也可以</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/用户名/仓库名.git</span>    <span class="hljs-comment">#将地址换成自己的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>开启gitee-pages服务在博客根目录配置文件中配置你远程站点网址</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">url: https:<span class="hljs-regexp">//</span>用户名.gitee.io/仓库名<br></code></pre></div></td></tr></table></figure><p>部署到远程站点之后,需要手动更新gitee-pages服务</p><h3 id="备份博客到远程仓库"><a href="#备份博客到远程仓库" class="headerlink" title="备份博客到远程仓库"></a>备份博客到远程仓库</h3><p>重装系统也不怕博客数据丢失</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#查看更改文件</span><br>git status<br>git add -A<br><br>git add .<br>提交修改到本地仓库<br>git commit -m <span class="hljs-string">&quot;第一次提交&quot;</span><br>同步本地仓库到远程<br>git push origin master<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>gitee</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
