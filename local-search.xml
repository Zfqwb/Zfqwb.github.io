<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IO流</title>
    <link href="/2021/04/19/IO%E6%B5%81/"/>
    <url>/2021/04/19/IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a><a href="https://wxqgm.gitee.io/mind-map/IO.html">IO流</a></h1><p>可交互式思维导图,点击标题查看</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外网穿透内网Linux系统22端口(SSH)教程</title>
    <link href="/2021/04/16/%E5%A4%96%E7%BD%91%E7%A9%BF%E9%80%8F%E5%86%85%E7%BD%91Linux%E7%B3%BB%E7%BB%9F22%E7%AB%AF%E5%8F%A3-SSH-%E6%95%99%E7%A8%8B/"/>
    <url>/2021/04/16/%E5%A4%96%E7%BD%91%E7%A9%BF%E9%80%8F%E5%86%85%E7%BD%91Linux%E7%B3%BB%E7%BB%9F22%E7%AB%AF%E5%8F%A3-SSH-%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>无公网ip 内网穿透实现外网免费连接内网ssh（22）端口</strong></p><span id="more"></span><h1 id="外网穿透内网Linux系统22端口-SSH-教程"><a href="#外网穿透内网Linux系统22端口-SSH-教程" class="headerlink" title="外网穿透内网Linux系统22端口(SSH)教程"></a>外网穿透内网Linux系统22端口(SSH)教程</h1><p>此教程可用于实现在外网SSH成功连接处于内网的Linux设备</p><h3 id="一、注册账号，开通免费隧道"><a href="#一、注册账号，开通免费隧道" class="headerlink" title="一、注册账号，开通免费隧道"></a>一、注册账号，开通免费隧道</h3><ol><li><h4 id="首先我们打开闪库官网，点击右上角进入控制台，注册免费账号"><a href="#首先我们打开闪库官网，点击右上角进入控制台，注册免费账号" class="headerlink" title="首先我们打开闪库官网，点击右上角进入控制台，注册免费账号"></a>首先我们打开闪库官网，点击右上角进入控制台，注册免费账号</h4></li><li><h4 id="注册完免费账号，我们登录控制台，开通免费隧道，并配置隧道信息"><a href="#注册完免费账号，我们登录控制台，开通免费隧道，并配置隧道信息" class="headerlink" title="注册完免费账号，我们登录控制台，开通免费隧道，并配置隧道信息"></a>注册完免费账号，我们登录控制台，开通免费隧道，并配置隧道信息</h4><p> <strong>我的配置信息如下：</strong></p><p> 隧道名称：自定义（可随意修改）</p><p> 内网端口：22（ssh端口）</p><p> 内网地址：127.0.0.1</p><p> 选择套餐：免费版</p><h3 id="二-下载闪库linux版本"><a href="#二-下载闪库linux版本" class="headerlink" title="二.下载闪库linux版本"></a>二.下载闪库linux版本</h3><h4 id="1、可使用wget下载或直接在官网下载并使用rz命令上传-这里我们选择第一种"><a href="#1、可使用wget下载或直接在官网下载并使用rz命令上传-这里我们选择第一种" class="headerlink" title="1、可使用wget下载或直接在官网下载并使用rz命令上传,这里我们选择第一种"></a>1、可使用wget下载或直接在官网下载并使用rz命令上传,这里我们选择第一种</h4><p> 首先连接上本地终端，在终端输入如下命令下载闪库</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget http://down.ipyingshe.com/sk_linux_64<br></code></pre></div></td></tr></table></figure><h4 id="2、然后登陆控制台，复制令牌；控制台地址：http-i-ipyingshe-com"><a href="#2、然后登陆控制台，复制令牌；控制台地址：http-i-ipyingshe-com" class="headerlink" title="2、然后登陆控制台，复制令牌；控制台地址：http://i.ipyingshe.com"></a>2、然后登陆控制台，复制令牌；控制台地址：<a href="http://i.ipyingshe.com/">http://i.ipyingshe.com</a></h4><h4 id="3-启动闪库"><a href="#3-启动闪库" class="headerlink" title="3.启动闪库"></a>3.启动闪库</h4><p> 在内网Linux中，我们刚才已经下载了闪库，现在我们启动它</p><p> 先执行如下命令赋予闪库可执行权限:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -R 777 ./sk_linux_64<br></code></pre></div></td></tr></table></figure><p> 再启动,并输入我们刚才复制过的隧道的令牌</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./sk_linux_64<br></code></pre></div></td></tr></table></figure><p> <strong>登录成功，现在您可访问xx.nat.ipyingshe.com:38609,将直接映射到您本地的127.0.0.1:22</strong></p><p> 看到以上字样，即代表穿透成功。</p><h4 id="4-连接测试"><a href="#4-连接测试" class="headerlink" title="4.连接测试"></a>4.连接测试</h4><p> 打开您常用的ssh工具，进行连接测试:</p><p> 主机地址 填写xx.nat.ipyingshe.com(您也可以通过 ping myssh.xiaomy.net 命令 得到IP，并填写在此处) <strong>（填写的时候，要注意填写的是自己隧道的映设地址和外网端口）</strong></p><p> 端口 填写 38609</p><p> <strong>测试成功</strong></p><p> 其他端口也可以穿透</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>外网穿透内网</tag>
      
      <tag>22端口</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装配置及华为云镜像加速并部署Nextcloud</title>
    <link href="/2021/04/16/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
    <url>/2021/04/16/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><span id="more"></span><p>CentOS操作系统</p><p>检查内核版本，必须是3.10及以上 ，采用命令“uname ‐r”</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uname -r<br>3.10.0-957.el7.x86_64<br></code></pre></div></td></tr></table></figure><h3 id="准备环境-安装依赖包"><a href="#准备环境-安装依赖包" class="headerlink" title="准备环境 安装依赖包"></a>准备环境 安装依赖包</h3><p>执行以下命令安装依赖包。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></div></td></tr></table></figure><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><h4 id="使用软件仓库安装"><a href="#使用软件仓库安装" class="headerlink" title="使用软件仓库安装"></a>使用软件仓库安装</h4><p>老版本的docker的命名为“docker”或 “docker-engine”，如果安装了这些版本，需要先卸载掉。<br>保存在“/var/lib/docker/”中的内容，包括图片、磁盘和网络配置等都会保留下来。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate<br></code></pre></div></td></tr></table></figure><h4 id="配置软件仓库。"><a href="#配置软件仓库。" class="headerlink" title="配置软件仓库。"></a>配置软件仓库。</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><h4 id="安装docker-ce。"><a href="#安装docker-ce。" class="headerlink" title="安装docker-ce。"></a>安装docker-ce。</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></div></td></tr></table></figure><p>这个命令总是会安装最新版本的docker-ce，如果需要安装指定版本的可以参考下面的操作：</p><p>sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io</p><h2 id="docker镜像加速（华为云实现）"><a href="#docker镜像加速（华为云实现）" class="headerlink" title="docker镜像加速（华为云实现）"></a>docker镜像加速（华为云实现）</h2><h4 id="1-登录华为云网站，注册华为云账户"><a href="#1-登录华为云网站，注册华为云账户" class="headerlink" title="1.登录华为云网站，注册华为云账户"></a>1.登录华为云网站，注册华为云账户</h4><p><a href="https://www.huaweicloud.com/">https://www.huaweicloud.com</a></p><h4 id="找到容器服务中的容器镜像服务，点击容器镜像服务"><a href="#找到容器服务中的容器镜像服务，点击容器镜像服务" class="headerlink" title="找到容器服务中的容器镜像服务，点击容器镜像服务"></a>找到容器服务中的容器镜像服务，点击容器镜像服务</h4><p><a href="https://auth.huaweicloud.com/authui/login.html?service=https://console.huaweicloud.com/swr/?region=cn-south-1&cloud_route_state=/app/swr/huaweiOfficialList#/login">容器镜像服务控制台</a></p><h4 id="点击镜像中心，然后添加镜像加速器"><a href="#点击镜像中心，然后添加镜像加速器" class="headerlink" title="点击镜像中心，然后添加镜像加速器"></a>点击镜像中心，然后添加镜像加速器</h4><h4 id="华为云官方会给出我们一个华为云加速地址"><a href="#华为云官方会给出我们一个华为云加速地址" class="headerlink" title="华为云官方会给出我们一个华为云加速地址"></a>华为云官方会给出我们一个华为云加速地址</h4><h4 id="最后把加速地址写入docker配置文件中"><a href="#最后把加速地址写入docker配置文件中" class="headerlink" title="最后把加速地址写入docker配置文件中"></a>最后把加速地址写入docker配置文件中</h4><h4 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp /lib/systemd/system/docker.service /etc/systemd/system/docker.service<br>chmod 777 /etc/systemd/system/docker.service<br>vi /etc/systemd/system/docker.service<br></code></pre></div></td></tr></table></figure><p><code>把ExecStart这一行后面的改为</code><br><code>–registry-mirror=华为云加速网址</code></p><p>把ExecStart这一行后面的改为<br>–registry-mirror=华为云加速网址</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ExecStart=/usr/bin/dockerd --registry-mirror=你的华为云加速地址<br></code></pre></div></td></tr></table></figure><h4 id="最后重启docker"><a href="#最后重启docker" class="headerlink" title="最后重启docker"></a>最后重启docker</h4><blockquote><p>systemctl daemon-reload</p></blockquote><blockquote><p>systemctl restart docker</p></blockquote><h4 id="验证docker加速配置情况"><a href="#验证docker加速配置情况" class="headerlink" title="验证docker加速配置情况"></a>验证docker加速配置情况</h4><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> docker<br></code></pre></div></td></tr></table></figure><p>这里我们看到了刚才配置的华为云docker加速地址</p><h2 id="Docker方式部署Nextcloud"><a href="#Docker方式部署Nextcloud" class="headerlink" title="Docker方式部署Nextcloud"></a>Docker方式部署Nextcloud</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>在终端执行以下命令，拉取 Nextcloud 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull nextcloud<br></code></pre></div></td></tr></table></figure><p>拉取到的 Nextcloud 镜像的 tag 是 <code>latest</code>，显示以下信息即表示拉取成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Using default tag: latest<br>latest: Pulling from library/nextcloud<br>bc51dd8edc1b: Pull complete<br>a3224e2c3a89: Pull complete<br>be7a066df88f: Pull complete<br>bfdf741d72a9: Pull complete<br>a9e612a5f04c: Pull complete<br>c026d8d0e8cb: Pull complete<br>d94096c4941c: Pull complete<br>5a16031a7587: Pull complete<br>0cf1daf9efc0: Pull complete<br>b202acb13a6c: Pull complete<br>907001e30880: Pull complete<br>2e4b329c80b2: Pull complete<br>cd1ec92e7164: Pull complete<br>8cba435f5ca6: Pull complete<br>e15a177658f6: Pull complete<br>9b26736059ce: Pull complete<br>53dbece8c17a: Pull complete<br>07158f924c2a: Pull complete<br>5ea6266119b8: Pull complete<br>e377a8cc542f: Pull complete<br>5662efc30cde: Pull complete<br>Digest: sha256:fa863d16c10387f4bae140bdd38f5591aa4b88f1292593dcffa501b9e1a76e58<br>Status: Downloaded newer image for nextcloud:latest<br>docker.io/library/nextcloud:latest<br></code></pre></div></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>执行以下命令，启动 Nextcloud 容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d --restart=always --name nextcloud -p 80:80 nextcloud<br></code></pre></div></td></tr></table></figure><p>简单解释一下上述命令：</p><ul><li>docker run ：启动一个容器</li><li>-d：后台运行容器</li><li>–restart=always：Docker 重启的时候容器也会重启</li><li>–name nextcloud：命名容器的 name 为 nextcloud，可以替代容器 id 使用</li><li>-p 80:80：将容器的 80 端口映射到服务器的 80 端口</li><li>nextcloud：要启动的镜像名称</li></ul><p>更多参数可以参考：<a href="https://hub.docker.com/_/nextcloud/">https://hub.docker.com/_/nextcloud/</a></p><p>执行之后会显示一个类似下面的长串字符，表示启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">526306c7a591205f6d2cd417384571b358e738e3c8b52c16c1fc6f1893c8535f<br></code></pre></div></td></tr></table></figure><p>也可以使用下面命令查看容器是否正常运行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker ps<br></code></pre></div></td></tr></table></figure><p>如果显示以下内容，表明容器已经在运行中了：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES<br>619d34210996        nextcloud           &quot;/entrypoint.sh apac…&quot;   1 hours ago        Up 1 hours         0.0.0.0:80-&gt;80/tcp                  nextcloud<br></code></pre></div></td></tr></table></figure><h3 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h3><p>需要注意的是，如果使用的阿里云或腾讯的服务器，要检查服务器的安全组是否开放了 80 端口，没有开放的需要开放一下。</p><p>如果使用的是本地虚拟机，需要执行以下命令开放 80 端口对外访问：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/tcp --permanent<br></code></pre></div></td></tr></table></figure><p>然后更新防火墙规则：</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></div></td></tr></table></figure><p>使用浏览器访问 http://服务器ip 即可进入初始化设置页面。</p><p>直接输入管理员用户名和密码即可，数据库使用默认的 SQLite，后面有时间会写下怎么连 MySQL，安装推荐的应用勾不勾选无所谓，安装地址被墙了，即使勾选也不会安装。</p><p>初始化成功后弹出一个欢迎页面，关闭之后就进入到首页了，</p><p>想要外网访问就要用到闪库内网穿透,下篇文写教程</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>华为云</tag>
      
      <tag>镜像加速</tag>
      
      <tag>Nextcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7更换阿里yum源</title>
    <link href="/2021/04/15/CentOS7%E6%9B%B4%E6%8D%A2%E9%98%BF%E9%87%8Cyum%E6%BA%90/"/>
    <url>/2021/04/15/CentOS7%E6%9B%B4%E6%8D%A2%E9%98%BF%E9%87%8Cyum%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一句一句执行-亲测可用"><a href="#一句一句执行-亲测可用" class="headerlink" title="一句一句执行,亲测可用"></a>一句一句执行,亲测可用</h1><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum -y install wget<br>cd /etc/yum.repos.d/<br>wget http://mirrors.aliyun.com/repo/Centos-7.repo<br>mv CentOS-Base.repo CentOS-Base.repo.bak<br>mv Centos-7.repo CentOS-Base.repo<br>yum clean all<br>yum makecache<br>yum update -y<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里yum源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建CentOS系统虚拟机</title>
    <link href="/2021/04/15/%E5%88%9B%E5%BB%BACentOS%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2021/04/15/%E5%88%9B%E5%BB%BACentOS%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机有两种"><a href="#虚拟机有两种" class="headerlink" title="虚拟机有两种"></a>虚拟机有两种</h1><span id="more"></span><h2 id="1-Windows10自带的的虚拟机"><a href="#1-Windows10自带的的虚拟机" class="headerlink" title="1.Windows10自带的的虚拟机"></a>1.Windows10自带的的虚拟机</h2><h3 id="以hyper-v为例"><a href="#以hyper-v为例" class="headerlink" title="以hyper-v为例"></a>以hyper-v为例</h3><p>没啥可说,注意点 虚拟机版本要选一代</p><p>系统选倒数第二个带桌面的,其他啥也不用选</p><h2 id="2-非Windows10自带-需要装软件的虚拟机VMware等"><a href="#2-非Windows10自带-需要装软件的虚拟机VMware等" class="headerlink" title="2.非Windows10自带,需要装软件的虚拟机VMware等"></a>2.非Windows10自带,需要装软件的虚拟机VMware等</h2><h3 id="以VMware15-7版本为例-此版本不开虚拟化可以与hyper-v在20H2版本Windows10共存-亲测"><a href="#以VMware15-7版本为例-此版本不开虚拟化可以与hyper-v在20H2版本Windows10共存-亲测" class="headerlink" title="以VMware15.7版本为例(此版本不开虚拟化可以与hyper-v在20H2版本Windows10共存(亲测))"></a>以VMware15.7版本为例(此版本不开虚拟化可以与hyper-v在20H2版本Windows10共存(亲测))</h3><p>没啥可说,跟着推荐一步步选就可以装好</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机配置静态ip并连接外网</title>
    <link href="/2021/04/15/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%B9%B6%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91/"/>
    <url>/2021/04/15/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%B9%B6%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="配置静态ip"><a href="#配置静态ip" class="headerlink" title="配置静态ip"></a>配置静态ip</h1><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用一块虚拟网卡当交换机把虚拟机和宿主机连接起来,</p><p>使其在一个局域网内,这块网卡要自己新建并设置一下内容,默认的那块网卡用来上外网.</p><h3 id="1-号段"><a href="#1-号段" class="headerlink" title="1.号段"></a>1.号段</h3><p>192.168.XXX(自己设一个).0</p><p>//号段自己选,我用的有111,137,格式</p><p>192.168.111.0</p><p>192.168.137.0</p><p>..号段在VMware里要设置,hyper里不需要单独设置</p><h3 id="2-默认网关"><a href="#2-默认网关" class="headerlink" title="2.默认网关"></a>2.默认网关</h3><p>192.168.(你的号段).1</p><p>//一般用这个</p><h3 id="3-子网掩码"><a href="#3-子网掩码" class="headerlink" title="3.子网掩码"></a>3.子网掩码</h3><p>255.255.255.0</p><h3 id="4-ipv4地址"><a href="#4-ipv4地址" class="headerlink" title="4.ipv4地址"></a>4.ipv4地址</h3><p>192.168.(你的号段).2</p><p>一般用这个,这个可以自己设置</p><p>连接成功后会显示</p><p><code>Last login: Wed Apr 14 18:56:00 2021 from 192.168.(你的号段).2</code></p><h2 id="hyper-v"><a href="#hyper-v" class="headerlink" title="hyper-v"></a>hyper-v</h2><h3 id="配置静态ip有两种"><a href="#配置静态ip有两种" class="headerlink" title="配置静态ip有两种"></a>配置静态ip有两种</h3><h4 id="系统有桌面"><a href="#系统有桌面" class="headerlink" title="系统有桌面"></a>系统有桌面</h4><p>设好网卡进行下面设置</p><p>直接设置网络设置</p><p>找到你新建的那块网卡,有线设置</p><p>ipv4那里</p><p>ipv4 method  改为手动</p><p>address第一行</p><p>地址  192.168.(你的号段).XXX(你自己设个,用自动分配的那个也行)</p><p>应用,重启一下电脑,静态ip就设好了</p><h4 id="系统没有桌面"><a href="#系统没有桌面" class="headerlink" title="系统没有桌面"></a>系统没有桌面</h4><p>改配置文件</p><p>修改虚拟机IP<br>打开虚拟机进入到network-scripts目录</p><p><code>cd /etc/sysconfig/network-scripts</code></p><p><code>vi ifcfg-eth0</code></p><p>出现ping baidu.com 报未知的服务,配置不改,多执行几次ping baidu.com就好了</p><p>PS: 不是所有的都是ifcfg-eth0文件，这个需要自己去查看。<br>主要修改一下键值：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">BOOTPROTO=static # 将dhcp设置为static<br>DEVICE=eth0 #名称<br>ONBOOT=yes # 开机启动<br>IPADDR=192.168.137.200 # 这个需要和你前面设置的IP网段一样<br>GATEWAY=192.168.137.1 # 网关<br>DNS1=192.168.137.1 # 第一个DNS<br>NETMASK=255.255.255.0 #子网掩码<br></code></pre></div></td></tr></table></figure><h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><h3 id="配置静态ip有两种-1"><a href="#配置静态ip有两种-1" class="headerlink" title="配置静态ip有两种"></a>配置静态ip有两种</h3><h4 id="系统有桌面-1"><a href="#系统有桌面-1" class="headerlink" title="系统有桌面"></a>系统有桌面</h4><p>设好网卡进行下面设置</p><p>同上</p><h4 id="系统没有桌面-1"><a href="#系统没有桌面-1" class="headerlink" title="系统没有桌面"></a>系统没有桌面</h4><p>改配置文件参考上面</p><p>设好后重启宿主机</p><p>开机,开虚拟机</p><p>用MobaXterm连接使用</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Idea常用快捷键</title>
    <link href="/2021/04/07/idea1/"/>
    <url>/2021/04/07/idea1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + O</td><td align="center">重写方法</td></tr><tr><td align="center">Ctrl + I</td><td align="center">实现方法</td></tr><tr><td align="center">ctrl + alt + shift + U</td><td align="center">某个类的向上生成UML图</td></tr><tr><td align="center">Ctrl + Alt + U</td><td align="center">某个类的向上生成UML图</td></tr><tr><td align="center">Ctrl+Alt+shift+C</td><td align="center">选中类名 copy reference(复制全类名)</td></tr><tr><td align="center">alt+8</td><td align="center">打开services</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Idea</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用过程中遇到的Error及解决办法</title>
    <link href="/2021/04/06/h2/"/>
    <url>/2021/04/06/h2/</url>
    
    <content type="html"><![CDATA[<h3 id="Error1"><a href="#Error1" class="headerlink" title="Error1"></a>Error1</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&#x27;can not read a block mapping entry; a multiline key may not be an implicit key&#x27;</span>,<br><br></code></pre></div></td></tr></table></figure><p><code>categories:  冒号后面要加空格再写分类</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改hosts解决GitHub网站无法访问</title>
    <link href="/2021/04/05/g1/"/>
    <url>/2021/04/05/g1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub官网</a></p><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h3><p> 无法访问此网站</p><p><strong>github.com</strong> 的响应时间过长。</p><p>请试试以下办法：</p><ul><li>检查网络连接</li><li><a href="chrome-error://chromewebdata/#buttons">检查代理服务器和防火墙</a></li><li><a href="javascript:diagnoseErrors()">运行 Windows 网络诊断</a></li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h3 id="1-安装Hosts-File-Editor-1-5-10-这个修改host很方便"><a href="#1-安装Hosts-File-Editor-1-5-10-这个修改host很方便" class="headerlink" title="1.安装Hosts File Editor+ 1.5.10,这个修改host很方便"></a>1.安装Hosts File Editor+ 1.5.10,这个修改host很方便</h3><h3 id="2-查询网址对应的-IP-地址"><a href="#2-查询网址对应的-IP-地址" class="headerlink" title="2.查询网址对应的 IP 地址"></a>2.查询网址对应的 IP 地址</h3><p>查询地址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>点击下面 <code>域名</code>（domain）自动跳转到 <code>ipaddress.com</code> 查询结果页面：</p><ol><li><a href="https://github.com.ipaddress.com/">github.com</a></li><li><a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></li><li><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></li></ol><h3 id="3-修改本地系统-hosts-文件-将查询到的信息按以下格式填入hosts中"><a href="#3-修改本地系统-hosts-文件-将查询到的信息按以下格式填入hosts中" class="headerlink" title="3.修改本地系统 hosts 文件,将查询到的信息按以下格式填入hosts中"></a>3.修改本地系统 hosts 文件,将查询到的信息按以下格式填入hosts中</h3><p><code>格式</code></p><p>IP 空格 域名</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">140.82.113.4 github.com<br>199.232.69.194 github.global.ssl.fastly.net<br>185.199.111.153 assets-cdn.github.com<br>185.199.110.153 assets-cdn.github.comh<br>185.199.109.153 assets-cdn.github.com<br>185.199.108.153 assets-cdn.github.com<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>连接超时</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装与自定义主题</title>
    <link href="/2021/04/01/h0/"/>
    <url>/2021/04/01/h0/</url>
    
    <content type="html"><![CDATA[<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><span id="more"></span><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="https://nodejs.org/zh-cn/">node.js官网</a></p><p>输入 <strong>“node -v”</strong> 来测试是否成功安装</p><p>输入 <strong>“npm -v”</strong> 来测试是否成功安装</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><a href="https://git-scm.com/downloads">git官网</a> </p><p>输入 <strong>“git –version”</strong> 来测试是否成功安装</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><strong>npm是从国外服务器下载，速度慢可能出现异常，所以我们可以安装cnpm来替换npm</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 换源</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><span class="hljs-comment">#查看安装版本</span><br>cnpm -v<br></code></pre></div></td></tr></table></figure><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><p>在电脑中创建一个文件夹,右键 Git Bash Here </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init<br>cnpm install<br></code></pre></div></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs wiki">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></div></td></tr></table></figure><p>将指定文件夹里的内容复制到可以同步到远程的本地仓库里,方便备份</p><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>下载主题,并复制到themes文件夹下,修改博客根目录下_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">你下载的主题名称</span><br></code></pre></div></td></tr></table></figure><p>[^注意]: 使用git clone 下载的主题,要查看隐藏文件,删除掉.git  ,不然以后同步,本地有两个仓库会出错</p><p>修改用户名和网站默认语言</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">author:</span> <span class="hljs-string">nitto</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></div></td></tr></table></figure><h3 id="更新Hexo"><a href="#更新Hexo" class="headerlink" title="更新Hexo"></a>更新Hexo</h3><p> 将电脑的 <code>hexo v4.X.x</code> 升级到 <code>hexo v5.x.x</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用淘宝源的 cnpm 替换 npm</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g cnpm                 <span class="hljs-comment"># 升级 npm</span><br>cnpm cache clean -f                 <span class="hljs-comment"># 清除 npm 缓存</span><br><br>===更新 hexo: 进入 blog 目录，执行如下命令=== <br><span class="hljs-comment"># 更新 package.json 中的 hexo 及个插件版本</span><br>cnpm install -g npm-check           <span class="hljs-comment"># 检查之前安装的插件，都有哪些是可以升级的 </span><br>cnpm install -g npm-upgrade         <span class="hljs-comment"># 升级系统中的插件</span><br>npm-check<br>npm-upgrade<br><br><span class="hljs-comment"># 更新 hexo 及所有插件</span><br>cnpm update<br><br><span class="hljs-comment"># 确认 hexo 已经更新</span><br>hexo -v<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>gitee</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2021/04/01/h1/"/>
    <url>/2021/04/01/h1/</url>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><span id="more"></span><p>文章名要用” “ 包裹,文章名前填写对应模板名称可以创建带模板的文章,写起来很方便</p><p>显示摘要</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&lt;!-- more --&gt;<br></code></pre></div></td></tr></table></figure><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo s<br></code></pre></div></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo g<br></code></pre></div></td></tr></table></figure><h3 id="部署到远程站点-以gitee为例"><a href="#部署到远程站点-以gitee为例" class="headerlink" title="部署到远程站点,以gitee为例"></a>部署到远程站点,以gitee为例</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo d<br></code></pre></div></td></tr></table></figure><p>首先要安装一个部署插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>需要在博客根目录配置文件中配置远程仓库,以gitee为例,GitHub也可以</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/用户名/仓库名.git</span>    <span class="hljs-comment">#将地址换成自己的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>开启gitee-pages服务在博客根目录配置文件中配置你远程站点网址</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">url: https:<span class="hljs-regexp">//</span>用户名.gitee.io/仓库名<br></code></pre></div></td></tr></table></figure><p>部署到远程站点之后,需要手动更新gitee-pages服务</p><h3 id="备份博客到远程仓库"><a href="#备份博客到远程仓库" class="headerlink" title="备份博客到远程仓库"></a>备份博客到远程仓库</h3><p>重装系统也不怕博客数据丢失</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#查看更改文件</span><br>git status<br>git add -A<br><br>git add .<br>提交修改到本地仓库<br>git commit -m <span class="hljs-string">&quot;第一次提交&quot;</span><br>同步本地仓库到远程<br>git push origin master<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>gitee</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb01</title>
    <link href="/2020/04/21/Javaweb01/"/>
    <url>/2020/04/21/Javaweb01/</url>
    
    <content type="html"><![CDATA[<h1 id="java-web-day01"><a href="#java-web-day01" class="headerlink" title="java web day01"></a>java web day01</h1><h2 id="1-课前说明"><a href="#1-课前说明" class="headerlink" title="1. 课前说明"></a>1. 课前说明</h2><h3 id="1-1软件介绍"><a href="#1-1软件介绍" class="headerlink" title="1.1软件介绍"></a>1.1软件介绍</h3><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20200725090055871.png" alt="image-20200725090055871"></p><h3 id="1-2-资料共享方式-feiqQ"><a href="#1-2-资料共享方式-feiqQ" class="headerlink" title="1.2. 资料共享方式(feiqQ)"></a>1.2. 资料共享方式(feiqQ)</h3><p>注意: 请不要在白天上课时下载资料,影响控屏,会导致学生卡屏,没法上课</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20200725092237554.png" alt="image-20200725092237554"></p><h2 id="2-掌握"><a href="#2-掌握" class="headerlink" title="2 掌握"></a>2 掌握</h2><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">1)</span> <span class="hljs-comment">tomcat</span> <span class="hljs-comment">安装</span><br><span class="hljs-comment">2)</span> <span class="hljs-comment">idea</span> <span class="hljs-comment">配置tomcat</span><br><span class="hljs-comment">3)</span> <span class="hljs-comment">idea</span> <span class="hljs-comment">创建web项目</span><span class="hljs-string">,</span><span class="hljs-comment">运行</span><br><span class="hljs-comment">4)</span> <span class="hljs-comment">理解</span> <span class="hljs-comment">http</span> <span class="hljs-comment">协议</span><br><span class="hljs-comment">5)</span> <span class="hljs-comment">应用</span><br><span class="hljs-comment"></span>    <span class="hljs-comment">tomcat</span> <span class="hljs-comment">发布静态资源</span><br><span class="hljs-comment"></span>    <span class="hljs-comment">servlet</span> <span class="hljs-comment">入门案例(实现</span>--&gt;<span class="hljs-comment">理解</span>--&gt;<span class="hljs-comment">掌握)</span><br></code></pre></div></td></tr></table></figure><h2 id="3-当天内容"><a href="#3-当天内容" class="headerlink" title="3. 当天内容"></a>3. 当天内容</h2><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>) <span class="hljs-keyword">javaWeb </span>基本概念<br><span class="hljs-number">2</span>) tomcat 安装及使用 <br><span class="hljs-number">3</span>) servlet入门<br></code></pre></div></td></tr></table></figure><h3 id="3-1-java-EE-规范-理解"><a href="#3-1-java-EE-规范-理解" class="headerlink" title="3.1)java EE 规范(理解)"></a>3.1)java EE 规范(理解)</h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>EE <br>sun 制定的 一套 <span class="hljs-keyword">jar </span>包,面向企业使用的,里面只有接口(规范),没有实现<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20210421111339738.png" alt="image-20210421111339738"></p><h3 id="3-2-资源-了解"><a href="#3-2-资源-了解" class="headerlink" title="3.2) 资源:(了解)"></a>3.2) 资源:(了解)</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">静态资源<br>   图片<span class="hljs-selector-class">.html</span>.css<br>动态资源<br>   jsp<br></code></pre></div></td></tr></table></figure><h3 id="3-2-架构-了解"><a href="#3-2-架构-了解" class="headerlink" title="3.2) 架构(了解)"></a>3.2) 架构(了解)</h3><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">C/S 架构<br>客户端<span class="hljs-comment">--&gt; 服务端</span><br>B/S 架构<br>浏览器端<span class="hljs-comment">--&gt;服务端</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-服务器"><a href="#3-3-服务器" class="headerlink" title="3.3)  服务器"></a>3.3)  服务器</h3><p>硬件+软件</p><p>硬件: 任何一台电脑都可以当做服务器</p><p>常见的软件</p><table><thead><tr><th>服务器名称</th><th>说明</th></tr></thead><tbody><tr><td>weblogic</td><td>实现了javaEE规范，重量级服务器，又称为javaEE容器</td></tr><tr><td>websphereAS</td><td>实现了javaEE规范，重量级服务器。</td></tr><tr><td>JBOSSAS</td><td>实现了JavaEE规范，重量级服务器。免费的。</td></tr><tr><td><strong>Tomcat</strong></td><td><strong>实现了jsp/servlet规范，是一个轻量级服务器，开源免费。</strong></td></tr></tbody></table><h3 id="3-4-tocmat安装-掌握"><a href="#3-4-tocmat安装-掌握" class="headerlink" title="3.4 tocmat安装(掌握)"></a>3.4 tocmat安装(掌握)</h3><h4 id="1-win-版本-开发用-掌握"><a href="#1-win-版本-开发用-掌握" class="headerlink" title="1) win 版本  开发用 (掌握)"></a>1) win 版本  开发用 (掌握)</h4><p>​    <img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20200725112535552.png" alt="image-20200725112535552"></p><h4 id="2-linux-生产环境-了解"><a href="#2-linux-生产环境-了解" class="headerlink" title="2) linux  生产环境(了解)"></a>2) linux  生产环境(了解)</h4><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>)  安装<span class="hljs-keyword">java</span><br><span class="hljs-keyword">2) </span> 配置环境变量<span class="hljs-keyword">JAVA_HOME</span><br><span class="hljs-keyword">3) </span> 解压tomcat<br><span class="hljs-number">4</span>)  防火墙(关闭或者放行指定端口)<br></code></pre></div></td></tr></table></figure><h4 id="3-基本的使用注意事项-知道"><a href="#3-基本的使用注意事项-知道" class="headerlink" title="3) 基本的使用注意事项(知道)"></a>3) 基本的使用注意事项(知道)</h4><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta"><span class="hljs-number">1</span>) 应用 默认输入 目录名称+页面名称<br><span class="hljs-number">2</span>) 如果目录名称是 ROOT, 则  不能输入(不用输入)<br><span class="hljs-number">3</span>) 默认访问的是 <span class="hljs-keyword">index</span>.html/ <span class="hljs-keyword">index</span>.jsp/<span class="hljs-keyword">index</span>.htm<br></code></pre></div></td></tr></table></figure><h3 id="3-5-web-项目标准目录结构-掌握"><a href="#3-5-web-项目标准目录结构-掌握" class="headerlink" title="3.5 web 项目标准目录结构(掌握)"></a>3.5 web 项目标准目录结构(掌握)</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">/项目跟路径<br><span class="hljs-comment">----html</span><br><span class="hljs-keyword">index</span>.html<br><span class="hljs-comment">----WEB-INF</span><br><span class="hljs-comment">--------web.xml</span><br><span class="hljs-comment">--------lib  放jar </span><br><span class="hljs-comment">--------classes 存放classes 和配置文件</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20210421143033939.png" alt="image-20210421143033939"></p><h3 id="3-6-idea-配置tomcat"><a href="#3-6-idea-配置tomcat" class="headerlink" title="3.6 idea 配置tomcat"></a>3.6 idea 配置tomcat</h3><h3 id="3-7-发布项目-掌握"><a href="#3-7-发布项目-掌握" class="headerlink" title="3.7  发布项目(掌握)"></a>3.7  发布项目(掌握)</h3><h4 id="3-7-1-idea-发布项目"><a href="#3-7-1-idea-发布项目" class="headerlink" title="3.7.1 idea 发布项目"></a>3.7.1 idea 发布项目</h4><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20210421145402909.png" alt="image-20210421145402909"></p><h4 id="3-7-2-外部资源直接发布-了解"><a href="#3-7-2-外部资源直接发布-了解" class="headerlink" title="3.7.2 外部资源直接发布(了解)"></a>3.7.2 外部资源直接发布(了解)</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>) 直接放到 webapps 目录(直接把war 包放到 webapps 目录)<br><span class="hljs-number">2</span>) 通过修改 conf\<span class="hljs-keyword">server</span>.xml  的方式发布项目<br>   (虚拟路径的方式,是idea采取的方式)<br>   &lt;Host&gt;<br>&lt;Context <span class="hljs-type">path</span>=&quot;/abc&quot; docBase=&quot;d:/my&quot;/&gt;<br>     &lt;/Host&gt;<br> <span class="hljs-number">3</span>)  (补充,idea 使用的方式) 在\conf\Catalina\localhost 目录，新建一个 项目名.xml 文件<br> <span class="hljs-type">xml</span> 中写入<br> &lt;Context    docBase=&quot;d:/my&quot;/&gt;<br> <br></code></pre></div></td></tr></table></figure><h3 id="3-8-idea-创建java-web项目"><a href="#3-8-idea-创建java-web项目" class="headerlink" title="3.8 idea 创建java web项目"></a>3.8 idea 创建java web项目</h3><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20210421143711335.png" alt="image-20210421143711335"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/image-20210421143733590.png" alt="image-20210421143733590"></p><h3 id="3-9-conf-server-xml-修改端口号"><a href="#3-9-conf-server-xml-修改端口号" class="headerlink" title="3.9 conf\server.xml 修改端口号"></a>3.9 conf\server.xml 修改端口号</h3><h3 id="3-10-http-协议"><a href="#3-10-http-协议" class="headerlink" title="3.10 http 协议"></a>3.10 http 协议</h3><p>请求协议:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">1) 请求行<br>2) 请求头<br>3) 空行<br>4) 请求体<br></code></pre></div></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">get</span> 请求 (没有请求体)<br><br><span class="hljs-builtin-name">GET</span> url?<span class="hljs-attribute">name</span>=zs&amp;pwd=12345  http/1.1<br>key:value  请求头<br>(空行)<br></code></pre></div></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">post 请求<br><br>POST url?<span class="hljs-attribute">name</span>=zs&amp;pwd=12345  http/1.1<br>key:value  请求头<br>(空行)<br><br><span class="hljs-attribute">gender</span>=男&amp;address=zz<br></code></pre></div></td></tr></table></figure><p>响应协议</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>) 响应行     POST http/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> 状态码 状态描述<br><span class="hljs-attribute">2</span>) 响应头<br><span class="hljs-attribute">3</span>) 空行<br><span class="hljs-attribute">4</span>) 响应体<br></code></pre></div></td></tr></table></figure><p>(了解–掌握)</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">2</span>xx  成功<br><span class="hljs-number">3</span>xx  成功<br><span class="hljs-number">4</span>XX  路径写错了(权限不足)  ,<span class="hljs-number">404</span>  路径写错了,或者配置有问题<br><span class="hljs-symbol">500 </span>  一定是java 代码有问题<br></code></pre></div></td></tr></table></figure><h3 id="3-11-Servlet"><a href="#3-11-Servlet" class="headerlink" title="3.11 Servlet"></a>3.11 Servlet</h3><p>Servlet  javaEE 规范的一部分:</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>代码想要接受浏览器请求, 必须实现该接口 ,<br>   service 方法 是处理请求的<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>form&amp;css</title>
    <link href="/2020/04/21/form&amp;css/"/>
    <url>/2020/04/21/form&amp;css/</url>
    
    <content type="html"><![CDATA[<h1 id="form-amp-css"><a href="#form-amp-css" class="headerlink" title="form&amp;css"></a><a href="https://wxqgm.gitee.io/mind-map/form&css.html">form&amp;css</a></h1><p>点上面链接查看更方便</p><iframe width="100%" height="1080px" src="https://wxqgm.gitee.io/mind-map/form&css.html"></iframe>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS+Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2020/04/20/CSS/"/>
    <url>/2020/04/20/CSS/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a href="https://wxqgm.gitee.io/mind-map/css.html">CSS</a></h1><p>点上面链接查看更方便</p><iframe width="100%" height="1080px" src="https://wxqgm.gitee.io/mind-map/css.html"></iframe>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS+Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 安装</title>
    <link href="/2020/04/20/nginx-%E5%AE%89%E8%A3%85/"/>
    <url>/2020/04/20/nginx-%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="——-安装Nginx-——"><a href="#——-安装Nginx-——" class="headerlink" title="——- 安装Nginx ——"></a>——- 安装Nginx ——</h1><h2 id="1-上传安装包"><a href="#1-上传安装包" class="headerlink" title="1.上传安装包"></a>1.上传安装包</h2><h2 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h2><h2 id="3-进入Nginx目录"><a href="#3-进入Nginx目录" class="headerlink" title="3.进入Nginx目录"></a>3.进入Nginx目录</h2><h2 id="4-安装依赖环境"><a href="#4-安装依赖环境" class="headerlink" title="4.安装依赖环境"></a>4.安装依赖环境</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">   yum -y install gcc gcc-c++<br>yum -y install pcre pcre-devel<br>yum -y install zlib zlib-devel<br>yum -y install openssl openssl-devel<br></code></pre></div></td></tr></table></figure><h2 id="5-安装Nginx"><a href="#5-安装Nginx" class="headerlink" title="5.安装Nginx"></a>5.安装Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">   ./configure<br>make<br>make install<br></code></pre></div></td></tr></table></figure><p>​    安装后在/usr/local下就会有一个nginx目录</p><p>​    ./configure: 权限不够</p><p>给文件加上可执行权限： <code>chmod +x configure</code></p><p>再输入 ./configure 就可以了;</p><h2 id="6-启动Nginx"><a href="#6-启动Nginx" class="headerlink" title="6.启动Nginx"></a>6.启动Nginx</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx/sbin</span><br>启动<br><span class="hljs-string">./nginx</span><br>停止<br><span class="hljs-string">./nginx</span> -s stop<br>重启<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></div></td></tr></table></figure><h2 id="7-查看服务状态"><a href="#7-查看服务状态" class="headerlink" title="7.查看服务状态"></a>7.查看服务状态</h2><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx<br></code></pre></div></td></tr></table></figure><h2 id="8-测试Nginx服务是否成功启动"><a href="#8-测试Nginx服务是否成功启动" class="headerlink" title="8.测试Nginx服务是否成功启动"></a>8.测试Nginx服务是否成功启动</h2><p>​    <a href="http://ip地址/">http://ip地址:80</a><br>​    不能访问请暂时关闭防火墙</p><p>//临时关闭</p><p><code>systemctl stop firewalld</code></p><h1 id="——-发布项目-——"><a href="#——-发布项目-——" class="headerlink" title="——- 发布项目 ——"></a>——- 发布项目 ——</h1><h2 id="1-创建一个toutiao目录"><a href="#1-创建一个toutiao目录" class="headerlink" title="1.创建一个toutiao目录"></a>1.创建一个toutiao目录</h2><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">cd /home<br>mkdir toutiao<br></code></pre></div></td></tr></table></figure><h2 id="2-将项目上传到toutiao目录"><a href="#2-将项目上传到toutiao目录" class="headerlink" title="2.将项目上传到toutiao目录"></a>2.将项目上传到toutiao目录</h2><h2 id="3-解压项目"><a href="#3-解压项目" class="headerlink" title="3.解压项目"></a>3.解压项目</h2><p>​    unzip web.zip</p><h2 id="4-编辑Nginx配置文件nginx-1-17-5-conf-nginx-conf"><a href="#4-编辑Nginx配置文件nginx-1-17-5-conf-nginx-conf" class="headerlink" title="4.编辑Nginx配置文件nginx-1.17.5/conf/nginx.conf"></a>4.编辑Nginx配置文件nginx-1.17.5/conf/nginx.conf</h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span>  localhost;<br><br><span class="hljs-comment">#charset koi8-r;</span><br><br><span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">root</span>   /home/toutiao;<br><span class="hljs-comment"># 你的网站存放绝对路径或相对路径</span><br><span class="hljs-attribute">index</span>  index.html index.htm;<br><span class="hljs-comment">#第一个不能访问,会访问第二个</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-关闭nginx服务"><a href="#5-关闭nginx服务" class="headerlink" title="5.关闭nginx服务"></a>5.关闭nginx服务</h2><p>​    </p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">./nginx -s stop<br></code></pre></div></td></tr></table></figure><h2 id="6-启动服务并加载配置文件"><a href="#6-启动服务并加载配置文件" class="headerlink" title="6.启动服务并加载配置文件"></a>6.启动服务并加载配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -c /</span>home<span class="hljs-regexp">/nginx-1.17.5/</span>conf/nginx.conf<br></code></pre></div></td></tr></table></figure><p>7.浏览器打开网址<br>    http://你的IP:80</p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>负载均衡</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2020/04/19/HTML/"/>
    <url>/2020/04/19/HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><a href="https://wxqgm.gitee.io/mind-map/HTML.html">HTML</a></h1><p>点上面链接查看更方便</p><iframe width="100%" height="1080px" src="https://wxqgm.gitee.io/mind-map/HTML.html"></iframe>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS+Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML入门</title>
    <link href="/2020/04/11/JavaEE-v4.0-HTML-%E6%8E%88%E8%AF%BE/"/>
    <url>/2020/04/11/JavaEE-v4.0-HTML-%E6%8E%88%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-初识HTML"><a href="#1-1-初识HTML" class="headerlink" title="1.1 初识HTML"></a>1.1 初识HTML</h2><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>网络世界已经跟我们息息相关，当我们打开一个网站，首先映入眼帘的就是一个个华丽多彩的网页。这些网页，不仅呈现着基本的内容，还具备优雅的布局和丰富的动态效果，这一切都是如何做到的呢？前端入门课程，为您一层层的揭开网页的面纱。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572518651467.png" alt="1572518651467"></p><ul><li><strong>网页的构成</strong><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a>：通常用来定义网页内容的含义和基本结构。</li><li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a>：通常用来描述网页的表现与展示效果。</li><li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a>：通常用来执行网页的功能与行为。</li></ul></li></ul><p><strong>HTML</strong>（超文本标记语言——HyperText Markup Language）是构成 Web 世界的一砖一瓦。它是一种用来告知浏览器如何组织页面的<strong>标记语言</strong>。</p><p>所谓<code>超文本Hypertext</code>，是指连接单个或者多个网站间的网页的链接。我们通过链接，就能访问互联网中的内容。</p><p>所谓<code>标记Markup</code> ，是用来注明文本，图片等内容，以便于在浏览器中显示，例如<code>&lt;head&gt;</code>,<code>&lt;body&gt;</code>等。</p><ul><li><strong>HTML发展简史【了解】</strong><ul><li>HTML 1.0在1993年6月作为互联网工程工作小组（IETF）工作草案发布（并非标准）</li><li>HTML 2.0——1995年11月作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时</li><li>HTML 3.2——1997年1月14日，W3C推荐标准</li><li>HTML 4.0——1997年12月18日，W3C推荐标准</li><li>HTML 4.01（微小改进）——1999年12月24日，W3C推荐标准</li><li>HTML5 —— 2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成。是目前最为流行的版本，提供了很多标签新特性，现代大多数浏览器已经具备了 HTML5的支持。</li></ul></li></ul><blockquote><p>扩展资料：</p><p><img src="https://cdn.jsdelivr.net/gh/Zfqwb/pic//img/css1572846317149.png" alt="1572846317149"></p><p>w3c是万维网联盟（World Wide Web Consortium，<a href="https://www.w3school.com.cn/index.html">W3C</a>），又称W3C理事会。1994年10月在麻省理工学院计算机科学实验室成立。建立者是万维网的发明者蒂姆·伯纳斯-李，负责制定web相关标准的制定。</p></blockquote><h3 id="1-1-2-HTML的组成"><a href="#1-1-2-HTML的组成" class="headerlink" title="1.1.2 HTML的组成"></a>1.1.2 HTML的组成</h3><p>HTML页面由一系列的<strong>元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">elements</a>）</strong> 组成，而元素是使用<strong>标签</strong>创建的。</p><h4 id="1）标签"><a href="#1）标签" class="headerlink" title="1）标签"></a>1）标签</h4><p>一对标签（ <a href="https://developer.mozilla.org/en-US/docs/Glossary/Tag">tags</a>）可以设置一段文字样式，添加一张图片或者添加超链接等等。 例如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天是个好日子<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在HTML中，<code>&lt;h1&gt;</code>标签表示<strong>标题</strong>，那么，我们可以使用<strong>开始标签</strong>和<strong>结束标签</strong>包围文本内容，这样其中的内容就以标题的形式显示了。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572572630907.png" alt="1572572630907"></p><p>显示效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572572990011.png" alt="1572572990011"></p><h4 id="2）属性"><a href="#2）属性" class="headerlink" title="2）属性"></a>2）属性</h4><p>HTML标签可以拥有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes">属性</a>。<strong>属性</strong>提供了有关 HTML 元素的<strong>更多的信息</strong>。我们只能在开始标签中，加入属性。通常以<code>名称=值 </code>成对的形式出现，**比如：name=’value’**。例如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>今天是个好日子!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在HTML标签中，<code>align</code>  属性表示<strong>水平对齐方式</strong>，我们可以赋值为 <code>center</code>  表示 <strong>居中</strong> 。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572576044902.png" alt="1572576044902"></p><p>显示效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572576525870.png" alt="1572576525870"></p><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h2><h3 id="1-2-1-初始页面"><a href="#1-2-1-初始页面" class="headerlink" title="1.2.1 初始页面"></a>1.2.1 初始页面</h3><h4 id="1）创建一个标准的初始化页面"><a href="#1）创建一个标准的初始化页面" class="headerlink" title="1）创建一个标准的初始化页面"></a>1）创建一个标准的初始化页面</h4><ol><li><p>右键点击创建新页面</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572585599853.png" alt="1572585599853"></p></li><li><p>自定义文件名字，比如index</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572585678711.png" alt="1572585678711"></p></li><li><p>点击ok，页面创建成功。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572585787377.png" alt="1572585787377"></p></li></ol><h4 id="2）页面说明"><a href="#2）页面说明" class="headerlink" title="2）页面说明"></a>2）页面说明</h4><ol><li><p><code>&lt;!DOCTYPE html&gt;</code>: <strong>声明文档类型</strong>。规定了HTML页面必须遵从的良好规则，从HTML5后，<code>&lt;!DOCTYPE html&gt;</code>是最短的有效的文档声明。</p><blockquote><p> 文字作为了解资料</p><p>很久以前，早期的HTML(大约1991年2月)，文档类型声明类似于链接，能自动检测错误和其他有用的东西。使用如下：    </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>然而现在没有人再这样写，需要保证每一个东西都正常工作已成为历史。</p></blockquote></li><li><p><code>&lt;html&gt;</code>：这个标签包裹了整个完整的页面，是一个<strong>根元素（顶级元素）</strong>。其他所有元素必须是此元素的后代，每篇HTML文档只有一个根元素。</p></li><li><p><code>&lt;head&gt;</code>：这个标签是一个容器，它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等。以后的章节能学到更多关于<code>&lt;head&gt;</code> 元素的内容。目前主要了解两个标签：</p><ol><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>：这个标签是页面的元数据信息，设置文档使用utf-8字符集编码，utf-8字符集包含了人类大部分的文字。基本上他能识别你放上去的所有文本内容，能够避免页面乱码问题。</li><li><code>&lt;title&gt;</code>：这个标签定义文档标题，位置出现在浏览器标签上，而不是页面正文中。在收藏页面时，它可用来描述页面。</li></ol></li><li><p><code>&lt;body&gt;</code>：包含了文档内容，你访问页面时所有显示在页面上的文本，图片，音频，游戏等等。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572577371312.png" alt="1572577371312"></p></li></ol><h3 id="1-2-2-案例实现"><a href="#1-2-2-案例实现" class="headerlink" title="1.2.2 案例实现"></a>1.2.2 案例实现</h3><ol><li><p>在初始化页面的<code> &lt;body&gt;</code>标签中，加入一对<code>&lt;p&gt;</code> 标签。<code>&lt;p&gt;</code>标签表示文本的一个段落，具有整段文本之间相分离的效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>在一对<code>&lt;p&gt;</code> 标签中，编写文本内容。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>打开浏览器查看，效果如下：</p></li></ol><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572579876293.png" alt="1572579876293"></p><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><ul><li><p>HTML是一种<strong>标记语言</strong>，用来组织页面，使用元素和属性。</p></li><li><p><strong>这个元素的主要部分有：</strong></p></li></ul><ol><li><strong>元素</strong>（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。</li><li><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 p），被左、右角括号所包围。表示元素从这里开始或者开始起作用 —— 在本例中即段落由此开始。</li><li><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。初学者常常会犯忘记包含结束标签的错误，这可能会产生一些奇怪的结果。</li><li><strong>内容</strong>（Content）：元素的内容，本例中就是所输入的文本本身。</li><li><strong>属性</strong>（Attribute）：标签的附加信息。</li></ol><ul><li><strong>在学习HTML时，要抓住两个方面：</strong></li></ul><ol><li>掌握标签所代表的含义。</li><li>掌握在标签中加入的属性的含义。</li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2 基本语法"></a>2 基本语法</h1><h2 id="2-1-关于注释"><a href="#2-1-关于注释" class="headerlink" title="2.1 关于注释"></a>2.1 <strong>关于注释</strong></h2><p>如同大部分的编程语言一样，在HTML中有一种可用的机制来在代码中书写注释。  </p><p>为了将一段HTML中的内容置为注释，你需要将其用特殊的记号<!--和-->包括起来， 比如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我在注释外！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;p&gt;我在注释内！&lt;/p&gt; --&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-2-关于标签"><a href="#2-2-关于标签" class="headerlink" title="2.2 关于标签"></a>2.2 关于标签</h2><h3 id="2-2-1-空元素"><a href="#2-2-1-空元素" class="headerlink" title="2.2.1 空元素"></a>2.2.1 空元素</h3><p>不是所有元素都拥有开始标签，内容和结束标记。一些元素只有一个标签，叫做空元素。它是在开始标签中进行关闭的。例子如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">第一行文档<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>第二行文档<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-2-嵌套元素"><a href="#2-2-2-嵌套元素" class="headerlink" title="2.2.2 嵌套元素"></a>2.2.2 嵌套元素</h3><p>你也可以把元素放到其它元素之中——这被称作嵌套。比如，我们想要强调<code>第一个</code>，可以将<code>&lt;b&gt;</code>标签包围第一个，这样<code>b标签</code>就是嵌套在了<code>p标签</code>中：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>第一个<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-3-块级和行内"><a href="#2-2-3-块级和行内" class="headerlink" title="2.2.3 块级和行内"></a>2.2.3 块级和行内</h3><h4 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h4><p>在HTML中有两种重要元素类别，块级元素和内联元素。</p><ul><li><p><strong>块级元素</strong>：</p><p><strong>独占一行</strong>。块级元素（block）在页面中以块的形式展现。相对于其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。比如<code>&lt;p&gt;</code> ，<code>&lt;hr&gt;</code>，<code>&lt;li&gt;</code> ，<code>&lt;div&gt;</code>等。</p></li><li><p><strong>行内元素</strong></p><p><strong>行内显示</strong>。行内元素不会导致换行。通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。比如<code>&lt;b&gt;</code>，<code>&lt;a&gt;</code>，<code>&lt;i&gt;</code>，<code>&lt;span&gt;</code> 等。</p><blockquote><p>注意：一个块级元素不会被嵌套进内联元素中，但可以嵌套在其它块级元素中。</p></blockquote></li></ul><h4 id="2）div和span"><a href="#2）div和span" class="headerlink" title="2）div和span"></a>2）div和span</h4><ul><li><p><code>&lt;div&gt;</code> 是一个通用的内容容器，并没有任何特殊语义。它可以被用来对其它元素进行分组，一般用于样式化相关的需求。它是一个<strong>块级元素</strong>。</p></li><li><p><code> &lt;span&gt;</code> 是短语内容的通用行内容器，并没有任何特殊语义。它可以被用来编组元素以达到某种样式。它是一个<strong>行内元素</strong>。</p><blockquote><p>注意：div和span在页面布局中有重要作用。</p></blockquote></li></ul><h2 id="2-3-关于属性"><a href="#2-3-关于属性" class="headerlink" title="2.3 关于属性"></a>2.3 关于属性</h2><blockquote><p>【重点讲解】</p><p>属性作为HTML的重要部分，这里强调属性的格式和作用。</p></blockquote><p>标签属性，主要用于拓展标签。属性包含元素的额外信息，这些信息不会出现在实际的内容中。但是可以改变标签的一些行为或者提供数据，属性总是以<code>name = value</code>的格式展现。</p><ul><li><p>属性名：同一个标签中，属性名不得重复。</p></li><li><p>大小写：属性和属性值对大小写不敏感。不过W3C标准中，推荐使用小写的属性/属性值。</p></li><li><p>引号：双引号是最常用的，不过使用单引号也没有问题。</p></li><li><p>常用属性：</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>class</td><td>定义元素类名，用来选择和访问特定的元素</td></tr><tr><td>id</td><td>定义元素唯一标识符，在整个文档中必须是唯一的</td></tr><tr><td>name</td><td>定义元素名称，可以用于提交服务器的表单字段</td></tr><tr><td>value</td><td>定义在元素内显示的默认值</td></tr><tr><td>style</td><td>定义CSS样式，这些样式会覆盖之前设置的样式（第一天简单了解，第二天主要内容）</td></tr></tbody></table></li></ul><h2 id="2-4-特殊字符"><a href="#2-4-特殊字符" class="headerlink" title="2.4 特殊字符"></a>2.4 特殊字符</h2><blockquote><p>了解讲解：</p><p>内容简单，迅速带过。</p></blockquote><p>在HTML中，字符 <code>&lt;</code>, <code>&gt;</code>,<code>&quot;</code>,<code>&#39;</code> 和 <code>&amp;</code> 是特殊字符. 它们是HTML语法自身的一部分, 那么你如何将这些字符包含进你的文本中呢</p><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>空格</td><td><code>&amp;nbsp;</code></td></tr></tbody></table><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p>HTML的基本语法比较简单，在使用的过程中注意写法即可。</p><h1 id="3-HTML案例-新闻文本"><a href="#3-HTML案例-新闻文本" class="headerlink" title="3 HTML案例-新闻文本"></a>3 HTML案例-新闻文本</h1><blockquote><p>重点讲解：</p><ol><li>div布局的基本方式</li><li>文本标签的基本使用</li></ol></blockquote><p>文本结构的页面基本是由<strong>标题</strong>和<strong>段落</strong>构成的，内容结构化会使读者的阅读体验更轻松。</p><h2 id="3-1-案例效果"><a href="#3-1-案例效果" class="headerlink" title="3.1 案例效果"></a>3.1 案例效果</h2><p>显示新闻文本。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572834363086.png" alt="1572834363086"></p><h2 id="3-2-案例分析"><a href="#3-2-案例分析" class="headerlink" title="3.2 案例分析"></a>3.2 案例分析</h2><h3 id="3-2-1-div样式布局"><a href="#3-2-1-div样式布局" class="headerlink" title="3.2.1 div样式布局"></a>3.2.1 div样式布局</h3><p>文本由几部分构成，我们可以使用div将页面分割布局。先来了解一下，使用div如何进行简单的布局。</p><p>在head标签中，通过style标签加入样式。</p><p><strong>基本格式：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">格式:<br>&lt;style&gt;<br>    标签名&#123;<br>        属性名:属性值;<br>    &#125;<br>&lt;/style&gt;<br><br></code></pre></div></td></tr></table></figure><p><strong>多个属性名格式：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    标签名&#123;<br><span class="css">        属性名<span class="hljs-number">1</span>:属性值<span class="hljs-number">1</span>;</span><br><span class="css">        属性名<span class="hljs-number">2</span>:属性值<span class="hljs-number">2</span>;</span><br><span class="css">        属性名<span class="hljs-number">3</span>:属性值<span class="hljs-number">3</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573193872947.png" alt="1573193872947"></p><p><strong>div的多样式：</strong></p><p>一个属性名可以含有多个值，同时设置多样式。</p><p>格式:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    标签名&#123;<br><span class="css">        属性名:属性值<span class="hljs-number">1</span> 属性值<span class="hljs-number">2</span> 属性值<span class="hljs-number">3</span>; </span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><blockquote><p>【提示】</p><p>为了布局方便，我们通常可以先设置边框的样式，进行布局。结束后，再去掉边框，直观展示完整界面。</p></blockquote><h3 id="3-2-2-文本标签"><a href="#3-2-2-文本标签" class="headerlink" title="3.2.2 文本标签"></a>3.2.2 文本标签</h3><p>使用文本内容标签设置文字基本样式。</p><table><thead><tr><th>标签名</th><th>作用</th></tr></thead><tbody><tr><td>p</td><td>表示文本的一个段落</td></tr><tr><td>h</td><td>表示文档标题，<code>&lt;h1&gt;–&lt;h6&gt;</code> ，呈现了六个不同的级别的标题，<code>&lt;h1&gt;</code> 级别最高，而 <code>&lt;h6&gt;</code> 级别最低</td></tr><tr><td>hr</td><td>表示段落级元素之间的主题转换，一般显示为水平线</td></tr><tr><td>li</td><td>表示列表里的条目。</td></tr><tr><td>ul</td><td>表示一个无序列表，可含多个元素，无编号显示。</td></tr><tr><td>ol</td><td>表示一个有序列表，通常渲染为有带编号的列表</td></tr><tr><td>em</td><td>表示文本着重，一般用斜体显示</td></tr><tr><td>strong</td><td>表示文本重要，一般用粗体显示</td></tr><tr><td>font</td><td>表示字体，可以设置样式（已过时）</td></tr><tr><td>i</td><td>表示斜体</td></tr><tr><td>b</td><td>表示加粗文本</td></tr></tbody></table><blockquote><p>【建议】</p><p>文本标签，建议视频老师根据PPT，准备材料，简单演示即可。</p></blockquote><p><strong>重点演示li的不换行效果：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span>&#123;    <span class="hljs-attribute">display</span>: inline; // 内联样式,有宽度,无高度&#125;<br><span class="hljs-selector-tag">li</span>&#123;    <span class="hljs-attribute">display</span>: inline-block; // 内联样式,有宽度,有高度&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-使用标签"><a href="#3-3-使用标签" class="headerlink" title="3.3 使用标签"></a>3.3 使用标签</h2><ol><li>简单布局，使用div标签。</li><li>文本样式，使用基本文本标签。</li></ol><h2 id="3-4-实现步骤"><a href="#3-4-实现步骤" class="headerlink" title="3.4 实现步骤"></a>3.4 实现步骤</h2><ol><li>创建初始页面。</li><li>使用div标签划分区域（标题，作者，副标题，正文），设置div样式。</li><li>编辑正文。<ol><li>使用h1标签加入标题。</li><li>使用em标签加入作者信息。</li><li>使用hr标签加入分割线。</li><li>使用h3标签加入副标题。</li><li>使用p标签加入正文。</li><li>使用ol标签，li标签加入列表信息。</li><li>使用strong标签，加入文字强调效果。</li></ol></li></ol><h1 id="4-HTML案例-头条页面"><a href="#4-HTML案例-头条页面" class="headerlink" title="4 HTML案例-头条页面"></a>4 HTML案例-头条页面</h1><h2 id="4-1-案例效果"><a href="#4-1-案例效果" class="headerlink" title="4.1 案例效果"></a>4.1 案例效果</h2><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/anli2.jpg"> </p><h2 id="4-2-案例分析"><a href="#4-2-案例分析" class="headerlink" title="4.2 案例分析"></a>4.2 案例分析</h2><h3 id="4-2-1-div布局的进阶"><a href="#4-2-1-div布局的进阶" class="headerlink" title="4.2.1 div布局的进阶"></a>4.2.1 div布局的进阶</h3><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572917008322.png" alt="1572917008322"></p><p>想要将div布局成案例效果，首先需要对多个div进行区分，再分别设置每一个div自身的效果。</p><h4 id="1）div的class值"><a href="#1）div的class值" class="headerlink" title="1）div的class值"></a>1）div的class值</h4><p>首先编写三个div，设置边框样式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">     <span class="hljs-selector-tag">div</span>&#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573522670785.png" alt="1573522670785"></p><p>发现通过div设置的样式都是一致的，无法个性化布局。如何区分不同的div呢？ </p><p>使用class的值，格式：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br>.class值&#123;<br>    属性名:属性值;<br>&#125;<br><br>&lt;标签名 class=&quot;class值&quot;&gt;  <br> 提示: class是自定义的值<br></code></pre></div></td></tr></table></figure><p>所以，使用class属性值，可以帮助我们区分div，更加精确的设置标签的样式。</p><h4 id="2）浮动布局和清除"><a href="#2）浮动布局和清除" class="headerlink" title="2）浮动布局和清除"></a>2）浮动布局和清除</h4><p>主体部分分为三列，而div是独占一行的，所以想要使用div布局，就还需要加入<code>浮动</code> 属性。</p><ul><li><p><strong>概念</strong></p><p><strong>float</strong>：指定一个元素应沿其容器的左侧或右侧放置，允许文本或者内联元素环绕它，该元素从网页的正常流动中移除，其他部分保持正常文档流顺序。</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;!-- 加入浮动 --&gt;<br><span class="hljs-attribute">float</span>：<span class="hljs-attribute">none</span>；不浮动<br><span class="hljs-attribute">float</span>：<span class="hljs-attribute">left</span>；左浮动<br><span class="hljs-attribute">float</span>：<span class="hljs-attribute">right</span>；右浮动<br><br>&lt;!-- 清除浮动 --&gt;<br><span class="hljs-attribute">clear</span>：both；清除两侧浮动，此元素不再收浮动元素布局影响。<br></code></pre></div></td></tr></table></figure></li></ul><ol><li>加入三部分div</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572917214272.png" alt="1572917214272"></p><ol start="2"><li>浮动布局</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.center</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">59%</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20%</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>至此完成左中右三部分的布局。</p><ol start="3"><li>加入<code>footer</code> 部分</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">.footer&#123;<br>   border: 5px solid blue;<br> &#125;<br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572920012569.png" alt="1572920012569"></p><p>发现蓝色<code>footer</code>的div，延续正常文档流布局，摆放在<code>navbar</code>的下方，与浮动元素重叠。想要清除浮动影响，所以要设置清除浮动属性<code>clear</code>。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">.footer&#123;<br>       border: 5px solid blue;<br> clear: both;  <br> &#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><ol start="4"><li>设置<code>center</code></li></ol><p>增加<code>center</code> 高度，完成基本的布局效果。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">59%</span>;<br>            <span class="hljs-attribute">float</span>: left;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br> &#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1572920681328.png" alt="1572920681328"></p><h3 id="4-2-2-设置背景"><a href="#4-2-2-设置背景" class="headerlink" title="4.2.2 设置背景"></a>4.2.2 设置背景</h3><ul><li><p><strong>设置背景的格式</strong>：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">背景色:<br> background-color: black;<br>背景图:<br> background-image: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../img/bg.png&quot;</span>);<br></code></pre></div></td></tr></table></figure></li></ul><p>请设置如下布局，效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573527057652.png" alt="1573527057652"></p><p>代码实现</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- 简化版--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">666px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: gray;</span><br>        &#125;<br><span class="css">        <span class="hljs-comment">/*左侧分享*/</span></span><br>        .left &#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10%</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br>        &#125;<br><br><span class="css">        <span class="hljs-comment">/*中间文本*/</span></span><br>        .center &#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<span class="hljs-comment">/*最后去除边框宽度恢复为60%*/</span></span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../img/star.gif&quot;</span>);</span><br>        &#125;<br><br><span class="css">        <span class="hljs-comment">/*右侧广告*/</span></span><br>        .right &#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10%</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br>        &#125;<br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="4-2-3-图片标签"><a href="#4-2-3-图片标签" class="headerlink" title="4.2.3 图片标签"></a>4.2.3 图片标签</h3><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>img</strong></td><td>可以显示一张图片(本地或网络)</td><td><strong>src属性</strong>，这是一个必需的属性，表示图片的地址。</td></tr></tbody></table><p>其他属性：</p><table><thead><tr><th>属性名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>title</strong></td><td>鼠标悬停（hover）时显示文本。</td><td></td></tr><tr><td><strong>alt</strong></td><td>图形不显示时的替换文本。</td><td></td></tr><tr><td><strong>height</strong></td><td>图像的高度。</td><td></td></tr><tr><td><strong>width</strong></td><td>图像的宽度。</td><td></td></tr></tbody></table><h3 id="4-2-4-超链接"><a href="#4-2-4-超链接" class="headerlink" title="4.2.4 超链接"></a>4.2.4 超链接</h3><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>a</strong></td><td>表示超链接。</td><td><strong>href属性</strong>，表示超链接指向的URL地址。</td></tr></tbody></table><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>target</td><td>页面的打开方式(_self当前页   _blank新标签页)。</td></tr></tbody></table><p><strong>去掉下划线</strong></p><p>根据某些样式的布局需求，去除下划线更为美观。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123; <br>    <span class="hljs-attribute">text-decoration</span>:none;  // <span class="hljs-attribute">none</span> 表示不显示<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-3-使用标签"><a href="#4-3-使用标签" class="headerlink" title="4.3 使用标签"></a>4.3 使用标签</h2><ol><li>使用div标签，设置布局，背景和浮动等。</li><li>基本文本标签</li><li>图片标签</li><li>超链接标签</li></ol><h2 id="4-4-实现步骤"><a href="#4-4-实现步骤" class="headerlink" title="4.4 实现步骤"></a>4.4 实现步骤</h2><ol><li>创建初始页面，拷贝图片等素材。</li><li>整体布局。</li><li>实现顶部条（图片）。</li><li>实现导航条（图片）。</li><li>实现左侧分享区域（图片）。</li><li>实现中间正文区域（文本+图片）。</li><li>实现右侧广告区域（图片）。</li><li>实现底部页脚（链接）。</li></ol><h3 id="4-5-2-实现顶部条"><a href="#4-5-2-实现顶部条" class="headerlink" title="4.5.2 实现顶部条"></a>4.5.2 实现顶部条</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_bar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/j1.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>样式代码</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br>       <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573011521613.png" alt="1573011521613"></p><h3 id="4-5-3-实现导航条"><a href="#4-5-3-实现导航条" class="headerlink" title="4.5.3 实现导航条"></a>4.5.3 实现导航条</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav_bar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/j2.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 加入分割线  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>样式代码</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">hr &#123;<br>      <span class="hljs-attribute">color</span>: lightgrey;<br>      size: <span class="hljs-number">1px</span>;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573021667328.png" alt="1573021667328"></p><p>###4.5.4 实现左部分享</p><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/j3.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573021956375.png" alt="1573021956375"></p><h3 id="4-5-5-实现中部正文"><a href="#4-5-5-实现中部正文" class="headerlink" title="4.5.5 实现中部正文"></a>4.5.5 实现中部正文</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>支付宝特权福利！芝麻分600以上用户惊喜，网友：幸福来得突然？<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;gray&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span> 作者 2019-11-11 11:11:11<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>支付宝特权福利！芝麻分600以上用户惊喜，网友：幸福来得突然？<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            这些年，马云的风头正盛，但是上个月他毅然辞去了阿里巴巴的职务。而马云所做的很多事情也的确改变了这个世界，特别是在移动支付领域，更是走在了世界的前列。如今中国的移动支付已经成为老百姓的必备，支付宝对中国社会的变革都带来了深远的影响。不过马云依然没有满足，他认为移动互联网将会成为人类的基础设施，而且这里面的机会和各种挑战还非常多。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            支付宝的诞生就是为了解决淘宝网的客户们的买卖问题，而随着支付宝的用户的不断增加，支付宝也推出了一系列的附加功能。比如生活缴费、转账汇款、还信用卡、<br>            车主服务、公益理财等，往简单的说，支付宝既可以满足人们的日常生活，又可以利用芝麻信用进行资金周转服务。除了芝麻分能够进行周转以外，互联网信用体系 下的产品多多，我们对比以下几个产品看看区别:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                蚂蚁借呗，芝麻分600并且受到邀请开通福利，这个就是支付宝贷款，直接秒杀了银行贷款和线下金融公司，是现在支付宝用户使用最多的。<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                微粒贷：于2015年上线，主要面向QQ和微信征信极好的用户而推出，受到邀请才能申请开通，额度最高有30万，难度较大<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                蚂蚁巴士：这个在微信 蚂蚁巴士 公众平台申请,对于信用分要求530分以上才可以,额度1-30万不等，目前非常火爆<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/1.jpg&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            说起支付宝中的芝麻信用功能，相信更是受到了许多人的推崇，因为随着自己使用的不断增多，信用分会慢慢提高，而达到了一个阶段，就可以获得许多的福利。而当<br>            我们的芝麻信用分可以达到600分以上的时候，会有令我们想象不到的惊喜，接下来就让我们一起来看看，具体都有哪些惊喜吧。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>一、芝麻分600以上福利之信用购。<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>            网购相信大家都不陌生，但是很多时候，网购都有一个通病，就是没办法试用，导致很多人买了很多自己不喜欢的东西。但是只要你的支付宝芝麻分在650及以上，就能立马享有0元下单，收到货使用满意了再进行付款。还能享用美食的专属优惠，是不是很耐斯<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>二、芝麻分600以上福利之信用免押。<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>芝麻信用与木鸟短租联合推出信用住宿服务，芝麻分600及以上的用户可享受免押入住特权。木鸟短租拥有全国50万套房源，是国内领先的短租民宿预订平台。包括大家知道的飞猪信用住，大部分酒店可以免押金入住，离店再交钱。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/2.jpg&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> 三、芝麻分600以上福利之国际驾照。<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>我们经常听说的可能只是中国驾照，但现在芝麻分已经应用到了国际领域，只要你的芝麻分够550就可以免费办理国际驾照，也有不少人非常佩服马云，一个简单的芝麻分居然有如此大的功能，也从侧面反应出来马云在国际上的地位，这个国际驾照是由新西兰、德国、澳大利亚联合认证，可以在全球200多个国家通行，相信大家一定都有一个自驾全球的梦想吧，而现在支付宝就给了你一把钥匙，剩下的就你自己搞定了！有没有想带着你的女神来一次浪漫之旅呢？<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            随着互联网对我们生活的改变越来越大，信用这一词也被大家推上风口浪尖，不论是生活出行，还是其他的互联网服务，与信用体系已经密不可分了，马云当初说道，找老婆需要拼芝麻分，如今似乎也要成为现实，那么你们的芝麻分有多少了呢？<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>样式代码</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">60%</span>;  <span class="hljs-comment">/*最后去除边框宽度恢复为60%*/</span><br>          <span class="hljs-attribute">float</span>: left;            <br> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-5-6-实现右侧广告"><a href="#4-5-6-实现右侧广告" class="headerlink" title="4.5.6 实现右侧广告"></a>4.5.6 实现右侧广告</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad1.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad2.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad3.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad1.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad2.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_ad&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/ad3.jpg&quot;</span>   &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573025524199.png" alt="1573025524199"></p><h3 id="4-5-7-实现底部页脚"><a href="#4-5-7-实现底部页脚" class="headerlink" title="4.5.7 实现底部页脚"></a>4.5.7 实现底部页脚</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>关于黑马<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>帮助中心<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>开放平台<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>诚聘英才<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联系我们<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>法律声明<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>隐私政策<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>知识产权<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>廉正举报<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>样式代码</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><br><span class="hljs-selector-class">.footer</span> &#123;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573525055143.png" alt="1573525055143"></p><h1 id="5-HTML案例-登录页面"><a href="#5-HTML案例-登录页面" class="headerlink" title="5 HTML案例-登录页面"></a>5 HTML案例-登录页面</h1><h2 id="5-1-案例效果"><a href="#5-1-案例效果" class="headerlink" title="5.1 案例效果"></a>5.1 案例效果</h2><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573530051845.png" alt="1573530051845"></p><h2 id="5-2-案例分析"><a href="#5-2-案例分析" class="headerlink" title="5.2 案例分析"></a>5.2 案例分析</h2><h3 id="5-2-1-表单标签"><a href="#5-2-1-表单标签" class="headerlink" title="5.2.1 表单标签"></a>5.2.1 表单标签</h3><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>form</strong></td><td>表示表单，是用来收集用户输入信息并向 Web 服务器提交的一个容器</td><td></td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> &gt;</span><br>    //表单元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>表单的属性</strong></p><table><thead><tr><th>属性名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>action</strong></td><td>处理此表单信息的Web服务器的URL地址</td><td></td></tr><tr><td><strong>method</strong></td><td>提交此表单信息到Web服务器的方式</td><td>可能的值有get和post，默认为get</td></tr><tr><td><strong>autocomplete</strong></td><td>自动补全，指示表单元素是否能够拥有一个默认值，配合input标签使用</td><td>HTML5</td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 一个简单的表单，会发送一个 GET 请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/web/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 一个简单的表单，发送 POST 请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/web/reg&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>GET与POST说明：</strong></p><p><code>post</code>：指的是 HTTP <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5">POST 方法</a>；表单数据会包含在表单体内然后发送给服务器。</p><p><code>get</code>：指的是 HTTP <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3">GET 方法</a>；表单数据会附加在 <code>action</code> 属性的URI中，并以 ‘?’ 作为分隔符，然后这样得到的 URI 再发送给服务器。</p><p>GET方式举例：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573034215181.png" alt="1573034215181"></p><p><strong>GET与POST对比：</strong></p><table><thead><tr><th></th><th>地址栏可见</th><th>数据安全</th><th>数据大小</th></tr></thead><tbody><tr><td>GET</td><td>可见</td><td>不安全</td><td>有限制（取决于浏览器）</td></tr><tr><td>POST</td><td>不可见</td><td>相对安全</td><td>无限制</td></tr></tbody></table><h3 id="5-2-2-表单元素入门"><a href="#5-2-2-表单元素入门" class="headerlink" title="5.2.2 表单元素入门"></a>5.2.2 表单元素入门</h3><p>表单元素指的是 input 元素、复选框、下拉框、提交按钮等等。</p><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>**label **</td><td>表单元素的说明，配合表单元素使用</td><td>for属性值为相关表单元素的id属性值</td></tr><tr><td><strong>input</strong></td><td>表单中输入控件，多种输入类型，用于接受来自用户数据</td><td>type属性值决定输入类型</td></tr><tr><td><strong>button</strong></td><td>页面中可点击的按钮，可以配合表单进行提交</td><td>type属性值决定按钮类型</td></tr></tbody></table><h4 id="1）简单的文本输入框"><a href="#1）简单的文本输入框" class="headerlink" title="1）简单的文本输入框"></a>1）简单的文本输入框</h4><ul><li><p>label标签：表单的说明。</p><ul><li>for属性值：匹配input标签的id属性值</li></ul></li><li><p>input标签：输入控件。</p><ul><li>type属性：表示输入类型，text值为普通文本框</li><li>id属性：表示标签唯一标识</li><li>name属性：表示标签名称</li><li>value属性：表示标签数据值</li></ul></li></ul><p><strong>代码实现：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>效果如图：</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573035233328.png" alt="1573035233328"></p><h4 id="2）提交用户名的表单"><a href="#2）提交用户名的表单" class="headerlink" title="2）提交用户名的表单"></a>2）提交用户名的表单</h4><ul><li>button标签：表示按钮。<ul><li>type属性：表示按钮类型，submit值为提交按钮。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573031401191.png" alt="1573031401191"></p><h3 id="5-2-3-关于属性值"><a href="#5-2-3-关于属性值" class="headerlink" title="5.2.3 关于属性值"></a>5.2.3 关于属性值</h3><h4 id="1）NAME和VALUE属性"><a href="#1）NAME和VALUE属性" class="headerlink" title="1）NAME和VALUE属性"></a>1）<strong>NAME和VALUE属性</strong></h4><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td><strong>name</strong></td><td><code>&lt;input&gt;</code>的名字，在提交整个表单数据时，可以用于区分属于不同<code>&lt;input&gt;</code>的值</td></tr><tr><td><strong>value</strong></td><td>这个<code>&lt;input&gt;</code>元素当前的值，允许用户通过页面输入</td></tr></tbody></table><p>使用方式：</p><p>以name属性值作为键，value属性值作为值，构成键值对提交到服务器，多个键值对浏览器使用<code>&amp;</code>进行分隔。</p><p>举例：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573087321222.png" alt="1573087321222"></p><h4 id="2）TYPE属性"><a href="#2）TYPE属性" class="headerlink" title="2）TYPE属性"></a>2）<strong>TYPE属性</strong></h4><ul><li><p><strong>input标签的type属性</strong></p><blockquote><p>【建议】</p><p>这是今天的重点讲解内容，type的值决定输入的类型</p></blockquote><ul><li><strong>基本的文本属性</strong></li></ul><table><thead><tr><th>属性值</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>text</td><td>单行文本字段</td><td></td></tr><tr><td>password</td><td>单行文本字段，值被遮盖</td><td></td></tr><tr><td>email</td><td>用于编辑 e-mail 的字段，可以对e-mail地址进行简单校验</td><td>HTML5</td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span> login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>  <img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573089370881.png" alt="1573089370881"></p></li></ul><ul><li><p><strong>单选多选属性</strong></p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>radio</td><td>单选按钮。 1. 在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值；一个单选按钮组中是，同一时间只有一个单选按钮可以被选择。 2. 必须使用 value 属性定义此控件被提交时的值。 3. 使用checked 必须指示控件是否缺省被选择。</td></tr><tr><td>checkbox</td><td>复选框。 1. 必须使用 value 属性定义此控件被提交时的值。 2. 使用 checked 属性指示控件是否被选择。 3. 选中多个值时，所有的值会构成一个数组而提交到Web服务器</td></tr></tbody></table><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>性别:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span>/&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>女<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>爱好: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sport&quot;</span>/&gt;</span> 体育<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tech&quot;</span>/&gt;</span> 科技<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fun&quot;</span> /&gt;</span> 娱乐<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span> 短视频<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573090505218.png" alt="1573090505218"></p></li><li><p><strong>按钮属性</strong></p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>button</td><td>无行为按钮，用于结合JavaScript实现自定义动态效果</td></tr><tr><td>submit</td><td>提交按钮，用于提交表单数据。</td></tr><tr><td>reset</td><td>重置按钮，用于将表单中内容恢复为默认值。</td></tr><tr><td>image</td><td>图片提交按钮。必须使用 src 属性定义图片的来源及使用 alt 定义替代文本。还可以使用 height 和 width 属性以像素为单位定义图片的大小。</td></tr></tbody></table></li></ul><ul><li><p><strong>HTML5新增的type值</strong></p><table><thead><tr><th>属性值</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>date</td><td>HTML5 用于输入日期的控件</td><td>年，月，日，不包括时间</td></tr><tr><td>time</td><td>HTML5 用于输入时间的控件</td><td>不含时区</td></tr><tr><td>datetime-local</td><td>HTML5 用于输入日期时间的控件</td><td>不包含时区</td></tr><tr><td>number</td><td>HTML5 用于输入浮点数的控件</td><td></td></tr><tr><td>range</td><td>HTML5 用于输入不精确值控件</td><td>max-规定最大值<br/>min-规定最小值 <br/>step-规定步进值 <br/>value-规定默认值</td></tr><tr><td>search</td><td>HTML5 用于输入搜索字符串的单行文本字段</td><td>可以点击<code>x</code>清除内容</td></tr><tr><td>tel</td><td>HTML5 用于输入电话号码的控件</td><td></td></tr><tr><td>url</td><td>HTML5 用于编辑URL的字段</td><td>可以校验URL地址格式</td></tr></tbody></table></li></ul><table><thead><tr><th>属性值</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>file</td><td>此控件可以让用户选择文件，用于文件上传。</td><td>使用 accept 属性可以定义控件可以选择的文件类型。</td></tr><tr><td>hidden</td><td>此控件用户在页面上不可见，但它的值会被提交到服务器，用于传递隐藏值</td><td></td></tr></tbody></table><ul><li><p><strong>button标签的type属性</strong></p><table><thead><tr><th>属性值</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>submit</td><td>此按钮将表单数据提交给服务器。如果未指定属性，或者属性动态更改为空值或无效值，则此值为默认值。</td><td>同 <code>&lt;input type=&quot;submit&quot;/&gt; </code></td></tr><tr><td>reset</td><td>此按钮重置所有组件为初始值。</td><td>同<code>&lt;input type=&quot;reset&quot;</code>/&gt;</td></tr><tr><td>button</td><td>此按钮没有默认行为。它可以有与元素事件相关的客户端脚本，当事件出现时可触发。</td><td>同<code>&lt;input type=&quot;button&quot;/&gt;</code></td></tr></tbody></table></li></ul><h4 id="3）HTML5新增属性"><a href="#3）HTML5新增属性" class="headerlink" title="3）HTML5新增属性"></a>3）HTML5新增属性</h4><table><thead><tr><th>属性名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>placeholder</strong></td><td>提示用户输入框的作用。用于提示的占位符文本不能包含回车或换行。</td><td>仅适用于当<strong>type</strong> 属性为text, search, tel, url or email时; 否则会被忽略。</td></tr><tr><td><strong>required</strong></td><td>这个属性指定用户在提交表单之前必须为该元素填充值</td><td>1. 布尔属性，可省略属性值表示true<br/>2. 当type属性是hidden,image或者button类型时不可使用</td></tr><tr><td><strong>autocomplete</strong></td><td>自动补全，规定表单或输入字段是否应该自动完成。当自动完成开启，浏览器会基于用户之前的输入值自动填写值。</td><td>1. 开启为on，关闭为off<br/>2. 可以设置指定的字段为off，关闭自动补全</td></tr></tbody></table><h3 id="5-2-4-更多表单元素"><a href="#5-2-4-更多表单元素" class="headerlink" title="5.2.4 更多表单元素"></a>5.2.4 更多表单元素</h3><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>**select **</td><td>表单的控件，下拉选项菜单</td><td>与option配合实用</td></tr><tr><td><strong>optgroup</strong></td><td>option的分组标签</td><td>与option配合实用</td></tr><tr><td>**option **</td><td>select的子标签，表示一个选项</td><td></td></tr><tr><td><strong>textarea</strong></td><td>表示多行纯文本编辑控件</td><td>rows表示行高度， cols表示列宽度</td></tr><tr><td><strong>fieldset</strong></td><td>用来对表单中的控制元素进行分组(也包括 label 元素)</td><td></td></tr><tr><td><strong>legend</strong></td><td>用于表示它的<strong>fieldset</strong>内容的标题。</td><td><strong>fieldset</strong> 的子元素</td></tr></tbody></table><p><strong>select举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pet-select&quot;</span>&gt;</span>Choose a pet:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pets&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pet-select&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--Please choose an option--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dog&quot;</span>&gt;</span>Dog<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cat&quot;</span>&gt;</span>Cat<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hamster&quot;</span>&gt;</span>Hamster<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;parrot&quot;</span>&gt;</span>Parrot<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spider&quot;</span>&gt;</span>Spider<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;goldfish&quot;</span>&gt;</span>Goldfish<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">  select的name属性值与option的value属性值,构成键值对,提交到Web服务器</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573109125538.png" alt="1573109125538"></p><p><strong>textarea举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>Write something here<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573109422288.png" alt="1573109422288"></p><p><strong>fieldset举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>是否同意<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio_y&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agree&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;y&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;radio_y&quot;</span>&gt;</span>同意<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio_n&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;agree&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;radio_n&quot;</span>&gt;</span>不同意<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573109738841.png" alt="1573109738841"></p><h2 id="5-3-使用标签"><a href="#5-3-使用标签" class="headerlink" title="5.3 使用标签"></a>5.3 使用标签</h2><ol><li>简单布局，使用div标签</li><li>基本文本标签</li><li>表单标签</li><li>图片标签</li></ol><h2 id="5-4-实现步骤"><a href="#5-4-实现步骤" class="headerlink" title="5.4 实现步骤"></a>5.4 实现步骤</h2><ol><li>设置背景图。</li><li>基本上下两部分布局。</li><li>实现上部（图片）</li><li>实现下部（表单）</li><li>实现页面跳转，从案例2跳转到案例3。</li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS+Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端入门——CSS</title>
    <link href="/2020/04/10/JavaEE-v4.0-Css+Nginx-%E6%8E%88%E8%AF%BE/"/>
    <url>/2020/04/10/JavaEE-v4.0-Css+Nginx-%E6%8E%88%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CSS入门"><a href="#1-CSS入门" class="headerlink" title="1 CSS入门"></a>1 CSS入门</h1><h2 id="1-1-初识CSS"><a href="#1-1-初识CSS" class="headerlink" title="1.1 初识CSS"></a>1.1 初识CSS</h2><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>在学习了基本HTML标签和样式后，接下来学习前端开发的第二门技术。</p><p>我们发现，虽然标签的属性可以调整一些样式，但是效果不够理想，而我们更愿意把样式编写在<code>&lt;style&gt;</code> 标签中，让页面设计更美观更丰富，实际上，这是通过CSS实现的。那么什么是CSS呢？</p><p>如果说，HTML是网页的”素颜”，那么CSS就是页面的”美妆师”，它就是让网页的外观更漂亮！</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/css1.jpg"></p><p><strong>CSS</strong> (层叠样式表——Cascading Style Sheets，缩写为 <strong>CSS</strong>），简单的说，它是用于设置和布局网页的计算机语言。会告知浏览器如何渲染页面元素。例如，调整内容的字体，颜色，大小等样式，设置边框的样式，调整模块的间距等。</p><p>所谓<code>层叠</code> : 是指样式表允许以多种方式规定样式信息。可以规定在单个元素中，可以在页面头元素中，也可以在另一个CSS文件中，规定的方式会有次序的差别（讲解引入时说明）。</p><p>所谓<code>样式</code>：是指丰富的样式外观。拿边框距离来说，允许任何设置边框，允许设置边框与框内元素的距离，允许设置边框与边框的距离等等。</p><ul><li><strong>CSS发展简史【了解】</strong><ul><li><a href="https://baike.baidu.com/item/CSS/5457?fr=aladdin#1">CSS</a>1：1994 年，Hkon Wium Lie 最初提出了 CSS 的想法，联合当时正在设计 Argo 的浏览器的Bert Bos，他们决定一起合作设计 CSS，于是创造了 CSS 的最初版本。1996 年 12 月，W3C 推出了 CSS 规范的第一版本。</li><li>CSS2：1998 年，W3C 发布了 CSS 的第二个版本，目前的主流浏览器都采用这标准。CSS2 的规范是基于 CSS1 设计的，包含了 CSS1 所有的功能，并扩充和改进了很多更加强大的属性。</li><li>CSS3：2005 年 12 月，W3C 开始 CSS3 标准的制定，并遵循模块化开发，所以没有固定的发布时间，而是一段时间发布一些特性模块。</li></ul></li></ul><blockquote><p>图片了解资料：</p><p><a href="https://www.cnblogs.com/LO-ME/p/3651140.html">https://www.cnblogs.com/LO-ME/p/3651140.html</a></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573551617191.png" alt="1573551617191"></p></blockquote><h3 id="1-1-2-CSS的组成"><a href="#1-1-2-CSS的组成" class="headerlink" title="1.1.2 CSS的组成"></a>1.1.2 CSS的组成</h3><p>CSS是一门基于规则的语言 — 你能定义用于你的网页中<strong>特定元素</strong>的一组<strong>样式规则</strong>。这里面提到了两个概念，一是特定元素，二是样式规则。对应CSS的语法，也就是<strong>选择器（<em>selects</em>）</strong>和<strong>声明（<em>eclarations</em>）</strong>。</p><ul><li><strong>选择器</strong>：指定将要添加样式的 HTML元素的方式。可以使用标签名，class值，id值等多种方式。</li><li><strong>声明</strong>：形式为**属性(property):值(value)**，用于设置特定元素的属性信息。<ul><li>属性：指示文体特征，例如<code>font-size</code>，<code>width</code>，<code>background-color</code>。</li><li>值：每个指定的属性都有一个值，该值指示您如何更改这些样式。</li></ul></li></ul><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">选择器 &#123;<br>    属性名:属性值;<br>    属性名:属性值;<br>    属性名:属性值;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>举例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573553282632.png" alt="1573553282632"></p><blockquote><p>视频老师了解资料</p><p>格式简介：语法由一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector">选择器(selector)</a>起头。 它 <em>选择(selects)</em> 了我们将要用来添加样式的 HTML元素。 在这个例子中我们为一级标题添加样式。</p><p>接着输入一对大括号<code>&#123; &#125;</code>。 在大括号内部定义一个或多个形式为 <strong>属性(property):值(value);</strong> 的 **声明(eclarations)**。每个声明都指定了我们所选择元素的一个属性，之后跟一个我们想赋给这个属性的值。</p><p>冒号之前是属性，冒号之后是值。不同的CSS <a href="https://developer.mozilla.org/en-US/docs/Glossary/property/CSS">属性(properties)</a> 对应不同的合法值。在这个例子中，我们指定了 <code>color</code> 属性，它可以接受许多   <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Color">颜色值(lor values)</a>。 还有 <code>font-size</code> 属性， 它可以接收许多 <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Numbers_lengths_and_percentages">size units</a> 值。</p></blockquote><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h2><ol><li><p>在初始页面的<code> &lt;body&gt;</code>标签中，加入一对<code>&lt;h1&gt;</code> 标签。<code>&lt;h1&gt;</code>标签规定的固定的标题样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天开始变漂亮!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>在<code>&lt;head&gt;</code>标签中加入一对<code>&lt;style&gt;</code> 标签中，表示准备应用样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加入style标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>今天开始变漂亮!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>编写样式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">     <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="css">         <span class="hljs-attribute">color</span>: red;  <span class="hljs-comment">/* 设置颜色为红色*/</span></span><br><span class="css">         <span class="hljs-attribute">font-size</span>:<span class="hljs-number">100px</span>; <span class="hljs-comment">/* 设置字体大小为100像素*/</span></span><br>     &#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>打开浏览器查看，文字的颜色和大小都发生改变，应用了新的样式，效果如图：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573554231351.png" alt="1573554231351"></p></li></ol><h2 id="1-3-Chrome开发者工具"><a href="#1-3-Chrome开发者工具" class="headerlink" title="1.3 Chrome开发者工具"></a>1.3 Chrome开发者工具</h2><ul><li><p><strong>打开开发者工具</strong></p><p>打开浏览器，点击键盘<code>F12</code>键，显示开发者工具窗口。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573697452420.png" alt="1573697452420"> </p></li><li><p><strong>查看开发者工具</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573697622186.png" alt="1573697622186"></p><p><strong>演示选择元素</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573697773675.png" alt="1573697773675"></p><p><strong>演示修改样式</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573698020491.png" alt="1573698020491"></p></li></ul><h2 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h2><p><strong>CSS</strong>是对<strong>HTML</strong>的补充，指定页面如何展示的语言。</p><p>CSS的主要部分有：</p><ol><li>选择器：用来选择页面元素的方式。</li><li>声明：用来设置样式，格式<code>属性名：值</code>。</li></ol><p>在学习CSS时，要抓住两个方面：</p><ol><li>掌握多种选择器，能够灵活的选择页面元素。</li><li>掌握样式的声明，能够使用多种属性来设置多样的效果。</li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2 基本语法"></a>2 基本语法</h1><h2 id="2-1-引入方式"><a href="#2-1-引入方式" class="headerlink" title="2.1 引入方式"></a>2.1 引入方式</h2><h3 id="2-1-1-内联样式"><a href="#2-1-1-内联样式" class="headerlink" title="2.1.1 内联样式"></a>2.1.1 内联样式</h3><blockquote><p>了解,几乎不用,维护艰难</p></blockquote><p>内联样式是CSS声明在元素的<code>style</code>属性中，仅影响一个元素：</p><ul><li><strong>格式</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;标签 style=&quot;属性名:属性值; 属性名:属性值;&quot;&gt;内容&lt;/标签&gt;<br></code></pre></div></td></tr></table></figure><ul><li><strong>举例</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;</span>&gt;</span><br>    Hello World!<br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>效果如下</strong>：</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573607373051.png" alt="1573607373051"></p><p>虽然格式简单，但是样式作用无法复用到多个元素上，不利于维护，此格式了解即可。</p><h3 id="2-1-2-内部样式表"><a href="#2-1-2-内部样式表" class="headerlink" title="2.1.2 内部样式表"></a>2.1.2 内部样式表</h3><p>内部样式表是将CSS样式放在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/style"><code>style</code></a>标签中，通常<code>style标签</code>编写在HTML 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head"><code>head</code></a>标签内部。</p><ul><li><strong>格式</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        选择器 &#123;<br><span class="css">            属性名: 属性值;</span><br><span class="css">            属性名: 属性值;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>举例</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><ul><li><p><strong>效果如下</strong>：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573607373051.png" alt="1573607373051"></p><p>内部样式只能作用在当前页面上，如果是多个页面，就无法复用了。</p></li></ul><h3 id="2-1-3-外部样式表"><a href="#2-1-3-外部样式表" class="headerlink" title="2.1.3 外部样式表"></a>2.1.3 外部样式表</h3><p>外部样式表是CSS附加到文档中的最常见和最有用的方法，因为您可以将CSS文件链接到多个页面，从而允许您使用相同的样式表设置所有页面的样式。</p><p>外部样式表是指将CSS编写在扩展名为<code>.css</code> 的单独文件中，并从HTML<code>&lt;link&gt;</code> 元素引用它，通常<code>link标签</code>编写在HTML 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head"><code>head</code></a>标签内部。：</p><ul><li><strong>格式</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件&quot;</span>&gt;</span><br><br>rel：表示“关系 (relationship) ”，属性值指链接方式与包含它的文档之间的关系，引入css文件固定值为stylesheet。<br><br>href：属性需要引用某文件系统中的一个文件。<br><br></code></pre></div></td></tr></table></figure><ul><li><strong>举例</strong>：</li></ul><ol><li>创建styles.css文件</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>link标签引入文件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styles.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>效果如下</strong>：</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573607373051.png" alt="1573607373051"></p><p>当然也可以把CSS文件放在其他地方，并调整指定的路径以匹配，例如：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573611208140.png" alt="1573611208140"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/styles.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>为了保证CSS文件的管理，建议在项目中创建一个<code>css文件夹</code>，专门保存样式文件。</p><blockquote><p>注意：引入样式的优先级问题。</p><p>规则层叠于一个样式表中，其中数字 4 拥有最高的优先权：</p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表（位于 <head> 标签内部）</li><li>内联样式（在 HTML 元素内部）</li></ol></blockquote><h2 id="2-2-关于注释"><a href="#2-2-关于注释" class="headerlink" title="2.2 关于注释"></a>2.2 关于注释</h2><blockquote><p>了解讲解：</p><p>简单格式，提一下就可以了</p></blockquote><p>与HTML一样，鼓励您在CSS中进行注释，以帮助您理解几个月后返回的代码工作方式，并帮助其他使用该代码的人对其进行理解。</p><p>CSS中的注释以<code>/*</code>和开头<code>*/</code>。在下面的代码块中，我已使用注释标记了不同的不同代码段的开始。</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 设置h1的样式 */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-关于选择器"><a href="#2-3-关于选择器" class="headerlink" title="2.3 关于选择器"></a>2.3 关于选择器</h2><blockquote><p>重点讲解：</p><p>选择器作为CSS的重要部分，这里强调基本选择器的使用和其他选择器的基本格式。</p></blockquote><p>讲到CSS就不得不说到<strong>选择器</strong>，为了样式化某些元素，我们会通过选择器来选中HTML文档中的这些元素。如果你的样式没有生效，那很可能是你的选择器没有像你想象的那样选中你想要的元素。</p><p>每个CSS规则都以一个选择器或一组选择器为开始，去告诉浏览器这些规则应该应用到哪些元素上。</p><p>接下来我们将要详细的学习各种选择器的使用。</p><p><strong>选择器的分类</strong>：</p><table><thead><tr><th>分类</th><th>名称</th><th>符号</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>基本选择器</td><td>元素选择器</td><td>标签名</td><td>基于标签名匹配元素</td><td>div{ }</td></tr><tr><td></td><td>类选择器</td><td><code>.</code></td><td>基于class属性值匹配元素</td><td>.center{ }</td></tr><tr><td></td><td>ID选择器</td><td><code>#</code></td><td>基于id属性值匹配元素</td><td>#username{ }</td></tr><tr><td>属性选择器</td><td>属性选择器</td><td><code>[]</code></td><td>基于某属性匹配元素</td><td>[type]{ }</td></tr><tr><td>伪类选择器</td><td>伪类选择器</td><td><code>:</code></td><td>用于向某些选择器添加特殊的效果</td><td>a : hover{ }</td></tr><tr><td>组合选择器</td><td>后代选择器</td><td><code>空格</code></td><td>使用<code>空格符号</code>结合两个选择器，基于第一个选择器，匹配第二个选择器的所有后代元素</td><td>.top li{ }</td></tr><tr><td></td><td>子级选择器</td><td><code>&gt;</code></td><td>使用 <code>&gt;</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的直接子级元素</td><td>.top &gt; li{ }</td></tr><tr><td></td><td>同级选择器</td><td><code>~</code></td><td>使用 <code>~</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的所有兄弟元素</td><td>.l1 ~ li{ }</td></tr><tr><td></td><td>相邻选择器</td><td><code>+</code></td><td>使用 <code>+</code> 结合两个选择器，基于第一个选择器，匹配第二个选择器的相邻兄弟元素</td><td>.l1 + li{ }</td></tr><tr><td></td><td>通用选择器</td><td><code>*</code></td><td>匹配文档中的所有内容</td><td>*{ }</td></tr></tbody></table><h3 id="2-2-1-基本选择器"><a href="#2-2-1-基本选择器" class="headerlink" title="2.2.1 基本选择器"></a>2.2.1 基本选择器</h3><h4 id="1）元素选择器"><a href="#1）元素选择器" class="headerlink" title="1）元素选择器"></a>1）元素选择器</h4><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">选择所有<span class="hljs-selector-tag">li</span>标签,背景变成蓝色<br><span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2）类选择器"><a href="#2）类选择器" class="headerlink" title="2）类选择器"></a>2）类选择器</h4><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ulist l1&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l3&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--class 为两个值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;olist l1&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;olist l2&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;olist l3&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">选择class属性值为l2的,背景变成蓝色<br><span class="hljs-selector-class">.l2</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br>选择class属性值为olist l2的,字体为白色<br><span class="hljs-selector-class">.olist</span><span class="hljs-selector-class">.l2</span>&#123;<br>   <span class="hljs-attribute">color</span>: wheat;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3）ID选择器"><a href="#3）ID选择器" class="headerlink" title="3）ID选择器"></a>3）ID选择器</h4><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;three&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;five&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;six&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#tow</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>效果如图：</strong></p><h4 id="4）通用选择器"><a href="#4）通用选择器" class="headerlink" title="4）通用选择器"></a>4）通用选择器</h4><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;three&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;five&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;six&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">所有标签 <br>*&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-2-属性选择器"><a href="#2-2-2-属性选择器" class="headerlink" title="2.2.2 属性选择器"></a>2.2.2 属性选择器</h3><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  &gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  &gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  &gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;five&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;six&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>     p item<br> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>选择器和效果图，示例1</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[属性名]</span>&#123; &#125;<br></code></pre></div></td></tr></table></figure><p><strong>选择器和效果图，示例2</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">标签名<span class="hljs-selector-attr">[属性名]</span>&#123; &#125;<br></code></pre></div></td></tr></table></figure><p><strong>选择器和效果图，示例3</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">标签名<span class="hljs-selector-attr">[属性名=<span class="hljs-string">&#x27;属性值&#x27;</span>]</span>&#123; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-3-伪类选择器"><a href="#2-2-3-伪类选择器" class="headerlink" title="2.2.3 伪类选择器"></a>2.2.3 伪类选择器</h3><p>伪类选择器，用于选择处于特定状态的元素，例如，一些元素中的第一个元素，或者某个元素被鼠标指针悬停。</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">标签名:伪类名&#123; &#125;<br></code></pre></div></td></tr></table></figure><p>常用伪类:</p><ul><li><p>锚伪类</p><p>在支持 CSS 的浏览器中，链接的不同状态都可以以不同的方式显示</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125; <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125; <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125; <span class="hljs-comment">/* 鼠标悬停链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125; <span class="hljs-comment">/* 已选中的链接 */</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意：</p><p>伪类顺序 link ，visited，hover，active，否则有可能失效。</p></blockquote><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">HTML 代码 ： <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.itheima.com&quot;</span>&gt;</span>黑马<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.itheima.com&quot;</span>&gt;</span>传智<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>CSS 代码 ： <br>/* 选择a标签,class值为red ,设置访问后为红色链接*/<br>a.red:visited &#123;<br>    color: red;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="2-2-4-组合选择器"><a href="#2-2-4-组合选择器" class="headerlink" title="2.2.4 组合选择器"></a>2.2.4 组合选择器</h3><p><strong>页面元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;l2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span>List item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;five&quot;</span>&gt;</span>List item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;six&quot;</span>&gt;</span>List item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1）后代选择器"><a href="#1）后代选择器" class="headerlink" title="1）后代选择器"></a>1）后代选择器</h4><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.l1</span> <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2）子级选择器"><a href="#2）子级选择器" class="headerlink" title="2）子级选择器"></a>2）子级选择器</h4><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.l1</span> &gt; <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3）同级选择器"><a href="#3）同级选择器" class="headerlink" title="3）同级选择器"></a>3）同级选择器</h4><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.l1</span> ~ <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4）相邻选择器"><a href="#4）相邻选择器" class="headerlink" title="4）相邻选择器"></a>4）相邻选择器</h4><p><strong>选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.l1</span> + <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><ol><li>CSS的引入方式有三种，建议使用外部样式表。</li><li>注释类似于java多行注释。</li><li>选择器是CSS的重要部分：<ol><li>基本选择器：可以通过元素，类，id来选择元素。</li><li>属性选择器：可以通过属性值选择元素</li><li>伪类选择器：可以指定元素的某种状态，比如链接</li><li>组合选择器：可以组合基本选择器，更加精细的划分如何选择</li></ol></li></ol><h1 id="3-CSS案例-头条页面"><a href="#3-CSS案例-头条页面" class="headerlink" title="3 CSS案例-头条页面"></a>3 CSS案例-头条页面</h1><h2 id="3-1-案例效果"><a href="#3-1-案例效果" class="headerlink" title="3.1 案例效果"></a>3.1 案例效果</h2><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573800259471.png" alt="1573800259471"></p><h2 id="3-2-案例分析"><a href="#3-2-案例分析" class="headerlink" title="3.2 案例分析"></a>3.2 案例分析</h2><h3 id="3-2-1-语义化标签"><a href="#3-2-1-语义化标签" class="headerlink" title="3.2.1 语义化标签"></a>3.2.1 语义化标签</h3><blockquote><p>了解讲解：</p><p>简单介绍作用即可，后续在案例中使用。</p></blockquote><p>为了更好的组织文档，HTML5规范中设计了几个语义元素，可以将特殊含义传达给浏览器。</p><table><thead><tr><th>标签</th><th>名称</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>header</strong></td><td>标头元素</td><td>表示内容的介绍</td><td>块元素，文档中可以定义多个</td></tr><tr><td><strong>nav</strong></td><td>导航元素</td><td>表示导航链接</td><td>常见于网站的菜单，目录和索引等，可以嵌套在header中</td></tr><tr><td><strong>article</strong></td><td>文章元素</td><td>表示独立内容区域</td><td>标签定义的内容本身必须是有意义且必须独立于文档的其他部分</td></tr><tr><td><strong>footer</strong></td><td>页脚元素</td><td>表示页面的底部</td><td>块元素，文档中可以定义多个</td></tr></tbody></table><p>标签结构示例如图：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/yuyi.jpg"></p><h3 id="3-2-2-常见样式属性"><a href="#3-2-2-常见样式属性" class="headerlink" title="3.2.2 常见样式属性"></a>3.2.2 常见样式属性</h3><p>其他属性：</p><table><thead><tr><th>分类</th><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>边框</td><td><strong>border</strong></td><td>边框</td></tr><tr><td></td><td><strong>border-top</strong></td><td>底部边框</td></tr><tr><td></td><td><strong>border-radius</strong></td><td>设置边框圆角</td></tr><tr><td>文本</td><td><strong>color</strong></td><td>颜色</td></tr><tr><td></td><td><strong>font-family</strong></td><td>字体样式</td></tr><tr><td></td><td><strong>font-size</strong></td><td>字体大小</td></tr><tr><td></td><td><strong>text-decoration</strong></td><td>下划线</td></tr><tr><td></td><td><strong>text-align</strong></td><td>文本水平对齐</td></tr><tr><td></td><td><strong>line-height</strong></td><td>行高，行间距</td></tr><tr><td></td><td><strong>vertical-align</strong></td><td>文本垂直对齐</td></tr></tbody></table><h4 id="1）边框样式"><a href="#1）边框样式" class="headerlink" title="1）边框样式"></a>1）边框样式</h4><p>在之前学习了简写属性来设置边框样式，接下来我们将研究如何创造性地使用边框。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--回顾简写样式 --&gt;</span><br>div &#123; <br>  border: 1px solid black; <br>&#125; <br></code></pre></div></td></tr></table></figure><ul><li><strong>单个边框</strong></li></ul><p>设置一个方向边框的宽度、样式和颜色，例如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">.box &#123; <br>  border-top: 1px solid black; <br>  border-left: 5px double yellow;<br>  border-bottom: 5px dotted green;<br>  border-right: 5px dashed red;<br>&#125; <br>border-top: 上边框<br>border-left: 左边框<br>border-bottom: 底边框<br>border-right:  右边框<br></code></pre></div></td></tr></table></figure><ul><li><strong>无边框</strong></li></ul><p>当border值为none时，可以让边框不显示，用于特殊效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div &#123;<br>         width: 200px;<br>         height: 200px;<br>         border: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>圆角</strong></li></ul><p>通过使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"><code>border-radius</code></a>属性设置盒子的圆角，虽然能分别设置四个角，但是通常我们使用一个值，来设置整体效果，例如</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div &#123;<br>        width: 200px;<br>        height: 200px;<br>        border: 10px solid blue;<br>        border-radius: 50px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="2）文本样式"><a href="#2）文本样式" class="headerlink" title="2）文本样式"></a>2）文本样式</h4><ul><li><p><strong>颜色</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color"><code>color</code></a>属性设置所选元素的前景色的颜色</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">p &#123;<br>  color: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>颜色的值，可以由多种方式赋值，常见的有颜色单词，RGB十六进制，例如：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1574001685034.png" alt="1574001685034"></p></li><li><p><strong>字体种类</strong></p><p>使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"><code>font-family</code></a>属性-这允许您指定一种字体</p></li><li><p><strong>字体大小</strong></p><p>字体大小使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code>font-size</code></a>属性设置，可以采用常见单位：</p><p><code>px</code>：像素，文本高度像素绝对数值。</p><p><code>em</code>：1em等于我们要设置样式的当前元素的父元素上设置的字体大小，这是相对数值，能看懂即可。</p></li><li><p><strong>文本修饰</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration"><code>text-decoration</code></a>:设置字体上的文本装饰线。</p><p><img src="assets/1574002112573.png" alt="1574002112573"></p></li><li><p><strong>文本对齐</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"><code>text-align</code></a>属性用于控制文本如何在其包含的内容框中对齐。可用值如下，它们的工作方式与常规字处理器应用程序中的工作方式几乎相同：</p><ul><li><code>left</code>：左对齐文本。</li><li><code>right</code>：右对齐文本。</li><li><code>center</code>：使文本居中。</li><li><code>justify</code>：使文本散布，改变单词之间的间距，以使文本的所有行都具有相同的宽度。</li></ul></li><li><p><strong>行高</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height"><code>line-height</code></a>属性设置每行文本的高度，也就是行距。</p></li></ul><h2 id="3-3-使用技术"><a href="#3-3-使用技术" class="headerlink" title="3.3 使用技术"></a>3.3 使用技术</h2><ol><li>使用语义化标签，header，footer，article，nav。</li><li>使用CSS常见属性</li></ol><h2 id="3-4-实现步骤"><a href="#3-4-实现步骤" class="headerlink" title="3.4 实现步骤"></a>3.4 实现步骤</h2><ol><li>创建初始页面，拷贝图片素材。</li><li>编写css文件，引入css样式，实现整体布局。</li><li>header部分<ol><li>实现顶部条。</li><li>实现导航条。</li></ol></li><li>实现中部<ol><li>实现左侧分享区域。</li><li>实现中间正文区域。</li><li>实现右侧广告区域。</li></ol></li><li>实现底部页脚。</li></ol><h1 id="4-CSS案例-登录页面"><a href="#4-CSS案例-登录页面" class="headerlink" title="4 CSS案例-登录页面"></a>4 CSS案例-登录页面</h1><h2 id="4-1-案例效果"><a href="#4-1-案例效果" class="headerlink" title="4.1 案例效果"></a>4.1 案例效果</h2><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573801287738.png" alt="1573801287738"></p><h2 id="4-2-案例分析"><a href="#4-2-案例分析" class="headerlink" title="4.2 案例分析"></a>4.2 案例分析</h2><h3 id="4-2-1-Table标签"><a href="#4-2-1-Table标签" class="headerlink" title="4.2.1  Table标签"></a>4.2.1  Table标签</h3><h4 id="1）什么是表格"><a href="#1）什么是表格" class="headerlink" title="1）什么是表格"></a>1）什么是表格</h4><p>表格是由行和列组成的结构化数据集(表格数据)。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/swimming-timetable.png"></p><h4 id="2）表格标签"><a href="#2）表格标签" class="headerlink" title="2）表格标签"></a>2）表格标签</h4><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>table</td><td>表示表格，是数据单元的行和列的两维表</td><td>容器，默认无样式</td></tr><tr><td>tr</td><td>table row，表示表中单元的行</td><td></td></tr><tr><td>td</td><td>table data，表示表中一个单元格</td><td></td></tr><tr><td>th</td><td>table header，表格单元格的表头，通常字体样式加粗居中</td><td></td></tr></tbody></table><p>通过表格标签，我们可以创建出一张表格，代码如下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>First name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jane<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573884073436.png" alt="1573884073436"></p><h4 id="3）跨行跨列"><a href="#3）跨行跨列" class="headerlink" title="3）跨行跨列========"></a>3）跨行跨列========</h4><p>让我们使用 <code>colspan</code> 和 <code>rowspan</code> 来改进现有的表格。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>GROUP<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>First name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>G1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jane<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>G2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Aohn<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doa<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bane<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Dob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cane<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doc<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1574039326854.png" alt="1574039326854"></p><h4 id="4）表格结构【了解】"><a href="#4）表格结构【了解】" class="headerlink" title="4）表格结构【了解】"></a>4）表格结构【了解】</h4><blockquote><p>了解讲解：</p><p>表格布局标签，作为了解内容，案例中的使用部分，可以省略</p></blockquote><table><thead><tr><th>标签名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>thead</td><td>定义表格的列头的行</td><td>一个表格中仅有一个</td></tr><tr><td>tbody</td><td>定义表格的主体</td><td>用来封装一组表行（tr元素）</td></tr><tr><td>tfoot</td><td>定义表格的各列汇总行</td><td>一个表格中仅有一个</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>项目<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>金额<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3,000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电脑<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18,000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-2-常见样式属性"><a href="#4-2-2-常见样式属性" class="headerlink" title="4.2.2 常见样式属性"></a>4.2.2 常见样式属性</h3><h4 id="1）背景"><a href="#1）背景" class="headerlink" title="1）背景"></a>1）背景</h4><p>CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"><code>background</code></a>属性用来设置背景相关的样式。</p><ul><li><p><strong>背景色</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color"><code>background-color</code></a>属性定义CSS中任何元素的背景色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">.box &#123;<br>  background-color: #567895;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>背景图</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image"><code>background-image</code></a>属性允许在元素的背景中显示图像。使用url函数指定图片路径。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">body &#123;<br>   background-image: url(bg.jpg);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>控制背景重复</strong></p><p>该<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat"><code>background-repeat</code></a>属性用于控制图像的平铺行为。可用值为：</p><ul><li><code>no-repeat</code> -停止完全重复背景。</li></ul></li></ul><ul><li><code>repeat-x</code> —水平重复。<ul><li><code>repeat-y</code> —反复重复。</li><li><code>repeat</code>—默认值；双向重复。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">body &#123;<br>    background-image: url(star.png);<br>    background-repeat: no-repeat;<br>  &#125;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="2）轮廓"><a href="#2）轮廓" class="headerlink" title="2）轮廓"></a>2）轮廓</h4><p>轮廓<strong>outline</strong>：是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">      <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">outline</span>: dotted;</span><br>      &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>设置为none时，可以取消默认轮廓样式，用于特殊效果。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span> &#123;<br>       <span class="hljs-attribute">outline</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3）显示"><a href="#3）显示" class="headerlink" title="3）显示"></a>3）显示</h4><p><strong>display</strong>属性，用来设置一个元素应如何显示。可以设置块级和行内元素的切换，也可以设置元素隐藏。</p><ul><li><p><strong>元素显示</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*   把列表项显示为内联元素，无长宽*/</span><br><span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">display</span>:inline;&#125;<br><span class="hljs-comment">/*   把span元素作为块元素，有换行*/</span><br><span class="hljs-selector-tag">span</span> &#123;<span class="hljs-attribute">display</span>:block;&#125;<br><span class="hljs-comment">/*   行内块元素，结合的行内和块级的优点，既可以行内显示，又可以设置长宽，*/</span><br><span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">display</span>:inline-block;&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">li &#123;<br>          display: inline-block;<br>          width: 200px;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p><strong>元素隐藏</strong></p><p>当设置为none时，可以隐藏元素。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><br><span class="hljs-selector-tag">li</span> &#123;<br>          <span class="hljs-attribute">display</span>: none;<br>         <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-3-盒子模型"><a href="#4-2-3-盒子模型" class="headerlink" title="4.2.3 盒子模型"></a>4.2.3 盒子模型</h3><p>万物皆”盒子”。盒子模型是通过设置<strong>元素框</strong>与<strong>元素内容</strong>和<strong>外部元素</strong>的边距，而进行布局的方式。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1574042377772.png" alt="1574042377772"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">- element : 元素。<br>- padding : 内边距，也有资料将其翻译为填充。<br>- border : 边框。<br>- margin : 外边距，也有资料将其翻译为空白或空白边。<br></code></pre></div></td></tr></table></figure><p><strong>基本布局</strong></p><p>内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。在 CSS 中，width 和 height 指的是内容区域的宽度和高度。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid blue;</span><br>        &#125;<br><br>        .big&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br>        &#125;<br><br>        .small&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span>;<span class="hljs-comment">/*  外边距 */</span></span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;big&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1574042949944.png" alt="1574042949944"></p><p>增加内边距会增加元素框的总尺寸。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid blue;</span><br>        &#125;<br><br>        .big&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">             <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;<span class="hljs-comment">/*内边距 */</span></span><br>        &#125;<br><br>        .small&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br>           <br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;big&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1574043138196.png" alt="1574043138196"></p><p><strong>外边距</strong></p><p>单独设置边框的外边距，设置上、右、下、左方向：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span><br><span class="hljs-attribute">margin-right</span><br><span class="hljs-attribute">margin-bottom</span><br><span class="hljs-attribute">margin-left</span><br></code></pre></div></td></tr></table></figure><p>值含义：</p><ol><li><p>一个值时</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*  所有 4 个外边距都是 10px */</span><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>两个值时</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 上外边距和下外边距是 10px</span><br><span class="hljs-comment">右外边距和左外边距是 5px */</span><br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">5px</span>;<br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> auto;<br><span class="hljs-attribute">auto</span> 浏览器自动计算外边距，具有居中效果。<br></code></pre></div></td></tr></table></figure></li><li><p>三个值时</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 上外边距是 10px</span><br><span class="hljs-comment">右外边距和左外边距是 5px</span><br><span class="hljs-comment">下外边距是 15px*/</span><br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>四个值时</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*上外边距是 10px</span><br><span class="hljs-comment">右外边距是 5px</span><br><span class="hljs-comment">下外边距是 15px</span><br><span class="hljs-comment">左外边距是 20px*/</span><br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-number">20px</span>;<br></code></pre></div></td></tr></table></figure></li></ol><p><strong>内边距</strong></p><p>与外边距类似，单独设置边框的内边距，设置上、右、下、左方向：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">padding-top</span><br><span class="hljs-attribute">padding-right</span><br><span class="hljs-attribute">padding-bottom</span><br><span class="hljs-attribute">padding-left</span><br></code></pre></div></td></tr></table></figure><h2 id="4-3-使用技术"><a href="#4-3-使用技术" class="headerlink" title="4.3 使用技术"></a>4.3 使用技术</h2><ol><li>div盒子布局</li><li>form标签和table标签<ol><li>input button</li><li>thead， tbody ，tfoot，th，tr，td</li></ol></li><li>设置背景，字体等css样式</li></ol><h2 id="4-4-实现步骤"><a href="#4-4-实现步骤" class="headerlink" title="4.4 实现步骤"></a>4.4 实现步骤</h2><ol><li>设置背景</li><li>整体布局，上中底三部分</li><li>上部<ol><li>logo设置</li></ol></li><li>中部<ol><li>表单表格布局</li><li>加入表头</li><li>加入输入框</li><li>加入按钮</li></ol></li><li>底部<ol><li>底部布局</li><li>其他方式分割线</li><li>其他方式图片</li><li>底部文本</li></ol></li></ol><h1 id="5-HTML案例-网站发布"><a href="#5-HTML案例-网站发布" class="headerlink" title="5 HTML案例-网站发布"></a>5 HTML案例-网站发布</h1><p>将网站部署到服务器，浏览器通过URL地址访问页面</p><h2 id="5-1-案例效果"><a href="#5-1-案例效果" class="headerlink" title="5.1 案例效果"></a>5.1 案例效果</h2><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573812990799.png" alt="1573812990799"></p><p>在地址栏输入URL地址，访问服务器上的页面。</p><h2 id="5-2-案例分析"><a href="#5-2-案例分析" class="headerlink" title="5.2 案例分析"></a>5.2 案例分析</h2><h3 id="5-2-1-Nginx服务器概述"><a href="#5-2-1-Nginx服务器概述" class="headerlink" title="5.2.1 Nginx服务器概述"></a>5.2.1 Nginx服务器概述</h3><p>Nginx是一种服务器软件，其最主要，最基本的功能是可以与服务器硬件(电脑)结合，让程序员可以将程序发布在Nginx服务器上，让成千上万的用户可以浏览。</p><p>​    除此之外，Nginx还是一种高性能的HTTP和反向代理服务器，同时也是一个代理邮件服务器。也就是说，我们在Nginx上可以： </p><ol><li>可以发布网站(静态, html,css,js)</li><li>可以实现负载均衡, </li><li>代理服务器</li><li>可以作为邮件服务器实现收发邮件等功能</li></ol><p>本课程我们只讨论Nginx发布网站的功能，其它的功能后续课程会深入学习.</p><h3 id="5-2-2-在Linux上使用Nginx"><a href="#5-2-2-在Linux上使用Nginx" class="headerlink" title="5.2.2 在Linux上使用Nginx"></a>5.2.2 在Linux上使用Nginx</h3><h4 id="1）下载Nginx"><a href="#1）下载Nginx" class="headerlink" title="1）下载Nginx"></a>1）下载Nginx</h4><p>进入<a href="http://nginx.org/%E7%BD%91%E7%AB%99%EF%BC%8C%E4%B8%8B%E8%BD%BDnginx-1.17.5.tar.gz%E6%96%87%E4%BB%B6">http://nginx.org/网站，下载nginx-1.17.5.tar.gz文件</a></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573805867978.png" alt="1573805867978"></p><h4 id="2）上传到虚拟机"><a href="#2）上传到虚拟机" class="headerlink" title="2）上传到虚拟机"></a>2）上传到虚拟机</h4><p>使用客户端将刚下载好的nginx-1.17.5.tar.gz文件上传到home目录下。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573806041202.png" alt="1573806041202"></p><p>使用命令查看</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573806174170.png" alt="1573806174170"></p><h4 id="3）准备依赖环境"><a href="#3）准备依赖环境" class="headerlink" title="3）准备依赖环境"></a>3）准备依赖环境</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装Nginx依赖环境，‐y表示所有提示默认选择y</span><br>yum -y install pcre pcre-devel<br>yum ‐y install zlib zlib‐devel  <br>yum ‐y install openssl openssl‐devel<br></code></pre></div></td></tr></table></figure><h4 id="4）解压和编译安装"><a href="#4）解压和编译安装" class="headerlink" title="4）解压和编译安装"></a>4）解压和编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入home目录,解压</span><br>tar -zxvf nginx-1.17.5.tar.gz -C /home<br><br><span class="hljs-meta">#</span><span class="bash"> 进入 nginx目录</span><br>cd nginx-1.17.5<br><br><span class="hljs-meta">#</span><span class="bash"> 编译并安装【已经有gcc编译环境】</span><br>./configure<br>make<br>make install<br><span class="hljs-meta">#</span><span class="bash"> 安装成功之后,就会在/usr/<span class="hljs-built_in">local</span>下多出了一个nginx目录.</span><br></code></pre></div></td></tr></table></figure><h4 id="5）启动服务器"><a href="#5）启动服务器" class="headerlink" title="5）启动服务器"></a>5）启动服务器</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入nginx的sbin目录</span><br>cd /usr/local/nginx/sbin<br><br><span class="hljs-meta">#</span><span class="bash">在sbin目录下启动</span><br>./nginx<br><span class="hljs-meta">#</span><span class="bash">在sbin目录下停止</span><br>./nginx ‐s stop<br><span class="hljs-meta">#</span><span class="bash">在sbin目录下重写加载</span><br>./nginx ‐s reload<br><br><span class="hljs-meta">#</span><span class="bash">开放linux的对外访问的端口80，在默认情况下，Linux不会开放80端口号</span><br><span class="hljs-meta">#</span><span class="bash">需要编辑iptables文件,参考 4.5 操作</span><br><span class="hljs-meta">#</span><span class="bash">查看是否有nginx的线程是否存在</span><br>ps ‐ef | grep nginx<br><br></code></pre></div></td></tr></table></figure><h4 id="6）浏览器访问"><a href="#6）浏览器访问" class="headerlink" title="6）浏览器访问"></a>6）浏览器访问</h4><p>浏览器输入虚拟机ip地址，默认80端口</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573812171600.png" alt="1573812171600"></p><h2 id="5-3-实现步骤"><a href="#5-3-实现步骤" class="headerlink" title="5.3 实现步骤"></a>5.3 实现步骤</h2><ol><li>发布项目</li><li>配置Nginx服务器</li><li>浏览器访问</li></ol><h2 id="5-4-操作实现"><a href="#5-4-操作实现" class="headerlink" title="5.4 操作实现"></a>5.4 操作实现</h2><h3 id="5-4-1-发布项目"><a href="#5-4-1-发布项目" class="headerlink" title="5.4.1 发布项目"></a>5.4.1 发布项目</h3><p>在/home目录下，创建toutiao目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入home目录</span><br>cd /home <br><span class="hljs-meta">#</span><span class="bash"> 创建目录</span><br>mkdir toutiao<br></code></pre></div></td></tr></table></figure><p>上传项目文件到toutiao目录</p><p>项目文件:</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573812553361.png" alt="1573812553361"></p><p>toutiao目录:</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573812637850.png" alt="1573812637850"></p><h3 id="5-4-2-配置-nginx-conf-文件"><a href="#5-4-2-配置-nginx-conf-文件" class="headerlink" title="5.4.2 配置 nginx.conf 文件"></a>5.4.2 配置 nginx.conf 文件</h3><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/css/1573812368563.png" alt="1573812368563"></p><h3 id="5-4-3-启动服务器"><a href="#5-4-3-启动服务器" class="headerlink" title="5.4.3 启动服务器"></a>5.4.3 启动服务器</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">启动服务器 ， 加载配置文件</span><br>/usr/local/nginx/sbin/nginx -c /home/nginx-1.17.5/conf/nginx.conf<br></code></pre></div></td></tr></table></figure><h3 id="5-4-4-浏览器访问"><a href="#5-4-4-浏览器访问" class="headerlink" title="5.4.4 浏览器访问"></a>5.4.4 浏览器访问</h3><ol><li>浏览器输入虚拟机ip地址，默认80端口，访问首页 index.html <img src="assets/1573826416351.png" alt="1573826416351"></li><li>跳转登录页面</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">http:<span class="hljs-comment">//172.16.17.99/login/login.html</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS+Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中安装JDK</title>
    <link href="/2019/04/19/Linux%E4%B8%AD%E5%AE%89%E8%A3%85JDK/"/>
    <url>/2019/04/19/Linux%E4%B8%AD%E5%AE%89%E8%A3%85JDK/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux中安装JDK并配置环境变量"><a href="#Linux中安装JDK并配置环境变量" class="headerlink" title="Linux中安装JDK并配置环境变量"></a>Linux中安装JDK并配置环境变量</h1><h2 id="1-切换权限为root"><a href="#1-切换权限为root" class="headerlink" title="1,切换权限为root"></a>1,切换权限为root</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su root<br></code></pre></div></td></tr></table></figure><h2 id="2-查看版本"><a href="#2-查看版本" class="headerlink" title="2,查看版本"></a>2,查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br></code></pre></div></td></tr></table></figure><h2 id="3-查看centos中自带的JDK"><a href="#3-查看centos中自带的JDK" class="headerlink" title="3,查看centos中自带的JDK"></a>3,查看centos中自带的JDK</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa | grep java<br></code></pre></div></td></tr></table></figure><h2 id="4-卸载-centos中自带的JDK"><a href="#4-卸载-centos中自带的JDK" class="headerlink" title="4,卸载 centos中自带的JDK"></a>4,卸载 centos中自带的JDK</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -e --nodeps java-1.X.0-openjdk...<br></code></pre></div></td></tr></table></figure><h2 id="5-检查是否删除成功"><a href="#5-检查是否删除成功" class="headerlink" title="5,检查是否删除成功"></a>5,检查是否删除成功</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br></code></pre></div></td></tr></table></figure><h2 id="6-下载JDK"><a href="#6-下载JDK" class="headerlink" title="6,下载JDK"></a>6,下载JDK</h2><h2 id="7-把JDK上传至centos中"><a href="#7-把JDK上传至centos中" class="headerlink" title="7,把JDK上传至centos中"></a>7,把JDK上传至centos中</h2><h2 id="8-把压缩包解压到当前文件夹-并把解压出来的文件夹移动到-usr-java下"><a href="#8-把压缩包解压到当前文件夹-并把解压出来的文件夹移动到-usr-java下" class="headerlink" title="8,把压缩包解压到当前文件夹,并把解压出来的文件夹移动到/usr/java下"></a>8,把压缩包解压到当前文件夹,并把解压出来的文件夹移动到/usr/java下</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar –zxvf 压缩文件名<br>mv 数据源 目的地<br></code></pre></div></td></tr></table></figure><h2 id="9-配置环境变量"><a href="#9-配置环境变量" class="headerlink" title="9,配置环境变量"></a>9,配置环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export JAVA_HOME=你的安装路径(绝对路径)<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br></code></pre></div></td></tr></table></figure><h2 id="10-让当前环境变量生效"><a href="#10-让当前环境变量生效" class="headerlink" title="10,让当前环境变量生效"></a>10,让当前环境变量生效</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile <br></code></pre></div></td></tr></table></figure><h2 id="11-检查是否安装成功"><a href="#11-检查是否安装成功" class="headerlink" title="11,检查是否安装成功"></a>11,检查是否安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>JDK</tag>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-day01-笔记</title>
    <link href="/2019/04/14/Linux-day01-%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/04/14/Linux-day01-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-v10-0-01天-课堂笔记"><a href="#Linux-v10-0-01天-课堂笔记" class="headerlink" title="Linux-v10.0-01天-课堂笔记"></a>Linux-v10.0-01天-课堂笔记</h1><span id="more"></span><p>学习目标</p><ul><li>能够知道什么是Linux系统以及它的应用场景</li><li>能够独立完成安装VMware虚拟机和网络配置</li><li>能够独立完成安装CentOS以及远程终端SecureCRT</li><li>能够熟练编写账户管理、用户组的增删改查和添加命令</li><li>能够熟练编写系统管理的常用命令</li><li>能够熟练编写目录常用命令</li><li>能够熟练编写权限常用命令</li><li>能够知道用户组实际应用场景</li></ul><h1 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1 初识Linux"></a>1 初识Linux</h1><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在前面的课程中，我们无论是开发、测试。部署、存储都在Windwos操作系统的环境中，从今天开始我们一起学习下Linux,Linux系统和Windows系统最大的区别就是图形化界面操作和用途上有所差异，除了这两点，两者有异曲同工之妙，在国内， Linux 系统更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows，也就是说Linux与Windows一样，同样也是操作系统只是在使用以及应用上有所差异，其他都是一样的；<br>因为Linux也是操作系统<br>所以在正式进入Linux学习之前，我们先简单的学习操作系统的知识，然后在讲解Linux<br></code></pre></div></td></tr></table></figure><h2 id="1-1-操作系统"><a href="#1-1-操作系统" class="headerlink" title="1.1 操作系统"></a>1.1 操作系统</h2><p>操作系统(Operation System, OS)，是管理<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a><a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6">硬件</a>与<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>资源的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">计算机程序</a>，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98">内存</a>、决定<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90/974435">系统资源</a>供需的优先次序、控制<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/10823368">输入设备</a>与<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><p>操作系统作为接口的示意图:</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576199620565.png" alt="1576199620565"></p><p>如上图所示，在操作系统的最上层是用户，中间层是操作系统（里面可能装了很多的应用程序），最下层是硬件的支撑，包含CPU/内存/硬盘等</p><p>这就是一个完成的操作系统结构图</p><p><strong>主流操作系统按照应用领域的划分</strong></p><p><strong>1、桌面操作系统</strong></p><ul><li>Window 系列<ul><li>用户群体大</li></ul></li><li>macOS<ul><li>细节处理的更好, 没有windows软件丰富, 价格高</li></ul></li><li>Linux<ul><li>应用软件少</li></ul></li></ul><p><strong>2、服务器操作系统</strong></p><ul><li><p>Linux</p><ul><li>安全、稳定、免费</li><li>占有率高</li></ul></li><li><p>Windows Server</p><ul><li>付费</li><li>占有率低</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1558234034446.png" alt="1558234034446"></p></li></ul><p><strong>3、嵌入式操作系统</strong></p><p>​    Linux</p><p><strong>4、移动设备操作系统</strong></p><p> <img src="https://gitee.com/wxqgm/pic/raw/master/img/1560477460567.png" alt="1560477460567"></p><ul><li>IOS</li><li>Android (基于Linux)</li><li>华为鸿蒙(基于linux)</li></ul><h2 id="1-2-Linux发展历程"><a href="#1-2-Linux发展历程" class="headerlink" title="1.2 Linux发展历程"></a>1.2 Linux发展历程</h2><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang">引子<br>在上面，我们学习了操作系统的知识，也知道了主流操作系统按照应用领域划分了四个类型的操作系统，其中Linux操作系统在四个领域都有提名，因为它是至今开源序列最好的操作系统，下面，我们就一起看下Linux的发展历程，看看它是怎么诞生的...<br></code></pre></div></td></tr></table></figure><p>1984年，Andrew S.Tanenbaum 开发了用于教学的Unix系统，命名为Minix，但是仅仅用于教学<br>1989年，Andrew S.Tanenbaum将Minix系统运行于x86的pc平台<br>1990年，芬兰赫尔辛基大学学生Linus Torvalds首次接触Minix系统<br>1991年，Linus Torvalds开始在Minix上编写各种驱动程序等操作系统内核组件<br>1991年年底，Linus Torvalds公开了Linux内核源码0.02版，仅仅是内核<br>1994年，Linux 1.0版本发行，Linux转向GPL版权协议<br>至此，Linux开始盛行开来…</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1575879660267.png" alt="1575879660267"></p><p>Linux 内核最初是由李纳斯•托瓦兹（Linus Torvalds）在赫尔辛基大学读书时出于个人爱好而编写的，当时他觉得教学用的迷你版 Unix操作系统 Minix 太难用了，于是决定自己开发一个操作系统。</p><p>第 1 版本于 1991 发布，当时仅有 10 000 行代码。</p><p>李纳斯•托瓦兹没有保留 Linux 源代码的版权，公开了代码，并邀请他人一起完善 Linux。与 Windows 及其他有专利权的操作系统不同，Linux 开放源代码，任何人都可以免费使用它。</p><p>据估计，现在只有 2% 的 Linux 核心代码是由李纳斯•托瓦兹自己编写的，虽然他仍然拥有 Linux 内核（操作系统的核心部分），并且保留了选择新代码和需要合并的新方法的最终裁定权。现在大家所使用的 Linux，我更倾向于说是由李纳斯•托瓦兹和后来陆续加入的众多 Linux 好者共同开发完成的。</p><blockquote><p>Unix  </p><p>Unix  操作系统由肯•汤普森（Ken Thompson）和丹尼斯•里奇（Dennis Ritchie）发明。它的部分技术来源可追溯到从 1965 年开始的 Multics 工程计划，该计划由贝尔实验室、美国麻省理工学院和通用电气公司联合发起，目标是开发一种交互式的、具有多道程序处理能力的分时操作系统，以取代当时广泛使用的批处理操作系统。</p><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发。Unix  的商标权由国际开放标准组织（The Open Group）所拥有。Unix操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p></blockquote><h2 id="1-3-Linux简介"><a href="#1-3-Linux简介" class="headerlink" title="1.3 Linux简介"></a>1.3 Linux简介</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">引子<br>Linux和我们常见的Windows一样，都是操作系统，<br>例如：新浪、百度、淘宝等互联网公司，他们使用的服务器全都是Linux系统；全球<span class="hljs-number">500</span>强企业<span class="hljs-number">95</span><span class="hljs-comment">%的服务器使用的都是Linux系统。</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-1-什么是-Linux"><a href="#1-3-1-什么是-Linux" class="headerlink" title="1.3.1 什么是 Linux"></a><strong>1.3.1 什么是 Linux</strong></h3><p>Linux是一套免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUnix">类Unix</a><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>，是一个基于<a href="https://baike.baidu.com/item/POSIX">POSIX</a>和Unix的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>和多<a href="https://baike.baidu.com/item/CPU">CPU</a>的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D">64位</a>硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>Linux 的标志和吉祥物是一只名字叫做Tux(它克斯)的企鹅，Linux是基于Unix的。</p><p>Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1575881750752.png" alt="1575881750752"></p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux操作系统不仅仅是被网络运维人员当作服务器使用，Linux既可以当作<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>，又可以当作网络防火墙是Linux的 一大亮点。 </p><p>Linux与其他操作系统相比 ，具有<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>、没有版权、技术社区用户多等特点 ，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈 ，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。</p><h3 id="1-3-2-Linux的特点"><a href="#1-3-2-Linux的特点" class="headerlink" title="1.3.2 Linux的特点"></a>1.3.2 Linux的特点</h3><p><strong>基本思想</strong></p><p>Linux的基本思想有两点：</p><p>第一：一切都是文件</p><p>第二：每个软件都有确定的用途</p><p>其中第一条详细来讲就是系统中的所有都归结为一个文件，包括<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4">命令</a>、<a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6">硬件</a>和<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>设备、<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>、<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B">进程</a>等等对于操作系统<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近</p><p><strong>完全免费</strong></p><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98/62748">程序员</a>参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p><p><strong>完全兼容POSIX1.0标准</strong></p><p>这使得可以在Linux下通过相应的<a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E5%99%A8">模拟器</a>运行常见的<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>、<a href="https://baike.baidu.com/item/Windows">Windows</a>的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。</p><p><strong>多用户、多任务</strong></p><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1">多任务</a>则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</p><p><strong>良好的界面</strong></p><p>Linux同时具有字符界面和<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/8146283">图形界面</a>。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。</p><p><strong>支持多种平台</strong></p><p>Linux可以运行在多种硬件平台上，如具有<a href="https://baike.baidu.com/item/x86/6150538">x86</a>、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001年1月份发布的Linux 2.4版内核已经能够完全支持<a href="https://baike.baidu.com/item/Intel/125450">Intel</a>64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。</p><p><strong>优点</strong></p><p>1)Linux由众多微内核组成，其源代码完全开源；</p><p>2)Linux继承了Unix的特性，具有非常强大的网络功能，其支持所有的因特网协议，包括TCP/<a href="https://baike.baidu.com/item/IPv4/422599">IPv4</a>、 <a href="https://baike.baidu.com/item/TCP/33012">TCP</a>/IPv6和链路层拓扑程序等，且可以利用Unix的网络特性开发出新的协议栈；</p><p>3)Linux系统工具链完整，简单操作就可以配置出合适的开发环境，可以简化开发过程，减少开发中仿真工具的障碍，使系统具有较强的移植性；</p><h2 id="1-4-Linux和Unix区别"><a href="#1-4-Linux和Unix区别" class="headerlink" title="1.4 Linux和Unix区别"></a>1.4 Linux和Unix区别</h2><p><strong>1、开源情况</strong></p><p>Unix  是商业化的，而 Linux 是开源的，是免费、公开源代码的。</p><p><strong>2、硬件适用</strong></p><p>Unix  系统大多是与硬件配套的，也就是说，大多数Unix系统如AIX、HP-UX等是无法安装在 x86 服务器和个人计算机上的，而 Linux则可以运行在多种硬件平台上。</p><p>可以先学习Linux后再学习Unix，因为Linux可以方便的在虚拟机上运行，防止新手的误操作。</p><p><strong>3、本质不同</strong></p><p>Linux是开放源代码的自由软件，用户对前者有很高的自主权，在实际的的开发是处在一个完全开放的环境之中；</p><p>而Unix是对源代码实行知识产权保护的传统商业软件，用户的开发完全是处在一个黑箱之中，只有相关的开发人员才能够接触的产品的原型；</p><blockquote><p>Unix 诞生于 20 世纪 60 年代末，Windows 诞生于 20 世纪 80 年代中期，Linux 诞生于 20 世纪 90 年代初，可以说 Unix是操作系统中的”老大哥”，后来的 Windows 和 Linux 都参考了 Unix </p></blockquote><h2 id="1-5-Linux和Windows区别"><a href="#1-5-Linux和Windows区别" class="headerlink" title="1.5 Linux和Windows区别"></a>1.5 Linux和Windows区别</h2><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><table><thead><tr><th align="left">比较</th><th align="left">Windows</th><th align="left">Linux</th></tr></thead><tbody><tr><td align="left">界面</td><td align="left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td><td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 Unix传承下来，基本命令和操作方法也几乎一致。</td></tr><tr><td align="left">驱动程序</td><td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td><td align="left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td></tr><tr><td align="left">使用</td><td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td><td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td></tr><tr><td align="left">学习</td><td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td><td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td></tr><tr><td align="left">软件</td><td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td><td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td></tr></tbody></table><p>Windows与Linux在其他方面的不同</p><p><strong>开放性</strong></p><p>所谓的开放性就是Linux 操作系统是开放源码系统，可以对其程序进行编辑修改。而微软的Windows 系统是受微软版权保护，就是只能微软内部进行开发及修改。</p><p><strong>文件格式不同</strong></p><p>Windows 操作系统内核是NT，而Linux 是 shell；</p><p>另外，windows 硬盘文件格式是fat32或NTFS，而Linux 需要的文件格式是ext2或ext3，该操作系统还多一个SWAP格式的交换分区</p><p><strong>免费与收费</strong> </p><p>在中国，对个人用户Windows 和Linux 都是免费的，对公用户Windows 需要收费，Linux 是免费的。</p><p><strong>技术支持</strong> </p><p>Windows 较普及。Linux 需要深度的Linux 版块支持。</p><p><strong>安全性</strong> </p><p>Linux 相对Windows 来说安全性更高。 </p><p><strong>开源</strong> </p><p>开源就是指对外部开放软件源代码。Linux 开源，而Windows并不开源。</p><p><strong>使用习惯</strong> </p><p>Windows 放弃了dos的字符模式，主攻图形界面，让桌面系统更易用。Linux 字符模式运行的更好，图形界面还只是附带品，可有可无。</p><p><strong>软件与支持</strong> </p><p>Windows 下可以运行绝大部分软件、玩99.999％的游戏、硬件厂商近乎100%的支持。Linux 下可直接运行的软件数量和win下比起来就是1和99的区别，而且目前选择Linux 的人基本不会考虑玩游戏，同时Linux 正期待更多硬件厂商的支持</p><h2 id="1-6-Linux发行商和常见发行版"><a href="#1-6-Linux发行商和常见发行版" class="headerlink" title="1.6 Linux发行商和常见发行版"></a>1.6 Linux发行商和常见发行版</h2><p>Linux发行版是由个人，自由组织，以及商业机构和志愿者组织编写。它们通常包括了其他的系统软件和应用软件，以及一个用来简化系统初始安装的安装工具，和让软件安装升级的集成管理器。大多数系统还包括了像提供GUI界面的XFree86之类的曾经运行于BSD的程序。<br>一个典型的Linux发行版包括：Linux内核，一些GNU程序库和工具，命令行shell，图形界面的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件</p><p>Linux发行版的某些版本是不需要安装，只需通过CD或者可启动的USB存储设备就能使用的版本，他们称为LiveCD。</p><p> <img src="https://gitee.com/wxqgm/pic/raw/master/img/1575879998775.png" alt="1575879998775"></p><p><strong>Linux的版本号分为两部分：内核版本和发行版本</strong>。</p><p><strong>1．Linux的内核版本</strong><br>内核版本指的是在Linus Torvalds领导下的开发小组开发出的系统内核的版本号，通常，内核版本号的第二位是偶数表示是稳定的版本，如2.6.25；是奇数表示有一些新的东西加入，是不稳定的测试版本，如2.5.6。Linux操作系统的核心就是它的内核，Linus Torvalds和他的小组在不断地开发和推出新内核。</p><p>任务：进程调度、内存管理、配置管理虚拟文件系统、提供网络接口以及支持进程间通信。像所有软件一样，Linux的内核也在不断升级。</p><p><strong>2．Linux的发行版本</strong><br>一个完整的操作系统不仅仅只有内核，还包括一系列为用户提供各种服务的外围程序。外围程序包括GNU程序库和工具，命令行shell，图形界面的X Window系统和相应的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件。所以，许多个人、组织和企业，开发了基于GNU/Linux的Linux发行版，他们将Linux系统的内核与外围应用软件和文档包装起来，并提供一些系统安装界面和系统设置与管理工具， 这样就构成了一个发行版本。<br>实际上，Linux的发行版本就是Linux内核再加上外围的实用程序组成的一个大软件包而已。相对于操作系统内核版本，发行版本的版本号是随发布者的不同而不同，与Linux系统内核的版本号是相对独立的，例如：RedHat EnterpriseLinux 5.2的操作系统内核是Linux-2.6.18。<br>Linux的发行版本大体可以分为两类：</p><p>一类是商业公司维护的发行版本</p><p>一类是社区组织维护的发行版本，前者以著名的RedHatLinux为代表，后者以Debian为代表</p><p>以下为Linux的主流版本：</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1575882315996.png" alt="1575882315996"></p><p><strong>以下是主要的发行版本</strong></p><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang">需要注意的：<br>下面的内容主要是介绍了下Linux发行家族以及发行版本的一些详细信息，虽然我们当前的课程讲解的是CentOS,但是其他的一些发行商、主流的发行版本比如Ubuntu、Redhat也需要让学生多多了解下，毕竟这是Linux体系内产品线<br>注意<br>下面的文字虽然很多，但是只要让学生知道有这么回事即可<br>在下面会简单的总结..<br></code></pre></div></td></tr></table></figure><p><strong>1、Debian 介绍</strong></p><p>Debian名字的由来—-DebianGNU/Linux是由一个叫做伊恩·默多克（IanMurdock）在1993年发起的，他的名字以Ian开头，他太太的名字Debra开头三个字母是Deb。</p><p>Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。Debian最早由 Ian Murdock于1993年创建，分为三个版本分支： stable(服务器版), testing(稳定版) 和unstable(测试版)。</p><p><strong>2、Ubuntu介绍</strong></p><p>Ubuntu严格来说不能算一个独立的发行版本，Ubuntu是基于Debian的unstable版本加强而来，可以这么说，Ubuntu就是一个拥有Debian所有的优点，以及自己所加强的优点的近乎完美的 Linux桌面系统。</p><p>共分三个版本:</p><ul><li>基于Gnome的Ubuntu，</li><li>基于KDE的Kubuntu以。</li><li>基于Xfc的 Xubuntu。</li></ul><p>特点是界面非常友好，容易上手，对硬件的支持非常全面，是最适合做桌面系统的Linux发行版本。稳定性，其实都差不多，难易度嘛，</p><p>Ubuntu 默认桌面环境采用 GNOME，一个 Unix和 Linux 主流桌面套件和开发平台。</p><p>Ubuntu的版本和发布号<br>Ubuntu的版本号是由该次发布的年份和月份组成，并未反映其实际版本。我们的首次发布是在2004年10月，因此该版本为4.10。当前版本(DapperDrake)于2006年6月发布，因此版本号为6.06 LTS。</p><p><strong>3、Redhat</strong></p><p>可能这是最著名的Linux版本了，Red Hat Linux已经创造了自己的品牌，越来越多的人听说过它。Red Hat在1994年创业，当时聘用了全世界500多名员工，他们都致力于开放的源代码体系。<br>Red Hat Linux是公共环境中表现上佳的服务器。它拥有自己的公司，能向用户提供一套完整的服务，这使得它特别适合在公共网络中使用。这个版本的Linux也使用最新的内核，还拥有大多数人都需要使用的主体软件包。<br>Red Hat Linux的安装过程也十分简单明了。它的图形安装过程提供简易设置服务器的全部信息。磁盘分区过程可以自动完成，还可以选择GUI工具完成，即使对于 Linux新手来说这些都非常简单。选择软件包的过程也与其他版本类似；用户可以选择软件包种类或特殊的软件包。系统运行起来后，用户可以从Web站点和 Red Hat那里得到充分的技术支持。我发现Red Hat是一个符合大众需求的最优版本。在服务器和桌面系统中它都工作得很好。Red Hat的唯一缺陷是带有一些不标准的内核补丁，这使得它难于按用户的需求进行定制。 Red Hat通过论坛和邮件列表提供广泛的技术支持，它还有自己公司的电话技术支持，后者对要求更高技术支持水平的集团客户更有吸引力</p><p><strong>4、Fedora</strong></p><p>Fedora和Redhat这两个Linux的发行版放联系很密切。Redhat 自9.0以后，不再发布桌面版的，而是把这个项目与开源社区合作，于是就有了Fedora 这个 Linux 发行版。Fedora项目是由 Red Hat 赞助，由开源社区与 Red Hat 工程师合作开发的项目统称。Fedora 的目标，是推动自由和开源软件更快地进步。</p><p>特点：<br>１、 Fedora 是一个开放的、创新的、前瞻性的操作系统和平台，基于 Linux。它允许任何人自由地使用、修改和重发布，无论现在还是将来。可运行的体系结构包括x86(即i386),x86_64 和PowerPC！<br>２、Fedora 可以说是Redhat 桌面版本的延续，只不过是与开源社区合作。</p><p>３、Fedora 是一个独立的inux发行版本的操作系统。</p><p><strong>5</strong>、<strong>centos</strong></p><p>CentOS（Community ENTerprise Operating System）是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用（我会告诉你，以为企业想省钱，运维要靠这个东西来赚钱嘛，国内运维主流是CentOS剩下版本很少）。两者的不同，在于CentOS并不包含封闭源代码软件，CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。每个版本的CentOS都会获得十年的支持（通过安全更新方式）。新版本的 CentOS 大约每两年发行一次，而每个版本的 CentOS 会定期（大概每六个月）更新一次，以便支持新的硬件。这样，建立一个安全、低维护、稳定、高预测性、高重复性的 Linux 环境</p><p><strong>6、Slackware介绍</strong></p><p>Slackware 由PatrickVolkerding(帕特里克.沃克登)创建于1992年。算起来应当是历史最悠久的Linux发行版。尽管如此，Slackware仍然深入人心（大部分都是比较有经验的 Linux老手）。Slackware稳定、安全，所以仍然有大批的忠实用户。由于Slackware尽量采用原版的软件包而不进行任何修改，所以制造新 bug的几率便低了很多。Slackware的版本更新周期较长（大约1年），但是新版本的软件仍然不间断的提供给用户下载。</p><p><strong>7、openSUSE介绍</strong></p><p>SUSE是德国最著名的Linux发行版，在全世界范围中也享有较高的声誉。SUSE自主开发的软件包管理系统也大受好评。SUSE于2003年年末被Novell收购。SUSE在收购之后的发布显得比较混乱，比如9.0版本是收费的，而10.0版本（也许由于各种压力）又免费发布。这使得一部分用户感到困惑，也转而使用其它发行版本。最近还跟微软扯到了一起。但是瑕不掩瑜，SUSE仍然是一个非常专业、优秀的发行版。</p><p>openSUSE 项目是由Novell公司资助的全球性社区计划，旨在推进 Linux 的广泛使用。这个计划提供免费的openSUSE 操作系统。这里是一个由普通用户和开发者共同构成的社区，我们拥有一个共同的目标—创造世界上最好用的 Linux 发行版。openSUSE 是 Novell 公司发行的企业级 Linux 产品的系统基础。</p><p>openSUSE 项目是由Novell 发起的开源社区计划。 旨在推进 Linux 的广泛使用。提供了自由简单的方法来获得世界上最好用的 Linux 发行版，SUSE Linux。openSUSE 项目为 Linux 开发者和爱好者提供了开始使用 Linux 所需要的一切。</p><p><strong>8、中国大陆的Linux发行版</strong></p><p>红旗Linux(RedflagLinux) ，冲浪Linux(Xteam Linux) ，蓝点Linux ， GNU/Linux，OpenDesktop等等 。</p><p><strong>9、 台湾地区的Linux发行版</strong></p><p>鸿奇Linux</p><p><strong>目前最著名的发行版本：Debian，ubuntu、OpenSuse(原Suse)、CentOS、fedora等。国内比较著名的红旗Linux版本</strong></p><blockquote><p>对于上面的知识我们做下重点总结</p><ul><li><strong>redhat</strong>：目前，全球最大的<strong>linux</strong>发行厂商，功能全面、稳定。<ul><li><strong>Redhat</strong> 被 <strong>IBM</strong> 收购!</li></ul></li><li><strong>ubuntu</strong>：目前，是linux桌面操作系统做的最好的。</li><li><strong>centos</strong>：免费版的redhat，<strong>centos</strong> 基于 <strong>redhat</strong> 发行版基础之上，再重新编译发布的版本。<ul><li>目前 <strong>centos</strong> 已经被 <strong>Redhat</strong> 公司收购，但是依然免费</li></ul></li></ul></blockquote><h2 id="1-7-Linux-应用领域"><a href="#1-7-Linux-应用领域" class="headerlink" title="1.7 Linux 应用领域"></a>1.7 Linux 应用领域</h2><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位。在企业级开发中，我们通常使用Linux作为我们的服务器。</p><p>比如：服务器系统Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </p><p>嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，高性能运算、计算密集型应用Linux有强大的运算能力。</p><p><strong>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎</strong>。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><h2 id="1-8-Linux之CentOS"><a href="#1-8-Linux之CentOS" class="headerlink" title="1.8 Linux之CentOS"></a><strong>1.8 Linux之CentOS</strong></h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">前面章节介绍了一些Linux的基本知识，前已经对Linux有了一个初步的认识，也知道了在Linux发行版中有各个家族的发行版本；比如比较知名的ubuntu、CentOS，在今天的Linux课程中我们将采用发行版CentOS作为我们Linux课程的讲解内容。<br></code></pre></div></td></tr></table></figure><p><strong>CentOS</strong>，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本；是一个稳定，可预测，可管理和可复制的免费企业级计算平台</p><p><strong>主要特点:</strong></p><p>1.主流： 目前的Linux操作系统主要应用于生产环境，主流企业级Linux系统仍旧是RedHat或者CentOS<br>2.免费： RedHat 和CentOS差别不大，CentOS是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本<br>3.更新方便：CentOS独有的yum命令支持在线升级，可以即时更新系统，不像RED HAT那样需要花钱购买支持服务！</p><p><strong>我们在当前课程中的环境：</strong></p><p>Windows7 , VMware Workstation15.02, CentOS Linux release 7.6.1810 </p><h2 id="1-9-总结"><a href="#1-9-总结" class="headerlink" title="1.9 总结"></a>1.9 总结</h2><p>当前章节主要介绍了Linux发行的主要版本（我们使用的是CentOS Linux release 7.6.1810 ）、以及与Unix、Windows系统的区别；主要让学生了解Linux是基于Unix的以及与Windows一样，Linux也是操作系统即可。</p><h1 id="2-系统与设置命令"><a href="#2-系统与设置命令" class="headerlink" title="2 系统与设置命令"></a>2 系统与设置命令</h1><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在前面的两个章节中，我们主要介绍了Linux基本知识和虚拟机的安装，从当前章节开始，我们一起学习下Linux的基本命令，在当前章节，我们先简单的学习下一些系统的基本命令，慢慢的由浅入深，在后面的章节中我们将学习其他的命令比如文件操作、备份压缩等<br></code></pre></div></td></tr></table></figure><h2 id="2-1-学习命令的原因"><a href="#2-1-学习命令的原因" class="headerlink" title="2.1 学习命令的原因"></a>2.1 学习命令的原因</h2><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm">命令我们可以理解成在Windows中我们常常为了查看<span class="hljs-built_in">ip</span>输入的ipconfig，在Linux中也有很多的命令，比如操作目录、文件、网络、磁盘等等命令<br></code></pre></div></td></tr></table></figure><ul><li>Linux刚面世时并没有图形界面, 所有的操作全靠命令完成, 如 <strong>磁盘操作、文件存取、目录操作、进程管理、文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 远程 通过SSH客户端 来完成的， 并没有图形界面， 所有的维护工作都需要通过命令来完成</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576225778294.png" alt="1576225778294"></p><p>在职场中， 作为后端程序员或者运维， 必须要或多或少的掌握一些Linux常用的终端命令</p><ul><li>Linux发行版本的命令大概有200多个， 但是常用的命令只有几十个而已</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">总结<br>学习终端命令的技巧：<br><span class="hljs-bullet">- </span>不需要死记硬背， 对于常用命令， 记住语法是关键，在用的时候去查下参数选项，有的很常用的命令，用的多自然就记住了<br><span class="hljs-bullet">- </span>不要尝试一次学会所有的命令， 有些命令是非常不常用的，临时遇到，就去根据语法找参数选项<br></code></pre></div></td></tr></table></figure><h2 id="2-2-Linux-用户和用户组管理"><a href="#2-2-Linux-用户和用户组管理" class="headerlink" title="2.2 Linux 用户和用户组管理"></a>2.2 Linux 用户和用户组管理</h2><h3 id="2-2-1-Linux账号管理"><a href="#2-2-1-Linux账号管理" class="headerlink" title="2.2.1 Linux账号管理"></a>2.2.1 Linux账号管理</h3><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang">从当前章节开始，我们正式进入CentOS的学习，我们先从简单的命令开始，比如操作账号、用户组、系统管理等。<br>在实际使用场景中，用户账号的管理主要涉及到用户账号的添加、修改和删除操作。<br>现在，我们就通过命令的方式添加用户账号（账号名字可以自定义，但是是要符合书写规范）<br>在操作前，确保我们的SecureCRT成功连接到了虚拟机.<br>下面的章节不在赘述SecureCRT，默认已经成功连接。<br></code></pre></div></td></tr></table></figure><h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1) 添加用户"></a>1) 添加用户</h4><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">我们在Windows创建账号主要是是控制面板</span>--<span class="hljs-comment">用户账户</span>--<span class="hljs-comment">创建一个新账户，这是在Windows创建账户的流程，而在Linux中，我们可以通过命令的方式进行创建账户</span><br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：管理员用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd 选项 用户名<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的用户名(后续我们可以使用这个用户名进行系统登录)。</p></li></ul><p>添加用户czbk（传智播客的首拼）执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd  czbk<br></code></pre></div></td></tr></table></figure><p>我们使用useradd命令创建了一个用户czbk</p><p>useradd 可用来建立用户帐号。帐号建好之后，再用 passwd 设定帐号的密码。</p><p>执行如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576043805214.png" alt="1576043805214"></p><p>由上图我们发现，我们在使用useradd新增用户的时候，出现了权限不足，也就是说我们使用用户itcast没有创建用户的权限。</p><p>我们通过管理员账号root进行创建，首先我们从控制台中切换到root</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su root<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576042675759.png" alt="1576042675759"></p><p>在 密码的地方输入我们的root密码【root】即可进入到root用户下。</p><p>我们在root下继续创建czbk用户</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576043845543.png" alt="1576043845543"></p><p>以下是useradd常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576049906893.png" alt="1576049906893"></p><h4 id="2-用户口令"><a href="#2-用户口令" class="headerlink" title="2) 用户口令"></a>2) 用户口令</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子：<br>相当于我们在Windows系统中给个用户更改密码，只是我们在CentOS中是更改密码是通过命令完成的。<br></code></pre></div></td></tr></table></figure><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用</p><p><strong>使用者权限：管理员用户</strong></p><p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd 选项 用户名<br></code></pre></div></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>设置当前用户的口令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd czbk<br></code></pre></div></td></tr></table></figure><p>此处我们设置密码和itcast账号密码一致，为【Itheima888】</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576044108094.png" alt="1576044108094"></p><h4 id="3-修改用户"><a href="#3-修改用户" class="headerlink" title="3) 修改用户"></a>3) 修改用户</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">相当于我们在Windows系统中修改一个用户，只是我们在CentOS中是修改用户是通过命令完成的。<br></code></pre></div></td></tr></table></figure><p>usermod 命令通过修改系统帐户文件来修改用户账户信息</p><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p><strong>使用者权限：管理员用户</strong></p><p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod 选项 用户名<br></code></pre></div></td></tr></table></figure><p>下面命令将用户czbk用户名修改成czbk2019</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -l czbk2019  czbk<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576046509680.png" alt="1576046509680"></p><p>以下是usermod常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576049946335.png" alt="1576049946335"></p><h4 id="4-删除用户"><a href="#4-删除用户" class="headerlink" title="4) 删除用户"></a>4) 删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">相当于我们在Windows系统中删除一个用户，只是我们在CentOS中是删除用户是通过命令完成的。<br></code></pre></div></td></tr></table></figure><p>假如我们其中一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p><strong>使用者权限：管理员用户</strong></p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">userdel 选项 用户名<br></code></pre></div></td></tr></table></figure><p>-f：强制删除用户，即使用户当前已登录;</p><p>-r：删除用户的同时，删除与用户相关的所有文件</p><p>此命令删除用户czbk2019</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">userdel czbk2019<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576047020612.png" alt="1576047020612"></p><p>成功删除用户czbk2019</p><p>以下是userdel常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576049978916.png" alt="1576049978916"></p><h3 id="2-2-2-Linux用户组"><a href="#2-2-2-Linux用户组" class="headerlink" title="2.2.2 Linux用户组"></a>2.2.2 Linux用户组</h3><p><strong>引子：</strong></p><p><strong>为了方便用户管理, 提出了 组 的概念, 如下图所示</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576572808687.png" alt="1576572808687"></p><p><strong>新增一个账户，它默认属于自己（账户）的组</strong></p><p><strong>比如新建账户【张三】，那么它默认对应的组就是张三</strong></p><p><strong>一个用户可以有一个或者多个组</strong></p><p><strong>假如说（如上图），我们在企业级开发过程中，我们有多个组，其中一个开发组对应三个账户，张三、李四、王五、如果就像上面提到的，一个用户默认对应一个组，那么三个账户张三、李四、王五就有了三个不同的组，如果大家都操做一个文件，在进行权限分配的时候，就要对不同的三个组进行授权，显然这样是不合理的，因为太过繁琐。</strong></p><p><strong>所以，才有了组（新建组）的概念，我们把张三、李四、王五统一放到【开发组】，在对文件授权的时候，我们只对【开发组】进行授权由此，这样的话【张三、李四、王五】都有相等的权利操作了。</strong></p><h4 id="1-增加用户组"><a href="#1-增加用户组" class="headerlink" title="1) 增加用户组"></a>1) 增加用户组</h4><p>新增一个用户组（组名可见名知意，符合规范即可），然后将用户添加到组中</p><p><strong>使用者权限：管理员用户</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd 选项 用户组<br></code></pre></div></td></tr></table></figure><p>使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li></ul><p>新增用户组czbk-it</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd czbk-it<br></code></pre></div></td></tr></table></figure><p>上面的命令向系统中增加了一个新组czbk-it，新组的组标识号是在当前已有的最大组标识号的基础上加1</p><p>以下是groupadd常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576050003979.png" alt="1576050003979"></p><h4 id="2-修改用户组"><a href="#2-修改用户组" class="headerlink" title="2) 修改用户组"></a>2) 修改用户组</h4><p><strong>使用者权限：管理员用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod 选项 用户组<br></code></pre></div></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod  -n czbk-it-2019  czbk-it<br></code></pre></div></td></tr></table></figure><p>上面的命令将组czbk-it的组名修改为czbk-it-2019。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576047810973.png" alt="1576047810973"></p><p>以下是groupmod常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576050645612.png" alt="1576050645612"></p><h4 id="3-查询用户所属组"><a href="#3-查询用户所属组" class="headerlink" title="3) 查询用户所属组"></a>3) 查询用户所属组</h4><p>在查询用户所属的用户组前，我们先增加一个用户ituser-groups</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd ituser-groups<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576050663149.png" alt="1576050663149"></p><p>要查询一个用户属于哪个用户组，使用groups命令，其格式如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groups 用户名<br></code></pre></div></td></tr></table></figure><p>查询用户ituser-groups属于某个用户组，执行groups命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groups ituser-groups<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576050797421.png" alt="1576050797421"></p><p>由此可见，ituser-groups用户属于用户组ituser-groups（用户组默认与用户名一样）</p><h4 id="4-删除用户组"><a href="#4-删除用户组" class="headerlink" title="4) 删除用户组"></a>4) 删除用户组</h4><p><strong>使用者权限：管理员用户</strong></p><p>要删除一个已有的用户组，使用groupdel命令，其格式如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupdel 用户组<br></code></pre></div></td></tr></table></figure><p>删除czbk-it-2019用户组</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupdel czbk-it-2019<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576051028346.png" alt="1576051028346"></p><p>删除成功</p><p>以下是groupdel常用选项</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576050031859.png" alt="1576050031859"></p><h3 id="2-2-3-将用户添加到组"><a href="#2-2-3-将用户添加到组" class="headerlink" title="2.2.3 将用户添加到组"></a>2.2.3 将用户添加到组</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子：<br>在上面我们学习如何新增用户，也学习了如何新增用户组，在当前的小节中，我们新建一个用户、新建一个用户组、然后把新建的用户添加到新的组中<br>在实际开发过程中，我们通常把多个用户按照业务需求归并到统一的一个组中，进行有序管理<br></code></pre></div></td></tr></table></figure><p>1、创建一个新的组，并添加组ID（需要切换到root用户）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd -g 8888 itbj2020group<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576137760529.png" alt="1576137760529"></p><p>2、创建3个用户（需要切换到root用户）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd  itbeijinguser1<br>useradd  itbeijinguser2<br>useradd  itbeijinguser3<br></code></pre></div></td></tr></table></figure><p>3、将上面三个用户添加到组itbj2020group</p><p>我们通过passwd命令将三个用户添加到组</p><p><strong>什么是gpasswd：</strong></p><p>gpasswd 是 Linux 下工作组文件 /etc/group 和 /etc/gshadow 管理工具，用于将一个用户添加到组或者从组中删除。</p><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gpasswd [可选项] 组名<br></code></pre></div></td></tr></table></figure><p><strong>将上面的三个用户使用gpasswd添加到组（需要切换到root用户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gpasswd -a itbeijinguser1 itbj2020group<br>gpasswd -a itbeijinguser2 itbj2020group<br>gpasswd -a itbeijinguser3 itbj2020group<br></code></pre></div></td></tr></table></figure><p><strong>执行如下</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576139901757.png" alt="1576139901757"></p><p><strong>查看用户组下所有用户（所有用户）</strong></p><blockquote><p>注意</p><p>此处的grep命令我们将在文件管理章节详细讲解，这里先使用它查看下效果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep &#x27;itbj2020group&#x27; /etc/group<br></code></pre></div></td></tr></table></figure><p>执行效果如下（或者直接打开/etc/group文件都可以）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576139987480.png" alt="1576139987480"></p><p>由上图可知：三个用户全部都加入到了itbj2020group组。</p><h2 id="2-3-系统管理"><a href="#2-3-系统管理" class="headerlink" title="2.3 系统管理"></a>2.3 系统管理</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">系统管理，说的就是我们的CentOS系统，它不同于Windwos，CentOS是字符界面，我们需要通过命令进行操作，在当前章节，我们先从基本命令学起，比如创建用户、设置密码、修改用户以及用户组的相关操作。也为我们后面的章节打下基础<br></code></pre></div></td></tr></table></figure><h3 id="2-3-1-日期管理"><a href="#2-3-1-日期管理" class="headerlink" title="2.3.1 日期管理"></a>2.3.1 日期管理</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">当前日期如果通过<span class="hljs-built_in">date</span>进行设置，在系统重启后不会保存<span class="hljs-built_in">date</span>的设置，常用的只是通过<span class="hljs-built_in">date</span>命令查看日期<br></code></pre></div></td></tr></table></figure><p>date 可以用来显示或设定系统的日期与时间</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">date [参数选项]<br></code></pre></div></td></tr></table></figure><p>参数</p><p>-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；<br>-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；<br>-u：显示GMT；<br>–help：在线帮助；<br>–version：显示版本信息</p><p>1、设置时间</p><p>用 -s选项可以设置系统时间，如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">date -s &quot;2019-12-11 16:15:00&quot;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576052178420.png" alt="1576052178420"></p><p>2、显示时间</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">date<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576052234012.png" alt="1576052234012"></p><p><strong>（1）UTC</strong> </p><p>协调世界时，又称世界统一时间、世界标准时间、国际协调时间。由于英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。。</p><p><strong>（2）GMT</strong></p><p>即<a href="https://baike.baidu.com/item/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB/3065623">格林尼治</a> 平太阳时间，是指格林尼治所在地的标准时间，也是表示地球自转速率的一种形式</p><p>**外文名:**Universal Time</p><p><strong>其他外文名</strong>G.M.T.(Greenwich Mean Time)</p><p><strong>（3）CST</strong></p><p>北京时间 （中国国家标准时间）<br><strong>北京时间是中国采用国际时区东八时区的区时作为标准时间</strong>。<br>北京时间并不是北京（东经116.4°）的地方时间，而是东经120°的地方时间，故东经120度地方时比北京的地方时早约14分半钟。因为北京处于国际时区划分中的东八区，同格林尼治时间（世界时）整整相差8小时（即北京时间=世界时+8小时），故命名为“北京时间”。东八区包括的范围从东经112.5°到东经127.5°，以东经120°为中心线，东西各延伸7.5°，总宽度为15°的区域。<br><strong>而中国幅员辽阔，东西相跨5个时区（即东五区、东六区、东七区、东八区、东九区5个时区）授时台必须建在地理中心地带，从而也就产生了长短波授。“北京时间”与“北京当地时间”是两个概念，  “北京时间”的发播不在北京，而在陕西蒲城（处于东七区）</strong></p><p><strong>（4）东八区</strong></p><p>东八区（<a href="https://baike.baidu.com/item/UTC">UTC</a>/<a href="https://baike.baidu.com/item/GMT/6026868">GMT</a>+08:00）是比<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E5%8D%8F%E8%B0%83%E6%97%B6%E9%97%B4/8036498">世界协调时间</a>（UTC）/<a href="https://baike.baidu.com/item/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB%E6%97%B6%E9%97%B4/410004">格林尼治时间</a>（GMT）快8小时的时区，理论上的位置是位于<a href="https://baike.baidu.com/item/%E4%B8%9C%E7%BB%8F/8661846">东经</a>112.5度至127.5度之间，是东盟标准的其中一个候选时区。当格林尼治标准时间为0:00时，东八区的标准时间为08:00</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">总结：<br>上面提到了很多知识：即UTC/GMT/CST/东八区<br>总结一下就是，北京时间<span class="hljs-comment">(中国国家标准时间CST)</span>采用东八区区时，即：<br>协调世界时<span class="hljs-comment">(UTC)</span><span class="hljs-number">+8</span>  /   格林尼治时间<span class="hljs-comment">(GMT)</span><span class="hljs-number">+8</span><br>也就是说<span class="hljs-number">+8</span>后的时间才是北京时间<br></code></pre></div></td></tr></table></figure><h3 id="2-3-2-显示用户"><a href="#2-3-2-显示用户" class="headerlink" title="2.3.2 显示用户"></a>2.3.2 显示用户</h3><p>logname命令用于显示用户名称。</p><p>执行logname指令，它会显示目前用户的名称</p><p><strong>语法为如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">logname [--help][--version]<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>–help 　在线帮助。</li><li>–vesion 　显示版本信息。</li></ul><p>显示登录账号的信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">logname<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576053311351.png" alt="1576053311351"></p><h3 id="2-3-3-su切换账户"><a href="#2-3-3-su切换账户" class="headerlink" title="2.3.3 su切换账户"></a>2.3.3 su切换账户</h3><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">引子：<br>比如我们在新增用户、修改用户或者操作用户组的时候常常需要切换到管理员账户，这个时候，我们就可以使用<span class="hljs-keyword">su</span>进行快速切换<br></code></pre></div></td></tr></table></figure><p>su命令用于变更为其他使用者的身份，除 root 外，需要键入该使用者的密码。</p><p>使用权限：所有使用者。</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su <br></code></pre></div></td></tr></table></figure><p>变更帐号为 root 并在执行 ls 指令后退出返回原使用者</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su -c ls root<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576054831537.png" alt="1576054831537"></p><p>切换到root</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su root<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576054846742.png" alt="1576054846742"></p><p>这样的话，我们就进入到了root用户下。</p><h3 id="2-3-4-id命令"><a href="#2-3-4-id命令" class="headerlink" title="2.3.4 id命令"></a>2.3.4 id命令</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">我们如果需要查看当前账号详细信息的时候，比如查看它的用户<span class="hljs-built_in">id</span>、群组<span class="hljs-built_in">id</span>以及所属组的时候，我们就可以使用<span class="hljs-built_in">id</span>命令进行查看<br></code></pre></div></td></tr></table></figure><p> id命令用于显示用户的ID，以及所属群组的ID。</p><p>id会显示用户以及所属群组的实际与有效ID。若两个ID相同，则仅显示实际ID。若仅指定用户名称，则显示目前用户的ID。</p><p>使用者权限：所有用户</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">id <span class="hljs-selector-attr">[-gGnru]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[用户名称]</span><br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>-g或–group 　显示用户所属群组的ID。</li><li>-G或–groups 　显示用户所属附加群组的ID。</li><li>-n或–name 　显示用户，所属群组或附加群组的名称。</li><li>-r或–real 　显示实际ID。</li><li>-u或–user 　显示用户ID。</li><li>-help 　显示帮助。</li><li>-version 　显示版本信息。</li></ul><p><strong>显示当前用户信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">id<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576578213110.png" alt="1576578213110"></p><blockquote><p>总结</p><p>id命令参数虽然很多</p><p>但是常用的也就是id命令，不带参数的</p><p>主要看他的uid和组信息</p></blockquote><h3 id="2-3-5-sudo执行"><a href="#2-3-5-sudo执行" class="headerlink" title="2.3.5 sudo执行"></a>2.3.5 sudo执行</h3><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">比如我们使用普通用户操作用户或者操作用户组、以及修改网卡配置文件的时候，需要切换<span class="hljs-built_in">到root</span>用户才操作，此时我们可以使用sudo命令提高普通用户的操作权限，以达到操作目的<br></code></pre></div></td></tr></table></figure><p>sudo:控制用户对系统命令的使用权限,root允许的操作。</p><p>通过sudo可以提高普通用户的操作权限</p><p>使用者权限：普通用户</p><p><strong>语法如下：</strong></p><p>sudo -V<br>sudo -h<br>sudo -l<br>sudo -v<br>sudo -k<br>sudo -s<br>sudo -H<br>sudo [ -b ] [ -p prompt ] [ -u username/#uid] -s<br>sudo command</p><p><strong>参数说明</strong>：</p><ul><li>-V 显示版本编号</li><li>-h 会显示版本编号及指令的使用方式说明</li><li>-l 显示出自己（执行 sudo 的使用者）的权限</li><li>-v 因为 sudo 在第一次执行时或是在 N 分钟内没有执行（N 预设为五）会问密码，这个参数是重新做一次确认，如果超过 N 分钟，也会问密码</li><li>-k 将会强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）</li><li>-b 将要执行的指令放在背景执行</li><li>-p prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称， %h 会显示主机名称</li><li>-u username/#uid 不加此参数，代表要以 root 的身份执行指令，而加了此参数，可以以 username 的身份执行指令（#uid 为该 username 的使用者号码）</li><li>-s 执行环境变数中的 SHELL 所指定的 shell ，或是 /etc/passwd 里所指定的 shell</li><li>-H 将环境变数中的 HOME 指定为要变更身份的使用者HOME目录（如不加 -u 参数就是系统管理者 root ）</li><li>command 要以系统管理者身份（或以 -u 更改为其他人）执行的指令</li></ul><p>sudo命令使用</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo ls<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576056341831.png" alt="1576056341831"></p><p>指定root用户执行指令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo -u root ls -l<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576056180063.png" alt="1576056180063"></p><p><strong>修改网卡配置文件</strong></p><p>比如，在下面的例子中，我们使用普通用户修改网卡的配置文件，在进行保存的时候，提示我们【无法打开并写入文件】，那么此时，我们可以通过sudo命令来提升自己的写入权限</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33 <br></code></pre></div></td></tr></table></figure><p>执行效果如下（保存）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576494207598.png" alt="1576494207598"></p><p>然后点击回车</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576493914410.png" alt="1576493914410"></p><p>那么我们在修改上面的 命令，使用sudo进行修改</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo   vi /etc/sysconfig/network-scripts/ifcfg-ens33 <br></code></pre></div></td></tr></table></figure><p>执行效果如下（键入itcast密码）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576494108199.png" alt="1576494108199"></p><p>执行保存</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576494276066.png" alt="1576494276066"></p><p>我们发现此时就不在报错了</p><h3 id="2-3-6-top命令"><a href="#2-3-6-top命令" class="headerlink" title="2.3.6 top命令"></a>2.3.6 top命令</h3><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">在企业级开发中，开发人员（运维人员也会经常使用）常常为了查看服务器上运行的程序占用的<span class="hljs-meta">CPU</span>情况以及占用内存情况，目的就是检测我们的程序是否在正常范围内运行<br></code></pre></div></td></tr></table></figure><p>top命令用于实时显示 process 的动态。</p><p>使用权限：所有使用者。</p><p><strong>显示进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">top<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576495173035.png" alt="1576495173035"></p><p><strong>各进程（任务）的状态监控属性解释说明：</strong><br>PID — 进程id<br>USER — 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）</p><p><strong>显示完整命令，与top命令不同的就是command属性像是进行了命令补全</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">top -c<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576544383182.png" alt="1576544383182"></p><p><strong>显示指定的进程信息，以下显示进程号为6972的进程信息，CPU、内存占用率等</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">top -p 6972<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576544720729.png" alt="1576544720729"></p><blockquote><p>top命令的用法很多</p><p>但是常用的就是top（不带参数），有的时候，在进程比较多的时候，我们常常记住进程的pid，然后通过top -p pid进行查看</p><p>也就是说，top+ top -p是经常被用到的</p></blockquote><h3 id="2-3-7-ps命令"><a href="#2-3-7-ps命令" class="headerlink" title="2.3.7 ps命令"></a>2.3.7 ps命令</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span>命令类似于我们在Windows中通过任务管理器查看进程信息<br></code></pre></div></td></tr></table></figure><p>Linux ps命令用于显示当前进程 (process) 的状态信息</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps <br></code></pre></div></td></tr></table></figure><p>显示进程信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -A <br></code></pre></div></td></tr></table></figure><p>显示指定用户信息</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> <span class="hljs-literal">-u</span> itcast<br></code></pre></div></td></tr></table></figure><p>显示所有进程信息 </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -ef <br></code></pre></div></td></tr></table></figure><h3 id="2-3-8-kill命令"><a href="#2-3-8-kill命令" class="headerlink" title="2.3.8 kill命令"></a>2.3.8 kill命令</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">引子：<br>前面，我们刚刚学习完了Windows上开发，比如，我们经常遇到的要给问题就是，我们需要经常的启动或者重启tomcat，有的时候会报端口冲突，这个时候，我们可能就去Windows的任务管理器中去结束这个进程<br>那么在Linux中我们可以通过<span class="hljs-built_in">kill</span>命令来实现Windwos上手工结束进程的操作<br></code></pre></div></td></tr></table></figure><p>Linux kill命令用于删除执行中的程序或工作(可强制中断)</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]<br></code></pre></div></td></tr></table></figure><p> <strong>参数说明</strong>：</p><ul><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。</li><li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li><li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li></ul><p>杀死一个进程</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill 15642<br></code></pre></div></td></tr></table></figure><p>强制杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill -KILL 15642<br></code></pre></div></td></tr></table></figure><p>彻底杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill -9 15642<br></code></pre></div></td></tr></table></figure><p>杀死指定用户所有进程</p><p>1.方法一 过滤出itcast用户进程 </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill -9 $(ps -ef | grep itcast) <br></code></pre></div></td></tr></table></figure><p>2.方法二，直接杀死</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kill -u itcast<br></code></pre></div></td></tr></table></figure><blockquote><p>注意</p><p>上面列举了很多kill进程的命令</p><p>但是我们我们常用的就是kill -9命令，我们常常找到进程的pid</p><p>然后通过kill -9进行杀死进程</p></blockquote><h3 id="2-3-9-关机命令"><a href="#2-3-9-关机命令" class="headerlink" title="2.3.9 关机命令"></a>2.3.9 关机命令</h3><p>shutdown命令可以用来进行关闭系统，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机</p><p>使用者权限：管理员用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown [-t seconds] [-rkhncfF] time [message]<br></code></pre></div></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-t seconds : 设定在几秒钟之后进行关机程序。</li><li>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。</li><li>-r : 关机后重新开机。</li><li>-h : 关机后停机。</li><li>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。</li><li>-c : 取消目前已经进行中的关机动作。</li><li>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。</li><li>-F : 关机时，强迫进行 fsck 动作。</li><li>time : 设定关机的时间。</li><li>message : 传送给所有使用者的警告讯息。</li></ul><p>立即关机</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown -h now<br>或者<br>shudown<br></code></pre></div></td></tr></table></figure><p>指定1分钟后关机，1分钟关机并显示警告信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown +1 “System will shutdown after 1 minutes” <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576059932470.png" alt="1576059932470"></p><p>指定1分钟后重启，并发出警告信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown –r +1 “1分钟后关机重启”<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576060232485.png" alt="1576060232485"></p><h3 id="2-3-10-重启命令"><a href="#2-3-10-重启命令" class="headerlink" title="2.3.10 重启命令"></a>2.3.10 重启命令</h3><p>reboot命令用于用来重新启动计算机</p><p>使用者权限：管理员、普通（需要验证）用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">reboot [-n] [-w] [-d] [-f] [-i]<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>-n : 在重开机前不做将记忆体资料写回硬盘的动作</li><li>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里</li><li>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）</li><li>-f : 强迫重开机，不呼叫 shutdown 这个指令</li><li>-i : 在重开机之前先把所有网络相关的装置先停止</li></ul><p>开始重新启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">reboot<br></code></pre></div></td></tr></table></figure><p>重启效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576136722927.png" alt="1576136722927"></p><p>此时我们的虚拟机正在重启<strong>（别忘记使用root用户执行）</strong></p><h3 id="2-3-11-who命令"><a href="#2-3-11-who命令" class="headerlink" title="2.3.11 who命令"></a>2.3.11 who命令</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在企业级开发过程中，我们使用who命令的时候常常需要快速重启服务器，在重启之前需要检测下有没有终端在连接（处理程序），如果有，可能就不会重启（会私下询问何时弄完，弄完后在重启），如果没有其他人连接，将执行快速重启<br></code></pre></div></td></tr></table></figure><p>who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">who - [husfV] [user]<br></code></pre></div></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li><li>-w 或-T或–mesg或–message或–writable：显示用户的信息状态栏；</li><li>–help：在线帮助；</li><li>–version：显示版本信息</li></ul><p>显示当前登录系统的用户</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">who<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576143161044.png" alt="1576143161044"></p><p>显示明细(标题)信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">who -H<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576143218612.png" alt="1576143218612"></p><p>由上图可知，截止到现在只有itcast在线。</p><h3 id="2-3-12-timedatectl命令"><a href="#2-3-12-timedatectl命令" class="headerlink" title="2.3.12 timedatectl命令"></a>2.3.12 timedatectl命令</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子：<br>timedatectl是用于控制系统时间和日期。可以用来查询和更改系统时钟于设定，同时可以设定和修改时区信息。<br><br>在实际开发过程中，系统时间的显示会和实际出现不同步；我们一般为了校正服务器时间、时区的时候会使用timedatectl命令<br></code></pre></div></td></tr></table></figure><p>使用者权限：所有使用者都可使用，设置时间需要管理员，下面会标注。</p><p>几个常见的概念，进行总结如下：</p><p><img src="assets/1576550880532.png" alt="1576550880532"></p><p><strong>显示系统的当前时间和日期，使用命令行中的timedatectl命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL">timedatectl status<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576147390352.png" alt="1576147390352"></p><p>在上面的示例中，分别显示时区、CST时间和UTC时间，其中,RTC time就是硬件时钟的时间，硬件时间默认为UTC。</p><p><strong>查看当前时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl | grep Time<br>或者<br>timedatectl <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576147504533.png" alt="1576147504533"></p><p>上图显示中国时区</p><p><strong>查看所有可用的时区</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">timedatectl list-timezones</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下（下面数据没有截全）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576147567622.png" alt="1576147567622"></p><p><strong>设置本地时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-timezone &quot;Asia/Shanghai&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576147666007.png" alt="1576147666007"></p><p><strong>禁用时间同步（使用管理员账户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-ntp false<br>在执行<br>timedatectl set-time &quot;2019-03-11 20:45:00&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576148429123.png" alt="1576148429123"></p><blockquote><p>注意: 如果ntp时间同步为true时无法修改时间设定，下面马上介绍</p></blockquote><p><strong>打开ntp</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-ntp true<br>在执行<br>timedatectl set-time &quot;2019-03-11 20:45:00&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下（ntp时间同步为true时无法修改时间设定）</p><p>报错信息 如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576226884267.png" alt="1576226884267"></p><p><strong>启用时间同步</strong></p><p>NTP即Network Time Protocol（网络时间协议），是一个互联网协议，用于同步计算机之间的系统时钟。timedatectl实用程序可以自动同步你的Linux系统时钟到使用NTP的远程服务器。</p><p>要开始自动时间同步到远程NTP服务器，在终端键入以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-ntp true<br></code></pre></div></td></tr></table></figure><p>比如，在上面我们使用timedatectl set-time “2019-03-11 20:45:00”，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576229638059.png" alt="1576229638059"></p><p>此时我们执行timedatectl set-ntp true，发现时间正常同步过来了如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576229679265.png" alt="1576229679265"></p><p>要禁用NTP时间同步，在终端键入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-ntp false<br></code></pre></div></td></tr></table></figure><p>执行上面的 命令即可关闭ntp</p><blockquote><p>总结</p><p>在实际使用过程中</p><p>我们经常使用timedatectl进行时区、CST、UTC的设置</p></blockquote><h3 id="2-3-13-clear命令"><a href="#2-3-13-clear命令" class="headerlink" title="2.3.13 clear命令"></a>2.3.13 clear命令</h3><p> clear命令用于清除屏幕</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">clear<br></code></pre></div></td></tr></table></figure><p>执行clear前</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576230100277.png" alt="1576230100277"></p><p>执行clear后</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576230123895.png" alt="1576230123895"></p><p>通过执行clear命令，就可以把缓冲区的命令全部清理干净了</p><h3 id="2-3-14-exit命令"><a href="#2-3-14-exit命令" class="headerlink" title="2.3.14 exit命令"></a><strong>2.3.14 exit命令</strong></h3><p>exit命令用于退出目前的shell。</p><p>执行exit可使shell以指定的状态值退出。若不设置状态值参数，则shell以预设值退出。状态值0代表执行成功，其他值代表执行失败。exit也可用在script，离开正在执行的script，回到shell。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">退出码（<span class="hljs-keyword">exit</span> status，或<span class="hljs-keyword">exit</span> code）的约定：<br><br><span class="hljs-number">0</span>表示成功（Zero - Success）<br><br>非<span class="hljs-number">0</span>表示失败（Non-Zero  - Failure）<br><br><span class="hljs-number">2</span>表示用法不当（Incorrect Usage）<br><br><span class="hljs-number">127</span>表示命令没有找到（Command Not Found）<br><br><span class="hljs-number">126</span>表示不是可执行的（Not an executable）<br><br>&gt;=<span class="hljs-number">128</span> 信号产生<br></code></pre></div></td></tr></table></figure><p><strong>语法如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">exit [状态值]<br></code></pre></div></td></tr></table></figure><p>退出终端</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">exit</span></span><br></code></pre></div></td></tr></table></figure><blockquote><p>exit会被经常在shell中使用</p><p>我们在明天的课程【综合案例】中会使用到exit</p></blockquote><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>用户账号管理和用户组是我们在实际使用过程中常用的命令，学习完创建账号、创建组后，需要通过gpasswd命令将用户添加到组，这也是我们学习的最终目的</p><p>系统管理的常用命令都是在开发过程中经常使用到的</p><h1 id="3-Linux目录管理"><a href="#3-Linux目录管理" class="headerlink" title="3 Linux目录管理"></a>3 Linux目录管理</h1><figure class="highlight fix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fix"><span class="hljs-attr">注意：</span><br><span class="hljs-attr">在下面的讲解中，每个命令都有很多的参数说明（选项），我们只讲其中的几个，关键是让学生掌握命令的语法；学生学习完语法后，就可以自己按照参数书写各种命令，这也是我们最终的目的。常用命令，我们在企业级开发过程中，经常书写的命令。会非常被容易记住，不常用的命令，只要我们学习完了语法之后，在去查找参数手册，会非常容易的解决我们的问题，所以，每个命令不是建立在死记硬背的基础上的，要理解语法+查找参数</span>=<span class="hljs-string">解决问题</span><br></code></pre></div></td></tr></table></figure><h2 id="3-1-Linux-文件与目录管理"><a href="#3-1-Linux-文件与目录管理" class="headerlink" title="3.1 Linux 文件与目录管理"></a>3.1 Linux 文件与目录管理</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在Linux系统中，所有的的目录结构为树状结构，最顶级的目录为根目录 &#x2F;。<br>在实际开发过程中，文件的操作是非常频繁也是非常重要的<br>下面的章节我们将学习下Linux系统所有的系统目录和文件通过命令是如何进行管理的 <br></code></pre></div></td></tr></table></figure><h3 id="3-1-1-目录常用命令"><a href="#3-1-1-目录常用命令" class="headerlink" title="3.1.1 目录常用命令"></a>3.1.1 目录常用命令</h3><ul><li>ls:         列出目录</li><li>cd：     切换目录</li><li>pwd：  显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp:         复制文件或目录</li><li>rm:        移除文件或目录</li><li>mv:        移动文件与目录或修改文件与目录的名称</li></ul><p><strong>自动补全</strong></p><ul><li>在敲出 文件/ 目录 / 命令 的前几个字母之后, 按下 <code>tab</code>键</li><li>如果还存在其他 文件 / 目录 / 命令, 再按一下tab键, 系统会提示可能存在的命令</li></ul><h4 id="1-ls-列出目录"><a href="#1-ls-列出目录" class="headerlink" title="1) ls (列出目录)"></a>1) ls (列出目录)</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span>命令相当于我们在Windows系统中打开磁盘、或者打开文件夹看到的目录以及文件的明细，如下图<br></code></pre></div></td></tr></table></figure><p>【查看磁盘下的目录与文件】</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576564124577.png" alt="1576564124577"></p><p>【查看文件夹下的目录与文件】</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576564161701.png" alt="1576564161701"></p><p>注意：在Linux系统当中， ls 命令算是比较常用的命令</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">ls <span class="hljs-selector-attr">[选项]</span>  目录名称<br></code></pre></div></td></tr></table></figure><p><strong>选项与参数：</strong></p><ul><li>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p><strong>将根目录下的所有文件列出来(含属性与隐藏档)</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span> ~<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576553470716.png" alt="1576553470716"></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -l</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576639252612.png" alt="1576639252612"></p><p><code>ls -l</code> 可以查看文件夹下文件的详细信息, 从左到右 依次是:</p><ul><li><strong>权限（A区域）</strong>, 第一个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数（B区域）</strong>, 通俗的讲就是有多少种方式, 可以访问当前目录和文件</li><li><strong>属主（C区域）</strong>, 文件是所有者、或是叫做属主</li><li><strong>属组（D区域）</strong>, 文件属于哪个组</li><li><strong>大小（E区域）：文件大小</strong></li><li><strong>时间（F区域）：最后一次访问时间</strong></li><li><strong>名称（G区域）:文件的名称</strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576553646036.png" alt="1576553646036"></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">总结<br>以上三种是经常被使用到的命令<br>它们之间的区别是<br><span class="hljs-keyword">ls</span>  显示不隐藏的文件与文件夹<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> 显示不隐藏的文件与文件夹的详细信息<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span>   显示所有文件与文件夹的详细信息<br></code></pre></div></td></tr></table></figure><h4 id="2-pwd显示当前目录"><a href="#2-pwd显示当前目录" class="headerlink" title="2) pwd显示当前目录"></a>2) pwd显示当前目录</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">执行<span class="hljs-built_in">pwd</span>命令相当于我们在Windows系统路径导航栏中查看到的当前浏览位置信息<br></code></pre></div></td></tr></table></figure><p>如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576564294612.png" alt="1576564294612"></p><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在当前目录的命令。</p><p>使用者权限：所有使用者都可使用。</p><p><strong>查看当前所在目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> -P<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576552719245.png" alt="1576552719245"></p><h4 id="3-cd-切换目录"><a href="#3-cd-切换目录" class="headerlink" title="3) cd (切换目录)"></a>3) cd (切换目录)</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Linux的<span class="hljs-built_in">cd</span>切换目录，相当于我们在Windows中通过鼠标或者快捷键点开不同的目录<br></code></pre></div></td></tr></table></figure><p>注意：在Linux系统当中， cd 命令算是比较常用的命令</p><p>cd是Change Directory的缩写，这是用来变换工作目录的命令</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [相对路径或绝对路径]</span><br></code></pre></div></td></tr></table></figure><p>在正式学习cd命令前面，我们通过下面一个座位图的形式讲解下相对路径和绝对路径是怎么表现的。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576465885337.png" alt="1576465885337"></p><ul><li><strong>绝对路径：</strong><br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</li><li><strong>相对路径：</strong><br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法啦！</li></ul><p><strong>1、使用相对路径定位目标</strong></p><ul><li>特征:  <strong>相对路径</strong> 输入路径时, 最前面不是以 “/“ 开始的, 表示相对 <strong>当前目录</strong> 所在的位置</li><li>缺点:  参照工作目录 发生变化 相对路径也要发生变化</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">需求<span class="hljs-number">1</span>: 当前工作目录是 <span class="hljs-regexp">/usr, 使用相对路径 切换到 /u</span>sr/tmp 目录下 <br><br>需求<span class="hljs-number">2</span>: 当前工作目录是 <span class="hljs-regexp">/root, 使用相对路径 切换到 /u</span>sr/tmp 目录下 <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576466126779.png" alt="1576466126779"></p><p>执行效果如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">注意：<br><span class="hljs-built_in">cd</span> ~ 表示回到根目录<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576466284360.png" alt="1576466284360"></p><p><strong>2、使用绝对路径定位目标</strong></p><ul><li>特征: <strong>绝对路径</strong> 在输入路径时, 最前面是以 <code>/</code>  开始的, 表示 从 <strong>根目录</strong> 开始的具体目录位置</li><li>优点: 定位准确, 不会因为 工作目录变化 而变化</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">需求<span class="hljs-number">1</span>: 当前工作目录是 <span class="hljs-regexp">/usr, 使用绝对路径 切换到 /u</span>sr/tmp 目录下 <br><br>需求<span class="hljs-number">2</span>: 当前工作目录是 <span class="hljs-regexp">/root, 使用绝对路径 切换到 /u</span>sr/tmp 目录下 <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576466413099.png" alt="1576466413099"></p><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576466506750.png" alt="1576466506750"></p><blockquote><p>总结</p><ul><li><strong>相对路径</strong> 在输入路径时, 最前面不是以 <code>/</code> 开始的 , 表示相对 <strong>当前目录</strong> 所在的目录位置</li><li><strong>绝对路径</strong> 在输入路径时, 最前面是以 <code>/</code>  开始的, 表示 从 <strong>根目录</strong> 开始的具体目录位置</li></ul></blockquote><h4 id="4-mkdir-创建目录"><a href="#4-mkdir-创建目录" class="headerlink" title="4) mkdir(创建目录)"></a>4) mkdir(创建目录)</h4><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">引子：<br>Linux的mkdir命令相当于我们在Windows中通过鼠标或者快捷键新建文件夹<br></code></pre></div></td></tr></table></figure><p>mkdir命令用于建立名称为 dirName 之子目录</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">mkdir [-p] dirName<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>-p 确保目录名称存在，不存在的就建一个</li></ul><p>建立一个名为jinyanlong 的子目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir jinyanlong<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576553229832.png" alt="1576553229832"></p><p>查看新建的 文件</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576553205885.png" alt="1576553205885"></p><p>在工作目录下的 aaa目录中，建立一个名为 bbb的子目录。 若 aaa目录原本不存在，则建立一个。（注：本例若不加 -p，且原本 aaa目录不存在，则产生错误。）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p aaa/bbb<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><blockquote><p>这里为了显示更直观，我们使用了tree命令</p><p>后面在讲解到yum的时候，会详细讲解</p><p>此处先使用</p></blockquote><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576560522053.png" alt="1576560522053"></p><p>由上图我们发现，aaa目录被强制创建，里面包含了bbb文件。</p><h4 id="5-rmdir-删空目录"><a href="#5-rmdir-删空目录" class="headerlink" title="5) rmdir(删空目录)"></a><strong>5) rmdir(删空目录)</strong></h4><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">Linux的rmdir命令相当于我们在Windows中通过鼠标或者快捷键删除文件夹。<br>稍微有点不同的就是在Linux中删除子目录的时候，如果主目录下没有了目录以及文件，会连同主目录同时删除了（需要写Linux带有P的参数）<br></code></pre></div></td></tr></table></figure><p>rmdir命令删除空的目录</p><p>使用权限：于目前目录有适当权限的所有使用者。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rmdir [-p] dirName<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</li></ul><p><strong>将工作目录下，名为 jinyanlong 的子目录删除 :</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rmdir jinyanlong<br></code></pre></div></td></tr></table></figure><p><strong>在工作目录下的 aaa目录中，删除名为 bbb的子目录。若 bbb删除后，aaa目录成为空目录，则 aaa同时也会被删除</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rmdir  -p aaa/bbb<br></code></pre></div></td></tr></table></figure><blockquote><p>总结：</p><p>rmdir  -p aaa/bbb也就是说</p><p>在删除bbb目录完成后，发现aaa目录也是空目录了，在删除完bbb后aaa也同时被删除了。</p></blockquote><h4 id="6-cp-文件复制"><a href="#6-cp-文件复制" class="headerlink" title="6) cp(文件复制)"></a>6) cp(文件复制)</h4><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">Linux</span>的<span class="hljs-meta">cp</span>命令相当于我们在Windows中通过鼠标或者快捷键复制文件或者目录<br></code></pre></div></td></tr></table></figure><p>cp命令主要用于复制文件或目录。</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp [options] source dest<br></code></pre></div></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp [options] source... directory<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r/R：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul><p>我们将当前目录”aaa/“下的所有目录以及文件复制到新目录”ccc”下，输入如下命令：</p><p><strong>1、数据准备</strong></p><p>创建aaa目录并且aaa下包含bbb目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p aaa/bbb<br>mkdir -p ccc<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576561579056.png" alt="1576561579056"></p><p>aaa目录下有bbb</p><p>ccc下面没有目录和文件</p><p><strong>2、执行复制</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp –r aaa/*  ccc  <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p>我们将aaa下面的所有文件、目录复制到了目录c下面</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576562978352.png" alt="1576562978352"></p><blockquote><p>总结：</p><p>用户使用该指令复制目录时，必须使用参数”-r”或者”-R”。</p><p>如果不加参数”-r”或者”-R”,只复制文件，而略过目录</p></blockquote><h4 id="7-rm-删除目录"><a href="#7-rm-删除目录" class="headerlink" title="7) rm(删除目录)"></a>7) rm(删除目录)</h4><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Linux的<span class="hljs-built_in">rm</span>命令相当于我们在Windows中通过鼠标或者快捷键删除文件或者目录<br></code></pre></div></td></tr></table></figure><p>rm命令用于删除一个文件或者目录。</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm [options] name...<br></code></pre></div></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><p>如果我们要删除文件可以直接使用rm命令，若删除目录则必须配合选项”-r”，例如：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576563524635.png" alt="1576563524635"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -r  ccc<br></code></pre></div></td></tr></table></figure><p>执行删除，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576563827977.png" alt="1576563827977"></p><blockquote><p>注意</p><p>文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令</p><p>如果删除文件（比如.sh 、.txt）</p><p>直接使用rm  name.txt</p></blockquote><h4 id="8-mv-移动文件"><a href="#8-mv-移动文件" class="headerlink" title="8) mv(移动文件)"></a>8) mv(移动文件)</h4><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">Linux的<span class="hljs-keyword">mv</span>命令相当于我们在Windows中通过鼠标或者快捷键剪切（+重命名）+粘贴文件或者目录<br></code></pre></div></td></tr></table></figure><p>mv 命令用来为文件或目录改名、或将文件或目录移入其它位置</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv [options] source dest<br>mv [options] source... directory<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;</li><li>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示;</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576565378463.png" alt="1576565378463"></p><p>将文件 aaa 更名为 bbb :</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576565459075.png" alt="1576565459075"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1、创建aaa目录、<br>mkdir  aaa<br>2、开始重命名<br>mv aaa bbb<br></code></pre></div></td></tr></table></figure><p>执行后</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576565489569.png" alt="1576565489569"></p><p>将ccc目录放入ddd目录中。</p><p>注意，如果ddd目录不存在，则该命令将ccc改名为ddd。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">创建ccc<br>mkdir ccc<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576565710078.png" alt="1576565710078"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">开始移动<br>mv ccc/ ddd <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576565800010.png" alt="1576565800010"></p><p>由上图我们发现，由于ddd目录不存在，所以在mv的时候将ccc目录改名为了ddd。</p><h2 id="3-2-Linux-文件基本属性"><a href="#3-2-Linux-文件基本属性" class="headerlink" title="3.2 Linux 文件基本属性"></a>3.2 Linux 文件基本属性</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在Wndows系统中，我们可以选中一个文件，右键属性，可以查看到这个文件的文件类型（基本信息），以及文件的权限信息，在Linux中，它是通过不同字符的排序顺序来表示文件的类型以及权限所属信息的。<br></code></pre></div></td></tr></table></figure><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>下面我们就一起学习下Linux系统不同权限的文件和目录在怎么表示的</p><p>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576032746450.png" alt="1576032746450"></p><p>实例中，bin文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）。</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576460571985.png" alt="1576460571985"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><h2 id="3-3-Linux文件属主和属组"><a href="#3-3-Linux文件属主和属组" class="headerlink" title="3.3 Linux文件属主和属组"></a>3.3 Linux文件属主和属组</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子：<br>对于一个文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。<br>也就是所谓的属主，它属于哪个用户的意思。<br>除了属主，还有属组，也就是说，这个文件是属于哪个组的（用户所属的组）。<br>文件的【属主】有一套【读写执行权限rwx】<br>文件的【属组】有一套【读写执行权限rwx】<br>还有它权限，下面我们在介绍<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576402570345.png" alt="1576402570345"></p><p>在以上实例中，aaa文件是一个目录文件，属主和属组都为 itcast，属主有可读、可写、可执行的权限（rwx）；与属主同组的其他用户有可读可写和可执行的权限（rwx）；其他用户也有可读和可执行的权限（r-x）。</p><h3 id="3-3-1-chgrp更改属组"><a href="#3-3-1-chgrp更改属组" class="headerlink" title="3.3.1 chgrp更改属组"></a><strong>3.3.1 chgrp更改属组</strong></h3><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">实际开发中我们经常会创建新建目录和文件，一般情况下，通过命令进行新建，<br>在创建完成后，使用不同的用户访问，可能就会出现报错，无法访问等等问题。<br>然后经过一番这查找,发现该有的文件都在，大小写也没问题，路径也没问题<br>其实并不是这些问题。而是权限问题导致我们无法访问！是因为一个文件默认隶属于一个属组，而使用其他用户访问这个文件肯定无法访问<span class="hljs-comment">(因为访问用户所属的组和文件所在的不是同一个组)</span><br>那么怎么可以正常访问呢？其实就是通过更改用户组（用户组、文件组）来解决这些问题<br></code></pre></div></td></tr></table></figure><p>chgrp命令用于变更文件或目录的所属群组。</p><p>文件或目录权限的的拥有者由所属群组来管理。您可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可</p><p>为了方便初学者记忆，可以将 chgrp 理解为是 “change group” 的缩写</p><p><strong>语法如下</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">chgrp <span class="hljs-selector-attr">[-cfhRv]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[所属群组]</span><span class="hljs-selector-attr">[文件或目录...]</span> 或 chgrp <span class="hljs-selector-attr">[-cfhRv]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--reference=&lt;参考文件或目录&gt;]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[文件或目录...]</span><br></code></pre></div></td></tr></table></figure><p><strong>改变文件的群组属性</strong></p><p>我们通过root用户进入（如下图），上接上面的例子</p><p>我们的aaa文件的属主和属组都属于itcast（如下图）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576407437975.png" alt="1576407437975"></p><p>我们现在通过chgrp命令将文件aaa的属组更改成root（其他也可以）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chgrp -v root aaa<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576407536566.png" alt="1576407536566"></p><p>我们通过下面的命令查询文件aaa的属组是否发生了变化，执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -l</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576407585301.png" alt="1576407585301"></p><p>由上图我们发现，文件aaa的属组由itcast变成了root</p><p>这样的话，文件的属组就发生了变化。</p><h3 id="3-3-2-chown更改属主和属组"><a href="#3-3-2-chown更改属主和属组" class="headerlink" title="3.3.2 chown更改属主和属组**"></a>3.3.2 chown更改属主和属组**</h3><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">我们为了让一些用户有权限查看某一文档，比如是一个时间表，而编写时间表的人要具有读写执行的权限<span class="hljs-comment">(属主)</span><br>我们想让一些用户知道这个时间表的内容，而不让他们修改，所以我们可以把这些用户都划到一个组（属组），然后来修改这个文件的权限，让用户组可读，这样用户组下面的每个用户都是可读的<br></code></pre></div></td></tr></table></figure><p>Linux是多任务操作系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才有这样的权限</p><p>使用权限 : 管理员账户</p><p><strong>语法如下</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">chown <span class="hljs-selector-attr">[–R]</span> 属主名 文件名<br>chown <span class="hljs-selector-attr">[-R]</span> 属主名：属组名 文件名<br></code></pre></div></td></tr></table></figure><p>我们通过root用户进入（如下图），上接上面的例子</p><p>我们的aaa文件的属主属于itcast、属组属于root</p><p>我们现在通过chgrp命令将文件aaa的属主更改成root，执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">chown  root aaa</span><br></code></pre></div></td></tr></table></figure><p>效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576407880885.png" alt="1576407880885"></p><p>我们通过下面的命令查询文件aaa的属主是否发生了变化，执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -l</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576407928200.png" alt="1576407928200"></p><p>由上图我们发现，文件aaa的属主和属组都变成了root。</p><p><strong>我们将aaa文件的拥有者与群组改回为itcast：</strong></p><p>注意：chown命令可以更改属主和属组</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-keyword">chown</span> itcast:itcast aaa<br></code></pre></div></td></tr></table></figure><p>我们通过下面的命令查询文件aaa的属主是否发生了变化，执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -l</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576408146911.png" alt="1576408146911"></p><p>由上图可知，aaa文件的属主和属组都被更改回来了。</p><h3 id="3-3-3-chmod权限命令"><a href="#3-3-3-chmod权限命令" class="headerlink" title="3.3.3 chmod权限命令"></a>3.3.3 chmod权限命令</h3><p>Linux文件属性有两种设置方法，一种是数字，一种是符号</p><p>Linux的文件调用权限分为三级 : 文件属主、属组、其他。利用 chmod 可以控制文件如何被他人所调用。</p><p><strong>使用权限 : 所有使用者</strong></p><p><strong>语法</strong></p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">chmod [-cfvR] [--help] [--version] mode file...<br></code></pre></div></td></tr></table></figure><p><strong>参数说明</strong></p><p>mode : 权限设定字串，格式如下</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[ugoa...][[+-=][rwxX]...][,...]<br></code></pre></div></td></tr></table></figure><p><strong>解释：</strong></p><p>u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p><p>+表示增加权限、- 表示取消权限、= 表示唯一设定权限。<br>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</p><h4 id="1-数字权限"><a href="#1-数字权限" class="headerlink" title="1) 数字权限"></a><strong>1) 数字权限</strong></h4><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组（owner/group/others就是所说的三个一组 ）的，我们也可以使用数字来代表各个权限，各权限的分数对照表如下</p><p>各权限的数字对照表：[r]:4;[w]:2;[x]:1;[-]:<strong>0</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576571902684.png" alt="1576571902684"></p><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦,变更权限的指令chmod的语法是这样的</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">chmod <span class="hljs-selector-attr">[-R]</span> xyz 文件或目录<br></code></pre></div></td></tr></table></figure><p>选项与参数：</p><ul><li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li><li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li></ul><p>上面的 可以表示如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod  -R 770     档案或目录<br></code></pre></div></td></tr></table></figure><blockquote><p>上面说了这么多，我们举例说明一下：</p></blockquote><p>我们进入itcast用户创建文件czbk.txt</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch as.txt<br></code></pre></div></td></tr></table></figure><p>然后切换到root</p><p>比如，我们如果要将as.txt这个文件所有的权限都设定启用</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576463267777.png" alt="1576463267777"></p><p>那么命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -R 777 as.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576463303277.png" alt="1576463303277"></p><p>由此可见，as.txt的属主权限、属组权限、其他权限都发生了改变</p><p>由之前的【-rw-rw-r–】变成【-rwxrwxrwx】</p><blockquote><p>根据前面的换算我们已经知道如何将一个文件的属主、属组、其他权限换算成数字了，换算成数字后，我们只需要通过chmod命令即可更改文件的权限</p></blockquote><h4 id="2-符号权限"><a href="#2-符号权限" class="headerlink" title="2) 符号权限"></a><strong>2) 符号权限</strong></h4><p>还有一个改变权限的方法，就是 符号权限，我们先回顾下之前提到的9个权限</p><ul><li>(1)user     属主权限</li><li>(2)group  属组权限</li><li>(3)others  其他权限</li></ul><p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限！</p><p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576464280724.png" alt="1576464280724"></p><p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用 <strong>chmod u=rwx,g=rx,o=r 文件名</strong> 来设定:</p><p>上接上面的例子，如下图</p><p>我们将as.txt的权限设置为**-rwxr-xr–**</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576464462903.png" alt="1576464462903"></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod u=rwx,g=rx,o=r  as.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576464626496.png" alt="1576464626496"></p><p> 由上图我们发现，as.txt的权限变成了-rwxr-xr–</p><p>假如我们要将权限去掉而不改变其他已存在的权限呢？举个例子，比如我要拿掉全部人的可读权限，则</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL">chmod  a-r as.txt<br></code></pre></div></td></tr></table></figure><p>执行如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576464852969.png" alt="1576464852969"></p><p>由此可见，as.txt的其他权限都没有了，变成了【—】</p><h2 id="3-4-综合案例"><a href="#3-4-综合案例" class="headerlink" title="3.4 综合案例"></a>3.4 综合案例</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在前面的章节中我们讲解了用户、用户组、文件属主、属组以及权限，知识点比较零散，下面，我们就通过一个简单小案例把这些知识点串联起来<br></code></pre></div></td></tr></table></figure><p><strong>需求：</strong></p><p>比如一个公司的开发团队有三个用户：java、erlang、golang有一个文件目录tmp/work供他们开发，如何实现让这三个用户都对其具有写权限</p><p><strong>1、首先，我们创建三个账户</strong>（切换到root）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">adduser java<br>adduser erlang<br>adduser golang<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576587867858.png" alt="1576587867858"></p><p><strong>2、增加用户组</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd -g 8888 dev-group<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588353612.png" alt="1576588353612"></p><p><strong>3、创建公共文件并设置权限</strong></p><p>给文件/tmp/project2019/设置属组为dev-group</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /tmp/project2019<br><br>chown -R :dev-group /tmp/project2019/<br>或者<br>chgrp -R dev-group  /tmp/project2019/<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588480909.png" alt="1576588480909"></p><p><strong>4、将用户添加到组</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gpasswd -a java    dev-group<br>gpasswd -a erlang  dev-group<br>gpasswd -a golang  dev-group<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588553969.png" alt="1576588553969"></p><p>查询dev-group组下所有用户</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep &#x27;dev-group&#x27; /etc/group<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588591503.png" alt="1576588591503"></p><p><strong>5、切换到java用户</strong></p><p>切换到java用户看看是否有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su java<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588731114.png" alt="1576588731114"></p><p>新建文件</p><p>在我们上面创建的目录tmp/project2019/下面创建文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir java-files-new<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576588941546.png" alt="1576588941546"></p><p>由此发现，我们在tmp/project2019/下面创建文件发生了权限不足，我们去查看下tmp/project2019/的文件属性，如下图</p><p>我们在/tmp目录下执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -l</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589157095.png" alt="1576589157095"></p><p> 我们发现目录project2019的文件属性为【drwxr-xr-x】</p><p>根据前面学的知识，我们拆分如下</p><p>【d】:文件类型</p><p>【rwx】：属主</p><p>【r-x】：属组</p><p>【r-x】：其他</p><p>现在答案就出来了，也就是说我们的属组权限是【r-x】，只有读和执行权限，没有写入权限，那么下面我们就给project2019目录增加写入权限。</p><p><strong>6、增加写入权限</strong></p><p>给project2019目录增加写入权限，执行下面的命令（前面已经学习过了）</p><p>记得切换到root下执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod  -R 770  project2019<br></code></pre></div></td></tr></table></figure><p>执行效果如下<img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589467908.png" alt="1576589467908"></p><p>此时我们发现project2019目录的属组权限变成了【rwx】即可读、可写、可执行</p><p><strong>7、切换用户，继续写入</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su  java<br>mkdir java-files-new<br>ls -l<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589641341.png" alt="1576589641341"></p><p>由此发现，这个时候我们有了写入权限，java-files-new文件被成功写入</p><p>那么，其他两个用户golang、erlang也是和java一个组的，他们能不能正常写入呢，我们试试（从root切换过去）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su<br>su erlang<br>mkdir erlang-files-new<br>==============================<br>su<br>su golang<br>mkdir golang-files-new<br><br>ls -l<br></code></pre></div></td></tr></table></figure><p>执行效果（erlang新建文件）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589820604.png" alt="1576589820604"></p><p>执行效果（golanglang新建文件）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589856968.png" alt="1576589856968"></p><p>查看所有文件</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576589903617.png" alt="1576589903617"></p><p>由此可见，我们组的三个用户都成功创建了文件（拥有了写入权限）</p><p><strong>8、验证结论</strong></p><p>为了验证上面的结论，我们新增一个用户itbeijing</p><p>看看能否正常新建文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd   itbeijing<br>su itbeijing<br>mkdir  itbeijing-files-new<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576590031376.png" alt="1576590031376"></p><p>由上图我们发现，我们刚刚新创建的用户在创建文件的时候发现了权限不足。</p><p>由此说明用户itbeijing用户的属组和文件的属组不一样，所以没有权限。</p><h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h2><p>在企业级开发过程中，实际操作目录是最经常出现的，对于目录常用命令我们要熟练掌握并能熟练编写<br>因为Linux是多用户系统，所以权限也是非常核心和重要的，我们要熟练编写权限（属主、属组、其他权限）的常用命令。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-命令</title>
    <link href="/2019/04/14/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/04/14/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-用户与账户相关"><a href="#1-用户与账户相关" class="headerlink" title="1 用户与账户相关"></a>1 用户与账户相关</h2><h3 id="1-1-账户管理"><a href="#1-1-账户管理" class="headerlink" title="1.1 账户管理"></a>1.1 账户管理</h3><h4 id="1-1-1-添加用户"><a href="#1-1-1-添加用户" class="headerlink" title="1.1.1 添加用户"></a>1.1.1 添加用户</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：useradd [参数] 用户名<span class="hljs-comment">#添加用户</span><br>参数：<br> -c&lt;备注&gt;：设置用户帐号的备注。 <br> -e&lt;有效期限&gt;：设置帐号的有效期限。 <br> -g&lt;群组&gt;：设置用户所属的群组。 <br> -n：取消建立以用户名称为名的群组． <br></code></pre></div></td></tr></table></figure><h4 id="1-1-2-密码管理"><a href="#1-1-2-密码管理" class="headerlink" title="1.1.2 密码管理"></a>1.1.2 密码管理</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：passwd [参数] 用户名<span class="hljs-comment">#给指定用户设置密码</span><br>参数：<br> -d：删除密码。本参数仅有系统管理者才能使用。 <br> -f：强制该用户下次登录后修改密码<br> -l：锁住密码。 <br> -u：解开已上锁的帐号。<br></code></pre></div></td></tr></table></figure><h4 id="1-1-3-修改用户"><a href="#1-1-3-修改用户" class="headerlink" title="1.1.3 修改用户"></a>1.1.3 修改用户</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：usermod [参数] 用户名<span class="hljs-comment">#修改用户相关信息</span><br>选项：<br> -c&lt;备注&gt;：修改用户帐号的备注文字。 <br> -e&lt;有效期限&gt;：修改帐号的有效期限。 <br> -g&lt;群组&gt;：修改用户所属的群组。 <br> -l&lt;帐号名称&gt;：修改用户帐号名称。 <br> -L：锁定用户密码，使密码无效。 <br> -U：解除密码锁定。<br></code></pre></div></td></tr></table></figure><h4 id="1-1-4-删除用户"><a href="#1-1-4-删除用户" class="headerlink" title="1.1.4 删除用户"></a>1.1.4 删除用户</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：userdel [参数] 用户名<span class="hljs-comment">#删除用户</span><br>选项：<br> -r：删除主目录(家)和邮件箱<br> -f：删除用户的所有文件<br></code></pre></div></td></tr></table></figure><h3 id="1-2-用户组管理"><a href="#1-2-用户组管理" class="headerlink" title="1.2 用户组管理"></a>1.2 用户组管理</h3><h4 id="1-2-1-添加-删除组"><a href="#1-2-1-添加-删除组" class="headerlink" title="1.2.1 添加/删除组"></a>1.2.1 添加/删除组</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：<br> groupadd 用户组名<span class="hljs-comment">#创建用户组</span><br> groupdel 用户组名<span class="hljs-comment">#删除用户组</span><br> groups 用户名 <span class="hljs-comment">#查询用户所属组</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-2-修改组"><a href="#1-2-2-修改组" class="headerlink" title="1.2.2 修改组"></a>1.2.2 修改组</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：groupmod [参数] 用户组名<span class="hljs-comment">#修改用户组</span><br>参数：<br> -g &lt;组识编号&gt;：设置欲使用的群组识别码。 <br> -n &lt;新群组名称&gt;：设置欲使用的群组名称。 <br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-组成员管理"><a href="#1-2-3-组成员管理" class="headerlink" title="1.2.3 组成员管理"></a>1.2.3 组成员管理</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法： gpasswd [可选项] 用户名 组名<span class="hljs-comment">#将一个用户添加到组或者从组中删除。</span><br>参数:<br> -a：添加用户到组；<br> -d：从组删除用户；<br> -A：指定管理员；<br> -M：指定组成员和-A的用途差不多；<br> -r：删除密码；<br> -R：限制用户登入组，只有组中的成员才可以用newgrp加入该组。<br></code></pre></div></td></tr></table></figure><h3 id="1-3-其他操作"><a href="#1-3-其他操作" class="headerlink" title="1.3 其他操作"></a>1.3 其他操作</h3><h4 id="1-3-1-显示用户"><a href="#1-3-1-显示用户" class="headerlink" title="1.3.1 显示用户"></a>1.3.1 显示用户</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：logname <span class="hljs-comment">#显示当前登录账号的信息</span><br></code></pre></div></td></tr></table></figure><h4 id="1-3-2-切换用户"><a href="#1-3-2-切换用户" class="headerlink" title="1.3.2 切换用户"></a>1.3.2 切换用户</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：su 用户名<span class="hljs-comment">#切换用户</span><br>举例：<br> su <span class="hljs-comment">#切换到root用户 </span><br> su root<span class="hljs-comment">#切换到root用户 </span><br> su itcast <span class="hljs-comment">#切换到itcast用户 </span><br></code></pre></div></td></tr></table></figure><h4 id="1-3-3-详细信息"><a href="#1-3-3-详细信息" class="headerlink" title="1.3.3 详细信息"></a>1.3.3 详细信息</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：id <span class="hljs-comment">#查看当前用户的详细信息（用户id，群组id，所属组）</span><br></code></pre></div></td></tr></table></figure><h4 id="1-3-4-sudo"><a href="#1-3-4-sudo" class="headerlink" title="1.3.4 sudo"></a>1.3.4 sudo</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：sudo  <span class="hljs-comment">#提高权限</span><br>用法：<br>sudo -l  <span class="hljs-comment">#显示自己的权限</span><br>sudo 命令    <span class="hljs-comment">#让当前用户使用系统管理者的身份，去执行某个命令</span><br>sudo -u 用户名 命令 <span class="hljs-comment">#以指定用户的身份，去执行某个命令</span><br></code></pre></div></td></tr></table></figure><h2 id="2-系统操作相关"><a href="#2-系统操作相关" class="headerlink" title="2 系统操作相关"></a>2 系统操作相关</h2><h3 id="2-1-日期管理"><a href="#2-1-日期管理" class="headerlink" title="2.1 日期管理"></a>2.1 日期管理</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：date [参数]<span class="hljs-comment">#显示或修改系统时间</span><br>参数：<br> -s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；<br></code></pre></div></td></tr></table></figure><h3 id="2-2-进程相关"><a href="#2-2-进程相关" class="headerlink" title="2.2 进程相关"></a>2.2 进程相关</h3><h4 id="2-2-1-top"><a href="#2-2-1-top" class="headerlink" title="2.2.1 top"></a>2.2.1 top</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：top<span class="hljs-comment">#实时显示所有进程信息</span><br>举例:<br> top<span class="hljs-comment">#实时显示所有的进程信息 </span><br> top –c<span class="hljs-comment">#实现显示所有的进程信息(显示的是详细信息) </span><br> top –p PID <span class="hljs-comment">#实时显示指定进程的信息 </span><br> q<span class="hljs-comment">#结束监控(Ctrl + C)</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-2-ps"><a href="#2-2-2-ps" class="headerlink" title="2.2.2 ps"></a>2.2.2 ps</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：ps [参数] <span class="hljs-comment">#查看进程信息</span><br>参数：<br> -A：进程信息信息（部分）<br> -u : 显示指定用户信息<br> -ef :显示所有进程信息（完整）<br>举例:<br> ps <span class="hljs-comment">#显示当前正在运行的进程信息</span><br> ps -A <span class="hljs-comment">#显示系统中所有的进程信息</span><br> ps -ef <span class="hljs-comment">#显示系统中所有的进程信息（完整信息）</span><br> ps –u 用户名 <span class="hljs-comment">#显示指定用户的进程信息</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-kill"><a href="#2-2-3-kill" class="headerlink" title="2.2.3 kill"></a>2.2.3 kill</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：<span class="hljs-built_in">kill</span> [参数] [进程] <span class="hljs-comment">#中断执行中的程序</span><br>参数：<br> -l&lt;信息编号&gt; ： 若不加信息编号选项，则-l参数会列出全部的信息名称，进程：可以是程序的PID或者PGID，也可以是工作编号<br> -u 用户名： 杀死这个用户中所有进程<br>举例：<br> <span class="hljs-built_in">kill</span> 进程PID <span class="hljs-comment">#杀死指定进程</span><br> <span class="hljs-built_in">kill</span> -9 进程PID <span class="hljs-comment">#彻底杀死指定进程</span><br> <span class="hljs-built_in">kill</span> -9 $(ps –ef | grep 用户名) <span class="hljs-comment">#彻底杀死指定用户所有进程</span><br> killall –u 用户名 <span class="hljs-comment">#杀死指定用户所有进程</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-关机命令"><a href="#2-3-关机命令" class="headerlink" title="2.3 关机命令"></a>2.3 关机命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：shutdown <span class="hljs-comment">#关机</span><br>举例:<br> shutdown<span class="hljs-comment">#关机(不同的版本有所差异)</span><br> shutdown –h now<span class="hljs-comment">#麻溜的立马关机</span><br> shutdown +1 <span class="hljs-string">&quot;警告信息&quot;</span>  <span class="hljs-comment">#墨迹一分钟再关机，并出现警告信息</span><br> shutdown –r +1 <span class="hljs-string">&quot;警告信息&quot;</span>  <span class="hljs-comment">#墨迹一分钟再重启，并出现警告信息</span><br> shutdown -c <span class="hljs-comment">#取消当前关机操作</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-重启命令"><a href="#2-4-重启命令" class="headerlink" title="2.4 重启命令"></a>2.4 重启命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：reboot <span class="hljs-comment">#重启</span><br>举例:<br> reboot <span class="hljs-comment">#立马重启</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-who命令"><a href="#2-5-who命令" class="headerlink" title="2.5 who命令"></a>2.5 who命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：who [参数] <span class="hljs-comment">#显示当前登录系统的用户</span><br>参数：<br> -H：显示标题信息<br> -u：显示闲置时间，如果一份之后有操作，则显示点，如果超过24小时无操作，则显示old字符串<br> -q：只显示登入系统的账号名称和总人数<br> -s：次参数将忽略不予处理，仅负责解决who指令其版本的兼容性问题<br> -w：显示用户的信息状态栏<br>举例:<br> who <span class="hljs-comment">#显示当前系统中登录的所有用户</span><br> who –H <span class="hljs-comment">#显示明细（标题）信息</span><br></code></pre></div></td></tr></table></figure><h3 id="2-6-timedatectl命令"><a href="#2-6-timedatectl命令" class="headerlink" title="2.6 timedatectl命令"></a>2.6 timedatectl命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：timedatectl <span class="hljs-comment">#校正服务器时间、时区</span><br>举例:<br> timedatectl status <span class="hljs-comment">#显示系统的当前时间和日期</span><br> timedatectl list-timezones <span class="hljs-comment">#查看所有可用的时区</span><br> timedatectl set-timezone <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> <span class="hljs-comment">#设置本地时区</span><br> timedatectl set-ntp <span class="hljs-literal">false</span> <span class="hljs-comment">#禁用时间同步</span><br> timedatectl set-time <span class="hljs-string">&quot;2019-03-11 20:45:00&quot;</span> <span class="hljs-comment">#设置时间</span><br> timedatectl set-ntp <span class="hljs-literal">true</span> <span class="hljs-comment">#启用时间同步</span><br></code></pre></div></td></tr></table></figure><h3 id="2-7-clear命令"><a href="#2-7-clear命令" class="headerlink" title="2.7 clear命令"></a>2.7 clear命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：clear<span class="hljs-comment">#清除当前屏幕; 也可以使用快捷键  ctrl+L</span><br></code></pre></div></td></tr></table></figure><h2 id="3-目录相关"><a href="#3-目录相关" class="headerlink" title="3 目录相关"></a>3 目录相关</h2><h3 id="3-1-目录相关命令"><a href="#3-1-目录相关命令" class="headerlink" title="3.1 目录相关命令"></a>3.1 目录相关命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">ls <span class="hljs-comment">#列出目录</span><br>ls 显示不隐藏的文件与文件夹<br>    ls -l 显示不隐藏的文件与文件夹的详细信息(简化写法是ll)<br>    ll –a 显示所有文件与文件夹的详细信息<br>    ll –h 友好显示当前文件夹下所有的文件与文件夹<br>    <br><span class="hljs-built_in">cd</span> <span class="hljs-comment">#切换目录</span><br><span class="hljs-built_in">cd</span> [相对路径或绝对路径] 切换目录<br><br><span class="hljs-built_in">pwd</span> <span class="hljs-comment">#显示目前的目录</span><br><span class="hljs-built_in">pwd</span> –P 查看当前所在目录<br><br>mkdir <span class="hljs-comment">#创建新目录</span><br>mkdir 文件夹名<span class="hljs-comment">#创建单级文件夹</span><br>mkdir -p 文件夹名<span class="hljs-comment">#创建多级文件夹</span><br><br>rm <span class="hljs-comment">#删除文件或目录</span><br>rm 文件名<span class="hljs-comment">#删除文件</span><br>rm -rfv 文件夹名    <span class="hljs-comment">#删除指定文件夹(不论文件夹是否为空,都进行删除)</span><br><br>cp <span class="hljs-comment">#复制文件或目录</span><br>cp aaa/a.txt ccc 将aaa文件夹中的a.txt文件拷贝到ccc文件夹中<br>cp –r aaa/* ccc 将aaa文件夹中所有内容拷贝到ccc文件夹中<br><br>mv <span class="hljs-comment">#移动文件或目录,修改文件或者目录的名字</span><br>mv 数据源 目的地 改名、移动<br></code></pre></div></td></tr></table></figure><h3 id="3-2-chgrp命令"><a href="#3-2-chgrp命令" class="headerlink" title="3.2 chgrp命令"></a>3.2 chgrp命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：chgrp [选项参数][所属群组][文件或目录...]  <span class="hljs-comment">#更改属组</span><br>参数：<br>-c：效果类似<span class="hljs-string">&quot;-v&quot;</span>参数，但仅回报更改的部分。<br>-f：不显示错误信息。<br>-h：只对符号连接的文件作修改，而不更动其他任何相关文件。<br>-R：递归处理，将指定目录下的所有文件及子目录一并处理。<br>-v：显示指令执行过程。<br>举例:<br>chgrp -v root aaa <span class="hljs-comment">#将aaa的属组改为root</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-chown命令"><a href="#3-3-chown命令" class="headerlink" title="3.3 chown命令"></a>3.3 chown命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：chown [参数选项] 属主名 文件名 <span class="hljs-comment">#更改属主</span><br> chown [参数选项] 属主名:属组名 文件名 <span class="hljs-comment">#更改属主和属组</span><br>参数：<br> -R 处理指定目录以及其子目录下的所有文件<br>举例:<br> chown root aaa <span class="hljs-comment">#将aaa的属主改为root</span><br> chown root:root bbb  <span class="hljs-comment">#将bbb的属主和属组改为root</span><br> chown –R root:root aaa <span class="hljs-comment">#将aaa文件夹和里面所有的属主和属组改为root</span><br></code></pre></div></td></tr></table></figure><h3 id="3-4-chmod命令"><a href="#3-4-chmod命令" class="headerlink" title="3.4 chmod命令"></a>3.4 chmod命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：chmod [参数选项] 数字权限或符号权限 文件或目录<span class="hljs-comment">#修改文件的权限（属主、属组、其他用户）</span><br>参数：<br> -c : 若该档案权限确实已经更改，才显示其更改动作<br> -f : 若该档案权限无法被更改也不要显示错误讯息<br> -v : 显示权限变更的详细资料<br> -R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递归的方式逐个变更) <br>数字权限: <br> 就是刚刚提到的数字类型的权限属性，为 rwx 对应数值相加的和。<br>符号权限:<br> u：user属主权限 <br> g：group属组权限 <br> o：others其他权限<br> a：全部身份 <br>举例：<br> chmod –R 770 aaa <span class="hljs-comment">#修改aaa文件夹及内容对属主和属组拥有所有权限,其他用户没有任何权限</span><br> chmod u=rwx,g=rx,o=r a.txt  <span class="hljs-comment">#修改a.txt文件对属主有所有权,属组拥有读和执行权限,其他用户只有读的权限</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-touch命令"><a href="#3-5-touch命令" class="headerlink" title="3.5 touch命令"></a>3.5 touch命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><br>语法：touch [参数选项] 文件名<span class="hljs-comment">#如果文件不存在就创建文件，如果存在就修改时间属性</span><br>参数：<br> -a 改变档案的读取时间记录。<br> -m 改变档案的修改时间记录。 <br> -c 假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。<br> -d 设定时间与日期，可以使用各种不同的格式。 <br> -t 设定档案的时间记录，格式与 date 指令相同。 <br>举例:<br> touch a.txt <span class="hljs-comment">#不存在就创建，存在就修改时间属性</span><br> touch a&#123;1..10&#125;.txt <span class="hljs-comment">#批量创建空文件</span><br> <span class="hljs-built_in">stat</span> a.txt <span class="hljs-comment">#查看文件的详细信息</span><br></code></pre></div></td></tr></table></figure><h2 id="4-文档操作相关"><a href="#4-文档操作相关" class="headerlink" title="4 文档操作相关"></a>4 文档操作相关</h2><h3 id="4-1-vi-vim编辑器"><a href="#4-1-vi-vim编辑器" class="headerlink" title="4.1 vi/vim编辑器"></a>4.1 vi/vim编辑器</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#编辑文件</span><br>语法：vim 文件名<span class="hljs-comment">#文件编辑器。如果文件存在就打开文件并编辑，如果文件不存在就创建并打开编辑</span><br><br><span class="hljs-comment">#模式切换</span><br>进入编辑模式  可以使用字母: i,a,o任意字母<br>退出编辑模式  可以按1次esc按键<br>进入底行模式  可以使用字母冒号 :<br>退出底行模式  可以按两次esc按键<br><br><span class="hljs-comment">#模式介绍:</span><br>编辑模式  处于此模式时,可以对文件的内容进行修改;<br>命令模式  处于此模式时,只能看文件的内容,同时此模式也是默认模式,是转换另外两种模式的中转站;<br>底行模式  处于此模式时,可以对文件本身操作,例如:文件保存,文件退出,等;<br><br><span class="hljs-comment">#底行模式的语法：</span><br> q <span class="hljs-comment">#不保存，并推出</span><br> q! <span class="hljs-comment">#不保存，并强制推出</span><br> wq <span class="hljs-comment">#保存，并推出</span><br> wq! <span class="hljs-comment">#保存，并强制推出</span><br><br><span class="hljs-comment">#异常处理:</span><br>如果vim异常退出, 在磁盘上可能会保存有交换文件, 需要将后缀名为.swp的文件删除即可恢复;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-文件查看"><a href="#4-2-文件查看" class="headerlink" title="4.2 文件查看"></a>4.2 文件查看</h3><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：cat [参数选项] 文件 <span class="hljs-comment">#查看小型文件，一次性显示全部</span><br>参数：<br> -n：由 1 开始对所有输出的行数编号。<br>举例:<br> cat a.txt <span class="hljs-comment">#查看a.txt的内容</span><br> cat –n a.txt <span class="hljs-comment">#查看a.txt的内容（加入行号）</span><br></code></pre></div></td></tr></table></figure><h4 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：less [参数选项] 文件 <span class="hljs-comment">#查看大文件(可以通过上下按键进行翻页)</span><br>参数选项：<br> -N：显示每行的行号<br>举例:<br> less a.txt <span class="hljs-comment">#查看a.txt的内容</span><br> less –N a.txt     <span class="hljs-comment">#查看a.txt的内容（加入行号）</span><br></code></pre></div></td></tr></table></figure><h4 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：tail [参数选项] 文件 <span class="hljs-comment">#查看文件的最后部分，或动态显示文件最后内容</span><br>参数：<br> -数字：显示文件的最后几行<br> -f ：循环读取文档最后10行 <br> -n &lt;行数&gt;：显示文件的内容，从指定行至文件末尾<br> -c：显示最后指定的字节数<br>举例:<br> tail –3 big.txt <span class="hljs-comment">#显示文件最后3行</span><br> tail -f big.txt <span class="hljs-comment">#动态显示最后10行(必须掌握)</span><br> tail -4f big.txt <span class="hljs-comment">#动态显示最后4行</span><br> tail -n +2 big.txt <span class="hljs-comment">#显示文件a.txt 的内容，从第 2 行至文件末尾</span><br> tail -c 45 big.txt <span class="hljs-comment">#显示最后一些字符</span><br></code></pre></div></td></tr></table></figure><h3 id="4-3-grep命令"><a href="#4-3-grep命令" class="headerlink" title="4.3 grep命令"></a>4.3 grep命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：grep [参数选项] 关键字 文件 <span class="hljs-comment">#根据关键词,搜索文本文件内容(对内容进行筛选)</span><br>参数：<br> -n：把包含关键字的行展示出来<br> -i ：把包含关键字的行展示出来，搜索时，忽略大小写。<br> -v : 把不包含关键字的行展示出来<br>举例:<br> grep 关键字 small.txt <span class="hljs-comment">#把包含关键字的行展示出来</span><br> grep –i 关键字 small.txt <span class="hljs-comment">#把包含关键字的行展示出来，搜索时忽略大小写</span><br> grep –v 关键字 small.txt<span class="hljs-comment">#把不包含关键字的行展示出来</span><br> grep –A数字 关键字 small.txt<span class="hljs-comment">#把包含关键字的行展示出来,并且显示改行之后的&quot;数字&quot;行</span><br> grep –B数字 关键字 small.txt<span class="hljs-comment">#把包含关键字的行展示出来,并且显示改行之前的&quot;数字&quot;行</span><br> ps -ef | grep 关键字 <span class="hljs-comment">#查找指定的进程信息，包含grep进程</span><br> ps -ef | grep 关键字 | grep -v <span class="hljs-string">&quot;grep&quot;</span> <span class="hljs-comment">#查找指定的进程信息，不包含grep进程</span><br> ps -ef | grep -c sshd    <span class="hljs-comment">#查找进程个数</span><br></code></pre></div></td></tr></table></figure><h3 id="4-4-echo命令"><a href="#4-4-echo命令" class="headerlink" title="4.4 echo命令"></a>4.4 echo命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：<span class="hljs-built_in">echo</span> 字符串 <span class="hljs-comment">#展示文本</span><br>举例:<br> <span class="hljs-built_in">echo</span> 字符串 &gt;文件名 <span class="hljs-comment">#将字符串写到文件中（覆盖文件中内容）</span><br> <span class="hljs-built_in">echo</span> 字符串 &gt;&gt; 文件名 <span class="hljs-comment">#将字符串写到文件中（不覆盖文件中内容）</span><br> cat 不存在的目录 &amp;&gt;&gt; error.log <span class="hljs-comment">#将命令的失败结果 追加 error.log文件的后面</span><br></code></pre></div></td></tr></table></figure><h3 id="4-5-awk命令"><a href="#4-5-awk命令" class="headerlink" title="4.5 awk命令"></a>4.5 awk命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#AWK是一种处理文本文件的语言，是一个强大的文本分析工具。一般配合cat命令可以对cat打开的文件内容进行分析展示;</span><br>语法：awk [参数选项] <span class="hljs-string">&quot;语法&quot;</span> 文件<br>参数：<br> -F <span class="hljs-string">&#x27;,&#x27;</span>  <span class="hljs-comment">#使用逗号对文件内容进行分割</span><br> $+数字    <span class="hljs-comment">#可以获取分割后的第几段内容</span><br> <span class="hljs-variable">$0</span> <span class="hljs-comment">#表示获取当前行内容</span><br> OFS=<span class="hljs-string">&#x27;分隔符&#x27;</span>   <span class="hljs-comment">#以指定的分隔符连接分割的结果</span><br><br><span class="hljs-comment">#awk脚本:</span><br>BEGIN&#123; 这里面放的是执行前的语句 &#125;<br>&#123;这里面放的是处理每一行时要执行的语句&#125;<br>END &#123;这里面放的是处理完所有的行后要执行的语句 &#125;<br><br><span class="hljs-comment">#awk的方法:</span><br>toupper($数字)<br>tolower($数字)<br>length($数字)<br><br><span class="hljs-comment">#awk的特殊变量:</span><br>NR 表示行号,从1开始<br>可以直接在&#123;中使用自定义的变量名&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-压缩与解压操作"><a href="#5-压缩与解压操作" class="headerlink" title="5 压缩与解压操作"></a>5 压缩与解压操作</h2><h3 id="5-1-ln命令"><a href="#5-1-ln命令" class="headerlink" title="5.1 ln命令"></a>5.1 ln命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#创建软连接，也就是windows中的快捷方式;</span><br>语法：ln -s 目标文件路径 快捷方式路径<br></code></pre></div></td></tr></table></figure><h3 id="5-2-find命令"><a href="#5-2-find命令" class="headerlink" title="5.2 find命令"></a>5.2 find命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：find [参数选项] &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定内容&gt; <span class="hljs-comment">#在指定目录下查找文件</span><br>参数选项：<br> -name filename <span class="hljs-comment">#查找名为filename的文件</span><br> -ctime -n或+n    <span class="hljs-comment">#按时间来查找文件，-n指n行以内，+n指n行以前</span><br>例如:<br> find . -name <span class="hljs-string">&quot;*.java&quot;</span>  将当前目录及其子目录下所有后缀名是java的文件罗列出来<br></code></pre></div></td></tr></table></figure><h3 id="5-3-gz压缩与解压命令"><a href="#5-3-gz压缩与解压命令" class="headerlink" title="5.3 gz压缩与解压命令"></a>5.3 gz压缩与解压命令</h3><h4 id="5-3-1-gzip压缩"><a href="#5-3-1-gzip压缩" class="headerlink" title="5.3.1 gzip压缩"></a>5.3.1 gzip压缩</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：gzip [参数选项] [文件] <span class="hljs-comment">#压缩文件</span><br>参数：<br> 不加任何参数表示压缩文件<br> -d 解压缩<br> -v 显示指令执行过程<br>举例：<br> gizp a.txt<span class="hljs-comment">#压缩a.txt文件</span><br> gzip *<span class="hljs-comment">#压缩当前目录下所有文件</span><br> gzip -dv *<span class="hljs-comment">#解压当前文件夹下所有压缩文件并列出详细信息</span><br></code></pre></div></td></tr></table></figure><h4 id="5-3-2-gunzip解压"><a href="#5-3-2-gunzip解压" class="headerlink" title="5.3.2 gunzip解压"></a>5.3.2 gunzip解压</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：gunzip [参数] [文件]<span class="hljs-comment">#解压文件</span><br>参数：<br> -v 显示指令执行过程<br>举例：<br> gunzip a.gz<span class="hljs-comment">#解压a文件;</span><br> gunzip *<span class="hljs-comment">#解压当前文件夹下所有压缩文件并列出详细信息</span><br><br><br>gunzip 专门解压文件;<br>例如:<br>gunzip a.gz   解压a文件, *可以表示所有文件;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-tar打包并压缩命令-掌握"><a href="#5-4-tar打包并压缩命令-掌握" class="headerlink" title="5.4 tar打包并压缩命令[掌握]"></a>5.4 tar打包并压缩命令[掌握]</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：<br> tar -zcvf 压缩文件名 文件名/文件夹名 <span class="hljs-comment">#打包，并压缩</span><br> tar –zxvf 压缩文件名  <span class="hljs-comment">#解压缩,解压到当前文件夹下</span><br> tar –zxvf 压缩文件名 -C 路径 <span class="hljs-comment">#解压缩,解压到指定文件夹下</span><br>参数：<br> -c：建立新的压缩文件<br> -v：显示指令执行过程<br> -f&lt;备份文件&gt;：指定压缩文件<br> -z：通过gzip指令处理压缩文件。<br> -t：列出压缩文件中的内容<br> -x：表示解压<br>举例:<br> tar -q -r a.zip a <span class="hljs-comment">#将a文件夹压缩成a.zip文件</span><br> <br>注意：<br> tar本身不具有压缩功能。他是调用gzip压缩功能实现的 。<br></code></pre></div></td></tr></table></figure><h3 id="5-5-zip格式解压与压缩"><a href="#5-5-zip格式解压与压缩" class="headerlink" title="5.5 zip格式解压与压缩"></a>5.5 zip格式解压与压缩</h3><h4 id="5-5-1-zip压缩"><a href="#5-5-1-zip压缩" class="headerlink" title="5.5.1 zip压缩"></a>5.5.1 zip压缩</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：zip [必要参数][选择参数][文件] <span class="hljs-comment">#压缩文件</span><br>参数：<br> -q 不显示指令执行过程。<br> -r 递归处理，将指定目录下的所有文件和子目录一并处理。<br>举例:<br> zip -q -r a.zip a <span class="hljs-comment">#将a文件夹压缩成a.zip文件</span><br> <br>注意：<br> 压缩出来的是<span class="hljs-string">&quot;.zip&quot;</span>扩展名的压缩文件。<br> zip是个在windows中使用广泛的压缩程序(linux中一般使用tar.gz方式压缩文件)，<br></code></pre></div></td></tr></table></figure><h4 id="5-5-2-unzip解压缩"><a href="#5-5-2-unzip解压缩" class="headerlink" title="5.5.2 unzip解压缩"></a>5.5.2 unzip解压缩</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：unzip [必要参数][选择参数][文件] <span class="hljs-comment">#解压</span><br>参数：<br> -l 显示压缩文件内所包含的文件。<br> -d&lt;目录&gt; 指定文件解压缩后所要存储的目录<br>举例:<br> unzip  a.zip <span class="hljs-comment">#将a.zip解压到当前文件夹中</span><br> unzip -d bb a.zip  <span class="hljs-comment">#将a.zip解压到bb文件夹中</span><br><br>注意：只能解压<span class="hljs-string">&quot;.zip&quot;</span>扩展名的压缩文件。<br></code></pre></div></td></tr></table></figure><h2 id="6-网络相关"><a href="#6-网络相关" class="headerlink" title="6 网络相关"></a>6 网络相关</h2><h3 id="6-1-ifconfig命令"><a href="#6-1-ifconfig命令" class="headerlink" title="6.1 ifconfig命令"></a>6.1 ifconfig命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">ifconfig 显示激活的网卡信息<br>ifconfig ens37 down 关闭网卡<br>ifconfig ens37 up 启动网卡<br>ifconfig ens37 192.168.23.199 配置ip地址<br>ifconfig ens37 192.168.23.133 netmask 255.255.255.0 配置ip地址和子网掩码<br></code></pre></div></td></tr></table></figure><h3 id="6-2-ping命令"><a href="#6-2-ping命令" class="headerlink" title="6.2 ping命令"></a>6.2 ping命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：ping [参数选项]  ip地址  <span class="hljs-comment">#检测是否与主机连通</span><br>参数选项：<br> -c&lt;完成次数&gt;：设置完成要求回应的次数。<br>例如:<br> ping www.baidu.com  <span class="hljs-comment">#检测是否与百度连通</span><br> ping -c 2 www.baidu.com <span class="hljs-comment">#指定接收包的次数</span><br></code></pre></div></td></tr></table></figure><h3 id="6-3-netstat命令"><a href="#6-3-netstat命令" class="headerlink" title="6.3 netstat命令"></a>6.3 netstat命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：netstat [参数选项] <span class="hljs-comment">#显示网络状态</span><br>参数：<br> -a 显示所有连线中的Socket<br> -i 显示网卡列表<br>举例:<br> netstat –a <span class="hljs-comment">#显示详细的连接状况</span><br> netstat –i <span class="hljs-comment">#显示网卡列表</span><br> netstat -ap <span class="hljs-comment">#Linux系统显示当前网络连接状况(带PID)</span><br> netstat -ano <span class="hljs-comment">#Windows系统显示当前网络连接状况(带PID)</span><br></code></pre></div></td></tr></table></figure><h2 id="7-硬盘相关"><a href="#7-硬盘相关" class="headerlink" title="7 硬盘相关"></a>7 硬盘相关</h2><h3 id="7-1-lsblk命令"><a href="#7-1-lsblk命令" class="headerlink" title="7.1 lsblk命令"></a>7.1 lsblk命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：lsblk [参数选项] <span class="hljs-comment">#列出硬盘的使用情况，理解为&quot;list block&quot;的英文缩写</span><br>参数：<br> -f 显示系统信息<br>例如:<br> lsblk <span class="hljs-comment">#列出硬盘的使用情况</span><br> lsblk –f <span class="hljs-comment">#显示系统信息</span><br></code></pre></div></td></tr></table></figure><h3 id="7-2-df命令"><a href="#7-2-df命令" class="headerlink" title="7.2 df命令"></a>7.2 df命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">语法：df [参数选项] <span class="hljs-comment">#显示目前在Linux系统上，硬盘的使用情况</span><br>参数选项：<br> --total：显示所有的信息<br> -h：换算成KB，MB，GB等形式进行展示（方便阅读）<br>例如:<br> df <span class="hljs-comment">#显示整个硬盘使用情况</span><br> df 文件夹   <span class="hljs-comment">#显示文件夹使用情况</span><br> df –total  <span class="hljs-comment">#显示所有的信息</span><br> df -h <span class="hljs-comment">#将结果变成KB，MB，GB形式展示，利于阅读</span><br></code></pre></div></td></tr></table></figure><h3 id="7-3-mount命令-掌握"><a href="#7-3-mount命令-掌握" class="headerlink" title="7.3 mount命令[掌握]"></a>7.3 mount命令[掌握]</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#作用：挂载Linux系统外的文件。(可以理解为是将linux系统外的软件或硬件与linux系统连接在一起,并被linux系统识别的一系列操作,就是挂载,例如:你把U盘插入电脑,电脑识别U盘,并读取到U盘中的内容就是挂载了U盘)</span><br>语法：mount [参数选项] 目录 <span class="hljs-comment">#用于挂载Linux系统外的设备</span><br>例如:<br> mkdir 文件夹   <span class="hljs-comment">#创建文件夹（也是创建一个挂载点）</span><br> mount -t auto /dev/cdrom 文件夹 <span class="hljs-comment">#开始挂载</span><br> umount 文件夹   <span class="hljs-comment">#卸载</span><br></code></pre></div></td></tr></table></figure><h2 id="8-软件下载安装与卸载"><a href="#8-软件下载安装与卸载" class="headerlink" title="8 软件下载安装与卸载"></a>8 软件下载安装与卸载</h2><h3 id="8-1-yum命令"><a href="#8-1-yum命令" class="headerlink" title="8.1 yum命令"></a>8.1 yum命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#Yum（全称为 Yellow dog Updater, Modified）是一个软件包管理器。能够从指定的服务器自动下载RPM软件安装包并且安装，还可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。 </span><br><span class="hljs-comment">#yum命令的作用: 可以完成软件的安装，下载或者卸载;</span><br><br><span class="hljs-comment">#yum常用命令：</span><br>yum check-update<span class="hljs-comment">#列出所有可更新的软件清单</span><br>yum update<span class="hljs-comment">#更新所有软件</span><br>yum install &lt;package_name&gt; <span class="hljs-comment">#仅安装指定的软件</span><br>yum update &lt;package_name&gt;<span class="hljs-comment">#仅更新指定的软件</span><br>yum list <span class="hljs-comment">#列出所有可安裝的软件清单</span><br>yum remove &lt;package_name&gt;<span class="hljs-comment">#删除软件包</span><br>yum search &lt;keyword&gt;<span class="hljs-comment">#查找软件包：</span><br>yum clean packages: <span class="hljs-comment">#清除缓存目录下的软件包</span><br>yum clean headers  <span class="hljs-comment">#清除缓存目录下的 headers </span><br>yum clean oldheaders <span class="hljs-comment">#清除缓存目录下旧的 headers </span><br>yum clean, yum clean all <span class="hljs-comment">#清除缓存目录下的软件包及旧的headers</span><br></code></pre></div></td></tr></table></figure><h3 id="8-2-rpm命令"><a href="#8-2-rpm命令" class="headerlink" title="8.2 rpm命令"></a>8.2 rpm命令</h3><p><strong>安装rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -ivh 软件全包名<br></code></pre></div></td></tr></table></figure><p><strong>卸载rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -e 软件全包名      <br></code></pre></div></td></tr></table></figure><p><strong>列出所有安装过的包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa<br></code></pre></div></td></tr></table></figure><p><strong>查询软件包信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qi 软件全包名<br></code></pre></div></td></tr></table></figure><p><strong>查看文件安装位置</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -ql 软件全包名<br></code></pre></div></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-day02-笔记</title>
    <link href="/2019/04/13/Linux-day02%E5%A4%A9-%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/04/13/Linux-day02%E5%A4%A9-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-v10-0-02天-课堂笔记"><a href="#Linux-v10-0-02天-课堂笔记" class="headerlink" title="Linux-v10.0-02天-课堂笔记"></a>Linux-v10.0-02天-课堂笔记</h1><span id="more"></span><p>学习目标</p><ul><li>能够熟练编写文件相关命令</li><li>能够熟练编写文件解压缩命令</li><li>能够熟练编写网络查看简单命令</li><li>能够熟练编写查看磁盘命令、挂载命令</li><li>能够知道如何使用命令进行分区、格式化</li><li>能够熟练使用yum进行查找、安装、卸载软件</li><li>能够熟练使用rpm进行查找、安装、卸载软件</li><li>能够熟练编写常用的shell脚本</li></ul><h1 id="1-Linux文件管理"><a href="#1-Linux文件管理" class="headerlink" title="1 Linux文件管理"></a>1 Linux文件管理</h1><h2 id="1-1-touch命令"><a href="#1-1-touch命令" class="headerlink" title="1.1 touch命令"></a>1.1 touch命令</h2><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">在Windows系统中，我们如果想创建一个文本文档或者<span class="hljs-built_in">word</span>文件的时候，通常的做法是<br>鼠标右键<span class="hljs-comment">---新建---文本文档，这样的话，我们就成功的创建了一个文件，而在Linux中，我们可以通过字符命令的形式进行创建</span><br></code></pre></div></td></tr></table></figure><p>touch命令用于创建文件、修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><p>ls -l 可以显示档案的时间记录</p><p><strong>使用者权限：所有权限用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">touch <span class="hljs-selector-attr">[-acfm]</span><span class="hljs-selector-attr">[-d&lt;日期时间&gt;]</span><span class="hljs-selector-attr">[-r&lt;参考文件或目录&gt;]</span> <span class="hljs-selector-attr">[-t&lt;日期时间&gt;]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[文件或目录…]</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>参数说明</strong>：</li><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。</li></ul><p><strong>使用 touch 创建一个空文件</strong></p><p>在 Linux 系统上使用 <code>touch</code> 命令创建空文件，键入 <code>touch</code>，然后输入文件名。如下所示</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch czbk-devops.txt<br></code></pre></div></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l czbk-devops.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576640085716.png" alt="1576640085716"></p><p><strong>使用 touch 创建批量空文件</strong></p><p>在实际的开发过程中可能会出现一些情况，我们必须为某些测试创建大量空文件，这可以使用 <code>touch</code> 命令轻松实现</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch czbk-&#123;1..10&#125;.txt<br></code></pre></div></td></tr></table></figure><p>在上面的例子中，我们创建了 10 个名为 czbk-1.txt<code>到</code>czbk-10.txt` 的空文件，你可以根据需要更改名称和数字</p><p>执行查看命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576640392259.png" alt="1576640392259"></p><p>由上图我们发现，我们通过批量命令创建了10个txt文件</p><p><strong>改变/更新文件访问时间</strong></p><p>假设我们想要改变名为 czbk-devops.txt 文件的访问时间，在 <code>touch</code> 命令中使用 <code>-a</code> 选项，然后输入文件名。如下所示：</p><p>1、我们先 查看下czbk-devops.txt的时间属性</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l czbk-devops.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576648168657.png" alt="1576648168657"></p><p>我们发现，最后的访问时间是12月 18 11:34</p><p>更新时间属性，如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch czbk-devops.txt <br></code></pre></div></td></tr></table></figure><p>执行ls命令查看，如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l czbk-devops.txt <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576648319770.png" alt="1576648319770"></p><p>我们发现，访问时间变成了 12月 18 13:50</p><p>我们也可以使用stat命令进行查看，如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stat czbk-devops.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576648420787.png" alt="1576648420787"></p><p>由上图可知：czbk-devops.txt的文件属性、包含访问时间、更改时间、最近改动时间都显示出来了。</p><p> <strong>关于stat命令：</strong></p><p><strong>stat命令用于显示inode内容。</strong></p><p>stat以文字的格式来显示inode的内容。</p><p><strong>语法</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">stat</span><span class="hljs-meta"> [文件或目录]</span><br></code></pre></div></td></tr></table></figure><h2 id="1-2-vi与vim命令"><a href="#1-2-vi与vim命令" class="headerlink" title="1.2 vi与vim命令"></a>1.2 vi与vim命令</h2><h3 id="1-2-1-vi-vim介绍"><a href="#1-2-1-vi-vim介绍" class="headerlink" title="1.2.1 vi/vim介绍"></a>1.2.1 vi/vim介绍</h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">使用<span class="hljs-keyword">vi</span>/<span class="hljs-keyword">vim</span>其实就相当于我们在Windows系统中创建文件、打开文件、编辑文件、保存文件操作<br></code></pre></div></td></tr></table></figure><p><strong>1、vi介绍</strong></p><p>vi是 <code>visual interface</code>的简称, 是linux中<strong>最经典</strong>的文本编辑器。</p><ul><li>vi的特点<ul><li>只能是编辑 <strong>文本内容</strong>, 不能对 字体 段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li>vi编辑器在 <strong>系统管理 服务器管理</strong> 编辑文件时, <strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><p><strong>2、vim介绍</strong></p><p><strong>vim</strong>:是从 vi （系统内置命令）发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 </p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><h3 id="1-2-2-vi-vim模式"><a href="#1-2-2-vi-vim模式" class="headerlink" title="1.2.2 vi/vim模式"></a>1.2.2 vi/vim模式</h3><p>vi/vim模式主要分为以下三种：</p><p><strong>命令模式</strong>：在Linux终端中输入“vim 文件名”就进入了命令模式,但不能输入文字。<br><strong>编辑模式：</strong>在命令模式下按i就会进入编辑模式，此时就可以写入程式，按Esc可回到命令模式。<br><strong>末行模式：</strong>在命令模式下按：进入末行模式，左下角会有一个冒号出现，此时可以敲入命令并执行。</p><p>下面是三种模式的简单分析图：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576653460302.png" alt="1576653460302"></p><blockquote><p>上图总结</p><p>上面的三种模式简单总结下就是：</p><p>1、vim  开始进入时是命令模式</p><p>2、按下I的时候会进入编辑模式</p><p>3、按下ESC然后在按下：的时候是末行模式</p></blockquote><h3 id="1-2-3-打开和新建文件"><a href="#1-2-3-打开和新建文件" class="headerlink" title="1.2.3 打开和新建文件"></a>1.2.3 打开和新建文件</h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">使用<span class="hljs-keyword">vim</span>不但可以打开一个现存的文件；也可以生成（<span class="hljs-keyword">vim</span>后的文件不存在的情况下）一个文件；有点类似于我们在Windows中输入notepad命令一样，我们输入notepad后就会打开一个文本文档，然后进行编辑--另存为。<br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：当前文件的权限用户</strong></p><ul><li>在终端中输入vim在后面跟上 文件名 即可</li></ul><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> txtfile.txt<br></code></pre></div></td></tr></table></figure><ul><li>如果文件已经存在, 会直接打开该文件</li><li>如果文件不存在, 保存且退出时 就会新建一个文件</li></ul><blockquote><p>注意</p><p>我们通过下面的三种模式切换详细阐述vim的用法</p></blockquote><h3 id="1-2-4-三种模式切换"><a href="#1-2-4-三种模式切换" class="headerlink" title="1.2.4 三种模式切换"></a>1.2.4 三种模式切换</h3><p><strong>1、进入命令模式</strong></p><p>上接上面的例子，我们执行下面的命令其实就是进入了命令模式</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576655123201.png" alt="1576655123201"></p><p><strong>2、进入编辑模式</strong></p><p>上接上面的例子，按i进入插入模式</p><ul><li>在 vi 中除了常用 <code>i</code> 进入<strong>编辑模式</strong> 外, 还提供了一下命令同样可以进入编辑模式</li></ul><table><thead><tr><th>命令</th><th>英文</th><th>功能</th><th>常用</th></tr></thead><tbody><tr><td>i</td><td>insert</td><td>在当前字符前插入文本</td><td>常用</td></tr><tr><td>I</td><td>insert</td><td>在行首插入文本</td><td>较常用</td></tr><tr><td>a</td><td>append</td><td>在当前字符后添加文本</td><td></td></tr><tr><td>A</td><td>append</td><td>在行末添加文本</td><td>较常用</td></tr><tr><td>o</td><td></td><td>在当前行后面插入一空行</td><td>常用</td></tr><tr><td>O</td><td></td><td>在当前行前面插入一空行</td><td>常用</td></tr></tbody></table><p>上图可以表现为以下形式，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576663442969.png" alt="1576663442969"></p><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576655181144.png" alt="1576655181144"></p><p>由上图左下角我们看到【插入】（英文版为INSERT）,说明我们进入了编辑模式</p><p>我们在里面插入数据，如下图</p><p>因为我们是一个空文件，所以使用【I】或者【i】都可以</p><p>如果里面的文本很多，要使用【A】进入编辑模式，即在行末添加文本</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576655270283.png" alt="1576655270283"></p><p><strong>3、进入末行模式</strong></p><p>编辑模式不能保存文件<br>必须先推到命令模式<br>先按Esc键退出到命令模式<br>然后按小写的**:wq 正常保存退出**</p><p>进入末行模式—》按符号： 鼠标跑到屏幕的最后一行，执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576655879564.png" alt="1576655879564"></p><p>然后按小写的**:wq 正常保存退出**</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576655592207.png" alt="1576655592207"></p><p>退出后显示【已写入】</p><p><strong>以下为其他的退出模式：</strong></p><p>:q            当vim进入文件没有对文件内容做任何操作可以按”q”退出</p><p>:q!           当vim进入文件对文件内容有操作但不想保存退出</p><p>:wq          正常保存退出</p><p>:wq!         强行保存退出，只针对与root用户或文件所有人生</p><blockquote><p>总结</p><p>三种模式的切换，其实就完成了文件创建、编辑、保存、退出四个步骤</p><p>那么接下来，我们学习下一个命令</p><p>查看刚才新创建的文件</p></blockquote><h3 id="1-2-5-文件查看"><a href="#1-2-5-文件查看" class="headerlink" title="1.2.5 文件查看"></a>1.2.5 文件查看</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">比如查看一个txt文档，在windows中，我们通常是打开一个文件，通过鼠标滚动查看文件不同节选的内容，而在Linux中，通过下面的命令，可以减少在Windows中手工查找的步骤，在Linux中通过命令+参数的形式进行定位查看、搜索查看<br></code></pre></div></td></tr></table></figure><p>以下5个为文件查看命令，<strong>我们只讲4个常用的命令，head不在赘述</strong></p><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看小文件内容</td></tr><tr><td>02</td><td>less -N 文件名</td><td>less</td><td><strong>分频</strong> 显示大文件内容</td></tr><tr><td>03</td><td>head -n 文件名</td><td></td><td>查看文件的<strong>前一</strong>部分</td></tr><tr><td>04</td><td>tail -n 文件名</td><td></td><td>查看文件的<strong>最后</strong>部分</td></tr><tr><td>05</td><td>grep 关键字 文件名</td><td>grep</td><td>根据<strong>关键词</strong>, 搜索文本文件内容</td></tr></tbody></table><blockquote><p>总结：</p><p>以上5个命令都可以查询文件的内容，他们的功能如下</p><p>通过 <code>cat</code> 会一次显示所有的内容, 适合 <strong>查看内容较少</strong> 的文本文件</p><p><code>less</code> 命令适合查看 <strong>内容较多</strong> 的文本文件</p><p>通过 <code>head</code> 命令查看文档的前几行内容</p><p>通过 <code>tail -10f 文件</code> 命令 查看文档(日志)的后几行内容</p><p>通过 <code>grep</code> 命令 搜索存在 <strong>关键字</strong> 的行</p></blockquote><h4 id="1-cat命令"><a href="#1-cat命令" class="headerlink" title="1) cat命令"></a><strong>1) cat命令</strong></h4><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">使用cat命令类似于我们在Windows中查看小型（太大的时候打开会卡死）的文件，cat常用的功能其实就等价于Windows中的</span><br><span class="hljs-comment">txt</span>--<span class="hljs-literal">-</span><span class="hljs-comment">打开</span>--<span class="hljs-comment">查看</span><br></code></pre></div></td></tr></table></figure><p>cat 是一个文本文件查看和连接工具。查看一个文件的内容，用cat比较简单，就是cat 后面直接接文件名，如cat txtFiles.txt</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>语法格式</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">cat <span class="hljs-selector-attr">[-AbeEnstTuv]</span> <span class="hljs-selector-attr">[--help]</span> <span class="hljs-selector-attr">[--version]</span> fileName<br></code></pre></div></td></tr></table></figure><p><strong>查看文件名为txtfile.txt的内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576657358085.png" alt="1576657358085"></p><p><strong>查看文件名为txtfile.txt的内容（加入行号）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat -n txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576657409815.png" alt="1576657409815"></p><h4 id="2-grep命令"><a href="#2-grep命令" class="headerlink" title="2) grep命令"></a>2) grep命令</h4><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">grep命令在使用的时候类似于我们的程序中的查询，或者在txt文档中通过ctr</span><span class="hljs-literal">+</span><span class="hljs-comment">f查找</span><br><span class="hljs-comment">grep除了能对文件操作为还可以查看我们的进程信息，类似于我们在Windows系统的任务管理器（任务栏</span>--<span class="hljs-comment">右键</span>--<span class="hljs-literal">-</span><span class="hljs-comment">启动任务管理器</span>--<span class="hljs-comment">进程）下的进程</span><br></code></pre></div></td></tr></table></figure><p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。</p><p>grep 命令用于查找文件里符合条件的字符串，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">grep <span class="hljs-selector-attr">[-abcEFGhHilLnqrsvVwxy]</span><span class="hljs-selector-attr">[-A&lt;显示列数&gt;]</span><span class="hljs-selector-attr">[-B&lt;显示列数&gt;]</span><span class="hljs-selector-attr">[-C&lt;显示列数&gt;]</span><span class="hljs-selector-attr">[-d&lt;进行动作&gt;]</span><span class="hljs-selector-attr">[-e&lt;范本样式&gt;]</span><span class="hljs-selector-attr">[-f&lt;范本文件&gt;]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[范本样式]</span><span class="hljs-selector-attr">[文件或目录...]</span><br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：当前文件的权限用户</strong></p><p>我们还是使用上面的txtfile.txt文件，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576664862829.png" alt="1576664862829"></p><blockquote><p>为了测试效果，我们新增了其他数据</p><p>增加过程不在赘述</p></blockquote><p>1、搜索 <strong>存在关键字【eeee】</strong> 的行的文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep eeee txtfile.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576664910366.png" alt="1576664910366"></p><p>2、搜索 <strong>存在关键字【eeee】</strong> 的行 且 <strong>显示行号</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep -n eeee txtfile.txt <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576665113269.png" alt="1576665113269"></p><p>3、<strong>忽略大小写</strong> 搜索 <strong>存在关键字</strong> 的行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep -i EEEE txtfile.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576666861596.png" alt="1576666861596"></p><p>4、搜索 <strong>不存在关键字</strong> 的行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep -v 中国 txtfile.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576666928266.png" alt="1576666928266"></p><p><strong>5、查找指定的进程信息（包含grep进程）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -ef | grep  sshd<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577095621215.png" alt="1577095621215"></p><blockquote><p>说明</p><p>除最后一条记录外，其他的都是查找出的进程；最后一条记录结果是grep进程本身，并非真正要找的进程</p></blockquote><p><strong>6、查找指定的进程信息（不包含grep进程）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps aux | grep sshd | grep -v &quot;grep&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577095998308.png" alt="1577095998308"></p><p><strong>7、查找进程个数</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -ef|grep -c sshd<br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577096070670.png" alt="1577096070670"></p><p>由上图可知sshd的进程个数为4（包含grep进程本身）</p><h4 id="3-tail命令"><a href="#3-tail命令" class="headerlink" title="3) tail命令"></a>3) tail命令</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tail</span>命令类似于我们在windows中通过鼠标手工查找，比如查看文件最后<span class="hljs-number">10</span>行，从第<span class="hljs-number">2</span>行一直查看到文件末尾，或者只查看文件末尾的一些信息，这些windows中都是通过人为干预的方式进行查找，在Linux中我们可以通过tail命令实现<br></code></pre></div></td></tr></table></figure><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p><p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>命令格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail [参数] [文件]  <br></code></pre></div></td></tr></table></figure><p><strong>1、要显示 txtfile.txt  文件的最后 3 行，请输入以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail -3 txtfile.txt <br></code></pre></div></td></tr></table></figure><p>原始文件内容如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576667678964.png" alt="1576667678964"></p><p>最后3行内容如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576667701796.png" alt="1576667701796"></p><p><strong>2、动态显示文档的最后内容,一般用来查看日志，请输入以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail -f txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576667811261.png" alt="1576667811261"></p><p>此命令显示 txtfile.txt 文件的最后 10 行。当将某些行添加至 txtfile.txt 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>如果要显示最后4行，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail -4f txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576719306123.png" alt="1576719306123"></p><p><strong>3、显示文件txtfile.txt 的内容，从第 2 行至文件末尾</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail  -n +2  txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576719057889.png" alt="1576719057889"></p><p><strong>4、显示文件 txtfile.txt的最后 10 个字符:</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tail -c 45 txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576719098586.png" alt="1576719098586"></p><blockquote><p>总结</p><p>在tail使用的过程中，我们使用最多的就是查看文件末尾多多少行</p><p>使用tail -nf txtfile.txt</p><p>通常都是在查看日志信息（报错调试时使用）</p></blockquote><h4 id="4）less命令"><a href="#4）less命令" class="headerlink" title="4）less命令"></a>4）less命令</h4><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">less</span>命令也是查看文件的，只不过它适合查看 内容较多的文本文件，它也可以用于分屏显示文件内容,  每次只显示一页内容，有点类似我们做分页查询<br></code></pre></div></td></tr></table></figure><p>less用于查看文件，但是less 在查看之前不会加载整个文件。</p><p><strong>使用者权限：当前文件的权限用户</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">less [参数] 文件 <br></code></pre></div></td></tr></table></figure><p>1、查看txtfile.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">less txtfile.txt<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576720622842.png" alt="1576720622842"></p><p>2、查看命令历史使用记录并通过less分页显示</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[itcast@localhost ~]$  history | less<br>    1  ifconfig<br>    2  reboot<br>    3  ifconfig<br>    4  reboot<br>    5  ifconfig<br>    6  su root<br>    7  ifconfig<br>    8  ping  www.baidu.com<br>    9  \<br>   10  ifconfig<br>   11  date<br>   12  hwclock --systohc<br>   13  su root<br>   <br>   ......略<br></code></pre></div></td></tr></table></figure><p>我们输入【j】可以前进行</p><p>​        输入【k】可以后退行</p><p>​        输入【G】可以 移动到最后一行</p><p>​        输入【g】可以移动到第一行</p><p>​        输入【ctrl + F】 向前移动一屏(类似于我们在浏览器中的数据分页的下一页)</p><p>​        输入【ctrl + B】 向后移动一屏(类似于我们在浏览器中的数据分页的上一页)</p><p><strong>其他命令</strong></p><p>1.全屏导航</p><ul><li>ctrl + F - 向前移动一屏</li><li>ctrl + B - 向后移动一屏</li><li>ctrl + D - 向前移动半屏</li><li>ctrl + U - 向后移动半屏</li></ul><p>2.单行导航</p><ul><li>j - 向前移动一行</li><li>k - 向后移动一行</li></ul><p>3.其它导航</p><ul><li>G - 移动到最后一行</li><li>g - 移动到第一行</li><li>q / ZZ - 退出 less 命令</li></ul><h3 id="1-2-6-vim定位行"><a href="#1-2-6-vim定位行" class="headerlink" title="1.2.6  vim定位行"></a>1.2.6  vim定位行</h3><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">在日常工作中,有可能会遇到打开一个文件,并定位到指定行的情况<br><span class="hljs-section">例如: 在开发时, 知道某一行代码有错误,可以快速定位到出错误代码的位置</span><br>这个时候,可以使用以下命令打开文件<br></code></pre></div></td></tr></table></figure><p>由于我们这里还没有学到上传文件的命令，所以我们这里还是使用上面的txtfile.txt例子，我们打开文件定位到第6行，如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim txtfile.txt +6<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576659165723.png" alt="1576659165723"></p><h3 id="1-2-7-异常处理"><a href="#1-2-7-异常处理" class="headerlink" title="1.2.7 异常处理"></a><strong>1.2.7 异常处理</strong></h3><ul><li>如果 vim异常退出, 在磁盘上可能会保存有 交换文件</li><li>下次再使用 vim 编辑文件时, 会看到以下屏幕信息,</li></ul><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576658330514.png" alt="1576658330514"></p><p>解决方案：</p><p>将后缀名为.swp的文件删除即可恢复</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576658480811.png" alt="1576658480811"></p><p>再次编辑文件不在出现提示警告！</p><h3 id="1-2-8-操作扩展"><a href="#1-2-8-操作扩展" class="headerlink" title="1.2.8 操作扩展"></a>1.2.8 操作扩展</h3><p>要熟练使用vi/vim, 首先应该学会怎么在 命令模式下 快速移动光标<br>编辑操作命令 能够和移动命令一起使用</p><p><strong>1) 上 下 左 右</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1558278451153.png" alt="1558278451153"></p><table><thead><tr><th>命令</th><th>功能</th><th>手指</th></tr></thead><tbody><tr><td>h</td><td>向左</td><td>食指</td></tr><tr><td>j</td><td>向下</td><td>食指</td></tr><tr><td>k</td><td>向上</td><td>中指</td></tr><tr><td>l</td><td>向右</td><td>无名指</td></tr></tbody></table><p>也可以使用键盘上的上下左右箭头，这个更有方向感。</p><p><strong>2) 行内移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>w</td><td>word</td><td>向后移动一个单词</td></tr><tr><td>b</td><td>back</td><td>向前移动一个单词</td></tr><tr><td>0</td><td></td><td>行首</td></tr><tr><td>^</td><td></td><td>行首, 第一个不是空白字符的位置</td></tr><tr><td>$</td><td></td><td>行尾</td></tr></tbody></table><p><strong>3) 行数移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>gg</td><td>go</td><td>文件顶部</td></tr><tr><td>G</td><td>go</td><td>文件末尾</td></tr><tr><td>数字gg</td><td>go</td><td>移动到 数字 对应行数</td></tr><tr><td>数字G</td><td>go</td><td>移动到 数字 对应行数</td></tr><tr><td>: 数字</td><td></td><td>移动到数字对应的 行数</td></tr></tbody></table><p><strong>4) 屏幕移动</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + b</td><td>back</td><td>向上翻页</td></tr><tr><td>Ctrl + f</td><td>forward</td><td>向下翻页</td></tr><tr><td>H</td><td>Head</td><td>屏幕顶部</td></tr><tr><td>M</td><td>Middle</td><td>屏幕中间</td></tr><tr><td>L</td><td>Low</td><td>屏幕底部</td></tr></tbody></table><p><strong>5) 选中文本(可视模式)</strong></p><ul><li>学习 复制 命令前, 应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 vi/vim 中要选择文本, 需要显示 visual 命令切换到 <strong>可视模式</strong></li><li>vi/vim 中提供了 <strong>三种</strong> 可视模式, 可以方便程序员的选择 <strong>选中文本的方式</strong></li><li>按 ESC 可以放弃选中, 返回到 <strong>命令模式</strong></li></ul><table><thead><tr><th>命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td>v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td>V</td><td>可视化模式</td><td>选中光标经过的完整行</td></tr><tr><td>Ctrl + v</td><td>可是块模式</td><td>垂直方向选中文本</td></tr></tbody></table><p><strong>6) 撤销和恢复撤销(保命指令)</strong></p><p>在学习编辑命令之前,先要知道怎样撤销之前一次 错误的 编辑操作</p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>u</td><td>undo</td><td>撤销上次的命令(ctrl + z)</td></tr><tr><td>Ctrl + r</td><td>uredo</td><td>恢复撤销的命令</td></tr></tbody></table><p><strong>7) 删除文本</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>x</td><td>cut</td><td>删除光标所在的字符,或者选中的文字</td></tr><tr><td>d(移动命令)</td><td>delete</td><td>删除移动命令对应的内容</td></tr><tr><td>dd</td><td>delete</td><td>删除光标所在行, 可以删除多行</td></tr><tr><td>D</td><td>delete</td><td>删除至行尾</td></tr></tbody></table><p>提示: 如果使用 可视模式 已经选中了一段文本, 那么无论使用 d 还是 x, 都可以删除选中文本</p><p>删除命令可以和移动命令连用, 以下是常见的组合命令(扩展):</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dw</td><td>从光标位置删除到单词末尾</td></tr><tr><td>d}</td><td>从光标位置删除到段落末尾</td></tr><tr><td>ndd</td><td>从光标位置向下连续删除 n 行</td></tr></tbody></table><p><strong>8) 复制和剪切</strong></p><ul><li>vi/vim 中提供有一个 被复制文本的缓冲区<ul><li>复制 命令会将选中的文字保存在缓冲区</li><li>删除 命令删除的文字会被保存在缓冲区</li><li>在需要的位置, 使用 粘贴 命令可以将缓冲对的文字插入到光标所在的位置</li></ul></li></ul><table><thead><tr><th>命令</th><th>英文</th><th>功能</th></tr></thead><tbody><tr><td>yy</td><td>copy</td><td>复制行</td></tr><tr><td>d(剪切命令)</td><td>delete</td><td>剪切</td></tr><tr><td>dd(剪切)</td><td>delete</td><td>剪切一行, 可以 ndd 剪切n行</td></tr><tr><td>p</td><td>paste</td><td>粘贴</td></tr></tbody></table><p>提示:</p><ul><li>命令 d 、x 类似于图形界面的 <strong>剪切操作</strong>  – ctrl + x</li><li>命令 y 类似于 图形界面的 <strong>复制操作</strong> – Ctrl + </li><li>命令 p 类似于图形界面的 <strong>粘贴操作</strong> – Ctrl + v</li><li>vi中的文本缓冲区只有一个,如果后续做过 复制、剪切操作, 之前缓冲区中的内容会被替换.</li></ul><p>注意</p><ul><li>vi中的 <strong>文本缓冲区</strong> 和 系统的 <strong>剪切板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>Ctrl + C</code> 复制的内容, 不能再 <code>vi</code> 中通过 <code>p</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><p><strong>9) 替换</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td>r</td><td>replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td>R</td><td>replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>, 替换完成后, 按下<code>ESC</code> , 按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>, 对文件进行 <strong>轻量级的修改</strong></li></ul><p><strong>10) 缩排和重复执行</strong></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td>&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td>.</td><td>重复上次命令</td></tr></tbody></table><ul><li><strong>缩进命令</strong> 在开发程序时, <strong>统一增加代码的缩进</strong> 比较有用!<ul><li>一次性 <strong>在选中代码前增加 4 个空格,</strong>  就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>,  就叫做 <strong>较少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下, 缩排命令 主需要使用 一个 <code>&gt;</code> 或者 <code>&lt;</code></li></ul><p>在程序中, <strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li><strong>前面空格越少, 代码的级别越高</strong></li><li><strong>前面空格越多, 代码的级别越低</strong></li></ul><p><strong>11) 查找</strong></p><p>常规查找</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>/str</td><td>查找str</td></tr></tbody></table><ul><li><p>查找到指定内容之后, 使用 <code>Next</code> 查找下一个出现的位置</p><ul><li><code>n</code> : 查找下一个</li><li><code>N</code> : 查找上一个</li></ul></li><li><p>如果不想看到高亮显示, 可以随便查找一个文件中不存在的内容即可</p></li><li><p>单词快速匹配</p></li></ul><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>向后查找当前光标所在单词</td></tr><tr><td>#</td><td>向前查找当前光标所在单词</td></tr></tbody></table><ul><li>在开发中, 通过单词快速匹配, 可以快速看到这个单词在其他位置使用过</li></ul><p><strong>12) 查找并替换</strong></p><ul><li>在 <code>vi/vim</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式</li></ul><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s///g</span><br></code></pre></div></td></tr></table></figure><ol><li> 全局替换</li></ol><ul><li><p>一次向 替换文件中的 所有出现的旧文本</p></li><li><p>命令格式如下</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>旧文本/新文本/g<br></code></pre></div></td></tr></table></figure></li></ul><ol start="2"><li>可视区域替换</li></ol><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">:s<span class="hljs-regexp">/旧文本/</span>新文本/g<br></code></pre></div></td></tr></table></figure><ol start="3"><li>确认替换：</li></ol><p>c confirm 确认</p><ul><li><p>如果把末尾的 <code>g</code> 改成 <code>gc</code>  在替换的时候, 会有提示! 推荐使用</p></li><li><p>命令格式如下</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>旧文本/新文本/gc<br></code></pre></div></td></tr></table></figure></li></ul><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> -<code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个, 并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h2 id="1-3-echo-命令"><a href="#1-3-echo-命令" class="headerlink" title="1.3 echo 命令"></a>1.3 echo 命令</h2><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span>命令有点类似于我们在java <span class="hljs-keyword">se</span>阶段学习的 System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>但是，<span class="hljs-keyword">echo</span>还有一个功能就是追加文件内容到文件，类似于我们在java <span class="hljs-keyword">se</span>阶段学习的<span class="hljs-keyword">append</span>文件流写入一样<br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：所有用户</strong></p><ul><li><code>echo string</code> 将字符串输出到控制台 ,  通常和 <strong>重定向</strong> 联合使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> hello world<br><br><span class="hljs-comment"># 如果字符串有空格, 为了避免歧义 请增加 双引号 或者 单引号</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>6.3 重定向 <code>&gt;</code>(覆盖) 和 <code>&gt;&gt;</code> (追加)</strong> </p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1558435686066-1576721493121.png" alt="1558435686066"></p><ul><li>默认情况下 <strong>命令的结果</strong> 输出到 <strong>控制台</strong></li><li>通过 <strong>重定向</strong> 可以将结果 <strong>输出到文件</strong></li></ul><p><strong>6.2.3 实现</strong></p><ul><li><strong>第一步: 将命令的成功结果 覆盖 指定文件内容</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span>  传智博客 &gt;czbk-txt.txt<br></code></pre></div></td></tr></table></figure><p>执行结果如下（czbk-txt.txt文件如果没有会自动创建）</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576721910460.png" alt="1576721910460"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>结果 &gt; 文件名</td><td><code>&gt;</code> 表示输出, 会覆盖文件的原有内容</td></tr></tbody></table><ul><li><h5 id="第二步-将命令的成功结果-追加-指定文件的后面"><a href="#第二步-将命令的成功结果-追加-指定文件的后面" class="headerlink" title="第二步: 将命令的成功结果 追加  指定文件的后面"></a>第二步: 将<strong>命令的成功结果</strong> <strong>追加</strong>  指定文件的后面</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span>  黑马程序员 &gt;&gt; czbk-txt.txt<br></code></pre></div></td></tr></table></figure><p>执行结果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576721980097.png" alt="1576721980097"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt;&gt; 文件名</td><td><code>&gt;&gt;</code> 表示追加, 会将内容追加到已有文件的末尾</td></tr></tbody></table><ul><li><h5 id="第三步-将命令的失败结果-追加-指定文件的后面"><a href="#第三步-将命令的失败结果-追加-指定文件的后面" class="headerlink" title="第三步: 将命令的失败结果 追加 指定文件的后面"></a>第三步: 将<strong>命令的失败结果</strong> <strong>追加</strong> 指定文件的后面</h5></li></ul><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> 不存在的目录  &amp;&gt;&gt;  <span class="hljs-keyword">error</span>.<span class="hljs-keyword">log</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576722167942.png" alt="1576722167942"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>命令  <code>&amp;&gt;&gt;</code> 文件</td><td><code>&amp;&gt;&gt;</code> 表示不区分错误类型 都放到 日志中</td></tr></tbody></table><blockquote><p>总结</p><ul><li>通过 <code>命令 &gt; 文件</code>  将<strong>命令的成功结果</strong> <strong>覆盖</strong> 指定文件内容</li><li>通过 <code>命令 &gt;&gt; 文件</code>   将<strong>命令的成功结果</strong> <strong>追加</strong>  指定文件的后面</li><li>通过 <code>命令 &amp;&gt;&gt; 文件</code> 将 <strong>命令的失败结果</strong> <strong>追加</strong> 指定文件的后面</li></ul></blockquote><h2 id="1-4-awk命令"><a href="#1-4-awk命令" class="headerlink" title="1.4 awk命令"></a>1.4 awk命令</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><p><strong>具体语法如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">awk [选项参数] &#x27;script&#x27; var=value file(s)<br>或<br>awk [选项参数] -f scriptfile var=value file(s)<br></code></pre></div></td></tr></table></figure><p><strong>1、数据准备：czbk-txt.txt文本内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">zhangsan 68 99 26<br>lisi 98 66 96<br>wangwu 38 33 86<br>zhaoliu 78 44 36<br>maq 88 22 66<br>zhouba 98 44 46<br></code></pre></div></td></tr></table></figure><p> <strong>2、搜索含有 zhang  和 li 的学生成绩：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat czbk-txt.txt | awk &#x27;/zhang|li/&#x27;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577178031588.png" alt="1577178031588"></p><p><strong>指定分割符, 根据下标显示内容</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘,’    ‘{print $1, $2, $3}’  文件</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>选项</p><table><thead><tr><th>选项</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td><code>-F &#39;,&#39;</code></td><td>field-separator</td><td>使用 <strong>指定字符</strong> 分割</td></tr><tr><td><code>$ + 数字</code></td><td></td><td>获取<strong>第几段</strong>内容</td></tr><tr><td><code>$0</code></td><td></td><td>获取 <strong>当前行</strong> 内容</td></tr><tr><td><code>NF</code></td><td>field</td><td>表示当前行共有多少个字段</td></tr><tr><td><code>$NF</code></td><td></td><td>代表 最后一个字段</td></tr><tr><td><code>$(NF-1)</code></td><td></td><td>代表 倒数第二个字段</td></tr><tr><td><code>NR</code></td><td></td><td>代表 处理的是第几行</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 查看文档内容</span><br><span class="hljs-attribute">cat</span> czbk-txt.txt <br><span class="hljs-comment">#直接输出</span><br>cat score.txt | awk -F <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577178523300.png" alt="1577178523300"></p><p><strong>指定分割符, 根据下标显示内容</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘ ‘    ‘{OFS=”===”}{print $1, $2, $3}’  1.txt</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>选项</p><table><thead><tr><th>选项</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td><code>OFS=&quot;字符&quot;</code></td><td>output field separator</td><td>向外输出时的段分割字符串</td></tr></tbody></table><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>制表符</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 按照 === 进行分割, 打印 第一段 第二段 第三段</span><br><span class="hljs-attribute">cat</span>  czbk-txt.txt | awk -F <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;OFS=&quot;===&quot;&#125;&#123;print <span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>&#125;&#x27;</span><br><span class="hljs-comment"># 按照 制表符tab 进行分割, 打印 第一段 第二段 第三段</span><br>cat czbk-txt.txt| awk -F <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;OFS=&quot;\t&quot;&#125;&#123;print <span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577178563336.png" alt="1577178563336"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577179227699.png" alt="1577179227699"></p><p><strong>调用 awk 提供的函数</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk   -F  ‘,’    ‘{print  toupper($2)}’  1.txt</td><td>操作1.txt文件,  根据 逗号 分割, 打印 第一段 第二段 第三段 内容</td></tr></tbody></table><p>常用函数如下:</p><table><thead><tr><th>函数名</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td>toupper()</td><td>upper</td><td>字符 转成 大写</td></tr><tr><td>tolower()</td><td>lower</td><td>字符 转成小写</td></tr><tr><td>length()</td><td>length</td><td>返回 字符长度</td></tr></tbody></table><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 打印第一段内容</span><br> <span class="hljs-built_in">cat</span> czbk<span class="hljs-literal">-txt</span>.txt | awk <span class="hljs-operator">-F</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br><span class="hljs-comment"># 将第一段内容转成大写 且 显示 </span><br> <span class="hljs-built_in">cat</span> czbk<span class="hljs-literal">-txt</span>.txt | awk <span class="hljs-operator">-F</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print toupper($1)&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577180402362.png" alt="1577180402362"></p><p><strong>求指定学科平均分</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>awk ‘BEGIN{初始化操作}{每行都执行} END{结束时操作}’   文件名</td><td>BEGIN{ 这里面放的是执行前的语句 }<br />{这里面放的是处理每一行时要执行的语句}<br />END {这里面放的是处理完所有的行后要执行的语句 }</td></tr></tbody></table><p><strong>查看czbk-txt.txt 文件内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat czbk-txt.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577180698120.png" alt="1577180698120"></p><p><strong>查看总分</strong></p><p>注意：这里计算的是第4列的总分</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat czbk-txt.txt| awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total&#125;&#x27;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577180583110.png" alt="1577180583110"></p><p><strong>查看总分, 总人数</strong></p><p>注意：这里计算的是第4列的</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat czbk-txt.txt| awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total, NR&#125;&#x27;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577180635136.png" alt="1577180635136"></p><p><strong>查看总分, 总人数, 平均分</strong></p><p>注意：这里计算的是第4列的</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat czbk-txt.txt | awk -F &#x27; &#x27; &#x27;BEGIN&#123;&#125;&#123;total=total+$4&#125; END&#123;print total, NR, (total/NR)&#125;&#x27;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577180660454.png" alt="1577180660454"></p><blockquote><p>总结</p><p>awk在使用过程中主要用作分析</p><p>简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理</p></blockquote><h2 id="1-5-软连接"><a href="#1-5-软连接" class="headerlink" title="1.5  软连接"></a>1.5  软连接</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">软连接其实就类似于我们在Windows中的【快捷方式】<br></code></pre></div></td></tr></table></figure><ul><li>在Linux<strong>文件名</strong> 和 <strong>内容</strong> 是两个文件, 分开的!<img src="https://gitee.com/wxqgm/pic/raw/master/img/1558439106175.png" alt="1558439106175"></li></ul><ul><li><p>创建软链接的原理, 如下<img src="https://gitee.com/wxqgm/pic/raw/master/img/1558439158250.png" alt="1558439158250"></p><p>为什么有软连接？</p><p>因为 某些文件和目录 的 <strong>路径很深</strong>, 所以 需要增加 <strong>软链接(快捷方式)</strong></p></li></ul><p><strong>使用者权限：所有用户</strong></p><p><strong>语法如下:</strong></p><table><thead><tr><th>命令</th><th>英文</th><th>作用</th></tr></thead><tbody><tr><td>ln <strong>-s</strong>  目标文件绝对路径  快捷方式路径</td><td>link</td><td>给目标文件增加一个软链接, 通俗讲就是快捷方式</td></tr></tbody></table><p><strong>给home/itcast/txtfile.txt文件增加软连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln  -s /home/itcast/txtfile.txt    czbk-txt<br></code></pre></div></td></tr></table></figure><p>上面；我们将/home/itcast/路径下的txtfile.txt文件增加软连接到</p><p>czbk-txt，然后通过cat 访问czbk-txt也是可以正常访问的</p><p>如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576723058556.png" alt="1576723058556"></p><blockquote><p>总结</p><p>通过 `ln -s 源文件的绝对路径 其实就是给<strong>目标文件</strong> 增加 <strong>快捷方式</strong></p></blockquote><h2 id="1-6-find查找"><a href="#1-6-find查找" class="headerlink" title="1.6 find查找"></a>1.6 find查找</h2><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">引子<br>find命令类似与在Windows中全局查找（如下图）<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576828863833.png" alt="1576828863833"></p><p><strong>find概念</strong></p><p>find命令用来在指定目录下查找文件。</p><p>任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定内容&gt;<br></code></pre></div></td></tr></table></figure><p><strong>1、将目前目录及其子目录下所有延伸档名是 gz 的文件查询出来</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find . -name &quot;*.gz&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576829221486.png" alt="1576829221486"></p><p><strong>2、将目前目录及其子目录下所有最近 1天内更新过的文件查询出来</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find . -ctime -1<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576829352063.png" alt="1576829352063"></p><p><strong>3、全局搜索czbk</strong></p><p>/代表是全盘搜索,也可以指定目录搜索 </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find / -name  &#x27;czbk&#x27;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576829929308.png" alt="1576829929308"></p><h2 id="1-7-read命令"><a href="#1-7-read命令" class="headerlink" title="1.7 read命令"></a>1.7 read命令</h2><blockquote><p>注意：</p><p>read命令属于文件范畴的命令</p><p>在下面的演示中，会涉及到shell，shell章节在最后一章</p><p>建议：讲解shell的时候在回过来说下read命令的语法</p><p>我们在综合案例中也会降到read</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">引子：<br><span class="hljs-keyword">read</span>命令相当于在java <span class="hljs-keyword">SE</span>阶段我们学习的键盘录入输入Scanner（<span class="hljs-keyword">read</span>命令会比Scanner更强大），开发人员可以动态的与程序交互，<br></code></pre></div></td></tr></table></figure><p>read命令用于从标准输入读取数值。</p><p>read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据。</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">read <span class="hljs-selector-attr">[-ers]</span> <span class="hljs-selector-attr">[-a aname]</span> <span class="hljs-selector-attr">[-d delim]</span> <span class="hljs-selector-attr">[-i text]</span> <span class="hljs-selector-attr">[-n nchars]</span> <span class="hljs-selector-attr">[-N nchars]</span> <span class="hljs-selector-attr">[-p prompt]</span> <span class="hljs-selector-attr">[-t timeout]</span> <span class="hljs-selector-attr">[-u fd]</span> <span class="hljs-selector-attr">[name ...]</span><br></code></pre></div></td></tr></table></figure><p><strong>1、简单读取</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;请您输入网站名: &quot;  <br><span class="hljs-meta">#</span><span class="bash">读取从键盘的输入</span>  <br>read website  <br>echo &quot;你输入的网站名是 $website&quot;  <br>exit 0  #退出<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577409765115.png" alt="1577409765115"></p><p><strong>3、读取文件</strong></p><p>每次调用 read 命令都会读取文件中的 “一行” 文本。当文件没有可读的行时，read 命令将以非零状态退出。</p><p>我们可以使用 cat 命令将结果直接传送给包含 read 命令的 while 命令。</p><p>测试文件 test.txt 内容如下：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">AAAAAAAAAAAAAAAAAAAAAA<br>BBBBBBBBBBBBBBBBBBBBBB<br>CCCCCCCCCCCCCCCCCCCCCC<br>DDDDDDDDDDDDDDDDDDDDDD<br>================传智播客<br></code></pre></div></td></tr></table></figure><p>脚本如下，可以将脚本放到xxx.sh中进行执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>count=1<br>cat test.txt | while read line      <br><span class="hljs-meta">#</span><span class="bash"> cat 命令的输出作为<span class="hljs-built_in">read</span>命令的输入,<span class="hljs-built_in">read</span>读到&gt;的值放在line中</span><br>do<br>   echo &quot;Line $count:$line&quot;<br>   count=$[ $count + 1 ]          # 注意中括号中的空格。<br>done<br>echo &quot;finish&quot;<br>exit 0<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577410272633.png" alt="1577410272633"></p><blockquote><p>总结</p><p>由此可看read命令不仅可以读取键盘输入，而且还可以读取静态文件</p></blockquote><h2 id="1-8-总结"><a href="#1-8-总结" class="headerlink" title="1.8 总结"></a>1.8 总结</h2><p>文件命令是我们在开发过程中最经常使用的到的命令，所以，我们在学习过程中一定要认真学习文件的常用命令，比如文件创建、编写、读取命令。</p><h1 id="2-Linux备份压缩"><a href="#2-Linux备份压缩" class="headerlink" title="2 Linux备份压缩"></a>2 Linux备份压缩</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">在Windows中我们对于一个大文件进行压缩的时候，通常会使用第三方工具，比如360压缩、快压等工具，把一个文件压缩成<span class="hljs-string">.zip</span>格式的压缩文件；而在Linux中我们也可以通过各种命令实现压缩的功能。<br></code></pre></div></td></tr></table></figure><h2 id="2-1-gzip命令"><a href="#2-1-gzip命令" class="headerlink" title="2.1 gzip命令"></a><strong>2.1 gzip命令</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">压缩/解压缩文件，不能压缩目录<br>windows下接触的压缩文件大多是<span class="hljs-string">.rar</span>，<span class="hljs-string">.7z</span>格式，Linux下，不能识别这种格式。<br><span class="hljs-string">.zip</span>格式的文件在Windows和Linux下都能使用。<br>压缩文件，能节省磁盘空间，传输时能节省网络带宽<br></code></pre></div></td></tr></table></figure><p>gzip命令用于压缩文件。</p><p>gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gzip[参数][文件或者目录]<br></code></pre></div></td></tr></table></figure><p><strong>1、压缩目录下的所有文件</strong></p><p>数据准备，新建一个目录，里面随便新建4个文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir  gzipTest<br>cd gzipTest/<br>touch  001<br>touch  002<br>touch  003<br>touch  004<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576736152636.png" alt="1576736152636"></p><p><strong>1、压缩目录下的所有文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gzip * <br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576736179025.png" alt="1576736179025"></p><p><strong>2、 列出详细的信息</strong></p><p>解压文件并列出详细信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gzip -dv *<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576736286406.png" alt="1576736286406"></p><h2 id="2-2-gunzip命令"><a href="#2-2-gunzip命令" class="headerlink" title="2.2 gunzip命令"></a>2.2 gunzip命令</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件<br></code></pre></div></td></tr></table></figure><p>gunzip命令用于解压文件。</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">gunzip<span class="hljs-selector-attr">[参数]</span><span class="hljs-selector-attr">[文件或者目录]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gunzip 001.gz <br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576738711718.png" alt="1576738711718"></p><p>001为解压后的文件</p><h2 id="2-3-tar命令"><a href="#2-3-tar命令" class="headerlink" title="2.3 tar命令"></a>2.3 tar命令</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">tar的主要功能是打包、压缩和解压文件。<br><br>tar本身不具有压缩功能。他是调用压缩功能实现的 。<br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar[必要参数][选择参数][文件] <br></code></pre></div></td></tr></table></figure><p><strong>1、将 txtfile.txt文件打包（仅打包，不压缩）</strong></p><p>txtfile.txt文件为上面章节的例子</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -cvf txt.tar txtfile.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576726937758.png" alt="1576726937758"></p><p> <strong>2、将 txtfile.txt文件打包压缩（打包压缩（gzip））</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zcvf txt.tar.gz txtfile.txt <br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576727107465.png" alt="1576727107465"></p><blockquote><p> 总结</p><p>参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar包</p></blockquote><p><strong>3、查看tar中有哪些文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -ztvf txt.tar.gz<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576734505587.png" alt="1576734505587"></p><p>压缩包中的文件有txtfile.txt</p><p><strong>4、将tar 包解压缩</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1.新建目录<br> mkdir ysFiles<br>2.复制<br> cp txt.tar.gz ./ysFiles/<br>3.解压缩<br> tar -zxvf /home/itcast/ysFiles/txt.tar.gz<br></code></pre></div></td></tr></table></figure><p>解压后的文件如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576735062585.png" alt="1576735062585"></p><h2 id="2-4-zip命令"><a href="#2-4-zip命令" class="headerlink" title="2.4 zip命令"></a>2.4 zip命令</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">引子<br><span class="hljs-built_in">zip</span>命令就完全的相当于在Windows下面选中文件右键进行压缩了<br></code></pre></div></td></tr></table></figure><p>zip命令用于压缩文件。</p><p>zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">zip<span class="hljs-selector-attr">[必要参数]</span><span class="hljs-selector-attr">[选择参数]</span><span class="hljs-selector-attr">[文件]</span> <br></code></pre></div></td></tr></table></figure><p>将上面/home/itcast/gzipTest 这个目录下所有文件和文件夹打包为当前目录下的 zFiles.zip：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1.在目录下新建一个005目录<br>mkdir 005<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576736751949.png" alt="1576736751949"></p><p>开始压缩</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">2.压缩<br>zip -q -r zFiles.zip *<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576736844251.png" alt="1576736844251">zFiles.zip文件就是我们刚刚压缩后的文件</p><h2 id="2-5-unzip命令"><a href="#2-5-unzip命令" class="headerlink" title="2.5 unzip命令"></a>2.5 unzip命令</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子<br>unzip命令就完全的相当于在Windows下面选中文件右键进行解压缩了<br></code></pre></div></td></tr></table></figure><p>Linux unzip命令用于解压缩zip文件</p><p>unzip为.zip压缩文件的解压缩程序</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">unzip<span class="hljs-selector-attr">[必要参数]</span><span class="hljs-selector-attr">[选择参数]</span><span class="hljs-selector-attr">[文件]</span> <br></code></pre></div></td></tr></table></figure><p><strong>参数</strong>：</p><p>上接上面的zip的例子</p><p><strong>1、查看压缩文件中包含的文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">unzip -l zFiles.zip<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576737168412.png" alt="1576737168412"></p><p>包含了压缩文件里面文件的详细信息</p><p>文件大小  日期 时间  文件名称</p><p>总数量和总大小</p><p><strong>2、如果要把文件解压到指定的目录下，需要用到-d参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1.新建目录<br>unFiles<br>2.解压缩<br>unzip -d ./unFiles zFiles.zip<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576737722160.png" alt="1576737722160"></p><p> 查看解压后的文件，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576737744650.png" alt="1576737744650"></p><h2 id="2-6-bzip2命令"><a href="#2-6-bzip2命令" class="headerlink" title="2.6 bzip2命令"></a>2.6 bzip2命令</h2><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">引子<br><span class="hljs-string">&quot;.bz2&quot;</span>格式是 Linux 的另一种压缩格式，从理论上来讲，<span class="hljs-string">&quot;.bz2&quot;</span>格式的算法更先进、压缩比更好；而 咱们上面学到的<span class="hljs-string">&quot;.gz&quot;</span>格式相对来讲时间更快<br>在使用过程中可以根据需求自由选择<br></code></pre></div></td></tr></table></figure><p>bzip2命令是.bz2文件的压缩程序。</p><p>bzip2采用新的压缩演算法，压缩效果比传统的LZ77/LZ78压缩演算法来得好。若没有加上任何参数，bzip2压缩完文件后会产生.bz2的压缩文件，并删除原始的文件。    </p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">bzip2 <span class="hljs-selector-attr">[-cdfhkLstvVz]</span><span class="hljs-selector-attr">[--repetitive-best]</span><span class="hljs-selector-attr">[--repetitive-fast]</span><span class="hljs-selector-attr">[- 压缩等级]</span><span class="hljs-selector-attr">[要压缩的文件]</span><br></code></pre></div></td></tr></table></figure><p><strong>1、压缩文件</strong></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-number">1</span>.创建目录<br> <span class="hljs-built_in">mkdir</span>  bzFiles<br> <span class="hljs-keyword">cd</span> ./bzFiles/<br><span class="hljs-number">2</span>.创建文件<br>touch <span class="hljs-number">001</span><br><span class="hljs-number">3</span>.压缩<br>bzip2 <span class="hljs-number">001</span><br><span class="hljs-keyword">ll</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576742060052.png" alt="1576742060052"></p><p>如上图001.bz2就是压缩后的文件</p><h2 id="2-7-bunzip2命令"><a href="#2-7-bunzip2命令" class="headerlink" title="2.7 bunzip2命令"></a><strong>2.7 bunzip2命令</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">引子<br>Linux bunzip2命令是<span class="hljs-string">.bz2</span>文件的解压缩程序。<br></code></pre></div></td></tr></table></figure><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">bunzip2 [-fkLsvV][.bz2压缩文件]<br></code></pre></div></td></tr></table></figure><p><strong>参数</strong>：</p><p><strong>解压.bz2文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">bunzip2 -v 001.bz2 <br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576744907366.png" alt="1576744907366"></p><p>001文件即是被解压后的</p><h2 id="2-8-总结"><a href="#2-8-总结" class="headerlink" title="2.8 总结"></a>2.8 总结</h2><p>gz：由gzip压缩工具压缩的文件。</p><p>.bz2：由bzip2压缩工具压缩的文件。</p><p>.tar：由tar打包程序打包的文件（tar没有压缩功能，只是把一个 目录合并成一个文件）</p><p>.tar.gz：可理解为先由tar打包，再由gz压缩。</p><p>.zip:可理解为由zip压缩工具直接压缩</p><h1 id="3-网络与磁盘管理"><a href="#3-网络与磁盘管理" class="headerlink" title="3 网络与磁盘管理"></a>3 网络与磁盘管理</h1><blockquote><p>Tips:</p><p>重点讲解内容</p></blockquote><h2 id="3-1-网络命令"><a href="#3-1-网络命令" class="headerlink" title="3.1 网络命令"></a><strong>3.1 网络命令</strong></h2><h3 id="3-1-1-ifconfig命令"><a href="#3-1-1-ifconfig命令" class="headerlink" title="3.1.1 ifconfig命令"></a>3.1.1 ifconfig命令</h3><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">引子：<br><br>ifconfig命令有点类似于Windows的<span class="hljs-built_in">ipconfig</span>命令<br></code></pre></div></td></tr></table></figure><p>ifconfig是Linux中用于显示或配置网络设备的命令，英文全称是network interfaces configuring</p><p> ifconfig命令用于显示或设置网络设备。</p><p>ifconfig可设置网络设备的状态，或是显示目前的设置。</p><p><strong>使用者权限：所有（设置级别的需要管理员）用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">ifconfig <span class="hljs-selector-attr">[网络设备]</span><span class="hljs-selector-attr">[down up -allmulti -arp -promisc]</span><span class="hljs-selector-attr">[add&lt;地址&gt;]</span><span class="hljs-selector-attr">[del&lt;地址&gt;]</span><span class="hljs-selector-attr">[&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;]</span><span class="hljs-selector-attr">[io_addr&lt;I/O地址&gt;]</span><span class="hljs-selector-attr">[irq&lt;IRQ地址&gt;]</span><span class="hljs-selector-attr">[media&lt;网络媒介类型&gt;]</span><span class="hljs-selector-attr">[mem_start&lt;内存地址&gt;]</span><span class="hljs-selector-attr">[metric&lt;数目&gt;]</span><span class="hljs-selector-attr">[mtu&lt;字节&gt;]</span><span class="hljs-selector-attr">[netmask&lt;子网掩码&gt;]</span><span class="hljs-selector-attr">[tunnel&lt;地址&gt;]</span><span class="hljs-selector-attr">[-broadcast&lt;地址&gt;]</span><span class="hljs-selector-attr">[-pointopoint&lt;地址&gt;]</span><span class="hljs-selector-attr">[IP地址]</span><br></code></pre></div></td></tr></table></figure><p><strong>1、显示激活的网卡信息</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576749039798.png" alt="1576749039798"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576749055869.png" alt="1576749055869"></p><p><strong>ens33（有的是eth0）</strong>表示第一块网卡。</p><p>表示ens33网卡的 IP地址是 192.168.23.129，广播地址，broadcast 192.168.23.255，掩码地址netmask:255.255.255.0 ，inet6对应的是ipv6</p><p><strong>ens37</strong> 表示第二块网卡</p><p><strong>lo</strong> 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口 </p><p>启动关闭指定网卡</p><p><strong>virbr0</strong>是一种虚拟网络接口</p><p><strong>2、关闭网卡（需要切换到管理员账户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig ens37 down<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576748850255.png" alt="1576748850255"></p><p><strong>3、启用网卡（需要切换到管理员账户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ifconfig ens37 up<br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576748937884.png" alt="1576748937884"></p><p><strong>4、配置ip信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">// 配置ip地址<br>ifconfig ens37 192.168.23.199<br>// 配置ip地址和子网掩码<br>ifconfig ens37 192.168.23.133 netmask 255.255.255.0<br></code></pre></div></td></tr></table></figure><p>执行效果如下，配置ip地址：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576749864267.png" alt="1576749864267"></p><p>查看ip，如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576749896757.png" alt="1576749896757"></p><p>配置ip地址和子网掩码，执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576749957171.png" alt="1576749957171"></p><p>这样的话我们就可以通过命令的方式设置网卡的网络信息了。</p><h3 id="3-1-2-ping命令"><a href="#3-1-2-ping命令" class="headerlink" title="3.1.2 ping命令"></a>3.1.2 ping命令</h3><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">等价于Windows的<span class="hljs-built_in">ping</span>命令<br></code></pre></div></td></tr></table></figure><p>ping命令用于检测主机。</p><p>执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ping [-dfnqrRv][-c&lt;完成次数&gt;][-i&lt;间隔秒数&gt;][-I&lt;网络界面&gt;][-l&lt;前置载入&gt;][-p&lt;范本样式&gt;][-s&lt;数据包大小&gt;][-t&lt;存活数值&gt;][主机名称或IP地址]<br></code></pre></div></td></tr></table></figure><p><strong>1、检测是否与主机连通</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ping www.baidu.com<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576750258293.png" alt="1576750258293">    </p><p>icmp_seq：ping序列，从1开始</p><p>ttl:IP生存时间值</p><p>time: 响应时间,数值越小，联通速度越快</p><p><strong>2、指定接收包的次数</strong></p><p>和上面不同的是：收到两次包后，自动退出</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ping -c 2 www.baidu.com<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576750967595.png" alt="1576750967595"></p><blockquote><p>总结：</p><p>ping命令也是我们在开发过程中常用到的命令</p><p>通常使用  ping  xxx.xxx.xxx.xxx命令进行检测本地与目标机器是否连通</p></blockquote><h3 id="3-1-3-netstat命令"><a href="#3-1-3-netstat命令" class="headerlink" title="3.1.3 netstat命令"></a>3.1.3 netstat命令</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">利用netstat指令可让你得知整个Linux系统的网络情况<br></code></pre></div></td></tr></table></figure><p>netstat命令用于显示网络状态。</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">netstat <span class="hljs-selector-attr">[-acCeFghilMnNoprstuvVwx]</span><span class="hljs-selector-attr">[-A&lt;网络类型&gt;]</span><span class="hljs-selector-attr">[--ip]</span><br></code></pre></div></td></tr></table></figure><p><strong>1、显示详细的连接状况</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netstat -a<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576751379320.png" alt="1576751379320"></p><p>比如上面的【0 0.0.0.0:ssh】它是远程终端连接Linux的ssh服务，默认使用了22端口，它的状态【State】是处于监听状态，属于正常。</p><p><strong>2、显示网卡列表</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netstat -i<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576751502980.png" alt="1576751502980"></p><p>上图显示的是我们在介绍【ifconfig】命令的时候看到的网卡信息</p><h2 id="3-2-磁盘命令"><a href="#3-2-磁盘命令" class="headerlink" title="3.2 磁盘命令"></a>3.2 磁盘命令</h2><h3 id="3-2-1-lsblk命令"><a href="#3-2-1-lsblk命令" class="headerlink" title="3.2.1 lsblk命令"></a><strong>3.2.1 lsblk命令</strong></h3><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">使用lsblk命令可以以<span class="hljs-built_in">tree</span>的形式展示所有设备的信息<br></code></pre></div></td></tr></table></figure><p>lsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。</p><p><strong>语法格式：</strong>lsblk [参数]</p><p><strong>使用者权限：所有用户</strong></p><p><strong>1、lsblk命令默认情况下将以树状列出所有块设备：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576827840642.png" alt="1576827840642"></p><p>NAME : 这是块设备名。</p><p>MAJ:MIN : 本栏显示主要和次要设备号。</p><p>RM : 本栏显示设备是否可移动设备。注意，在上面设备sr0的RM值等于1，这说明他们是可移动设备。</p><p>SIZE : 本栏列出设备的容量大小信息。</p><p>RO : 该项表明设备是否为只读。在本案例中，所有设备的RO值为0，表明他们不是只读的。</p><p>TYPE :本栏显示块设备是否是磁盘或磁盘上的一个分区。在本例中，sda和sdb是磁盘，而sr0是只读存储（rom）。</p><p>MOUNTPOINT : 本栏指出设备挂载的挂载点。</p><p><strong>2、默认选项不会列出所有空设备：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk -f<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576828112552.png" alt="1576828112552"></p><p>NAME表示设备名称</p><p>FSTYPE表示文件类型</p><p>LABEL表示设备标签</p><p>UUID设备编号</p><p>MOUNTPOINT表示设备的挂载点</p><blockquote><p>注意</p><p>我们学习这个命令主要是在下面将要学习的fdisk分区中会经常使用到</p></blockquote><h3 id="3-2-2-df命令"><a href="#3-2-2-df命令" class="headerlink" title="3.2.2 df命令"></a>3.2.2 df命令</h3><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">引子（如下图）：</span><br><span class="hljs-comment">Linux的df命令类似于在Windows中的【计算机】</span>--<span class="hljs-comment">【管理】</span>--<span class="hljs-comment">【磁盘管理】菜单对磁盘的统计情况查看</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576751996364.png" alt="1576751996364"></p><p> df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p><p><strong>使用者权限：所有用户</strong></p><p><strong>语法</strong></p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">df [选项]... [<span class="hljs-symbol">FILE</span>]...<br></code></pre></div></td></tr></table></figure><p><strong>1、显示磁盘使用情况统计情况</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">df</span>  <br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576752158168.png" alt="1576752158168"></p><p>第一列指定文件系统的名称</p><p>第二列指定一个特定的文件系统1K-块1K是1024字节为单位的总容量。</p><p>已用和可用列分别指定的容量。</p><p>最后一个已用列指定使用的容量的百分比</p><p>最后一栏指定的文件系统的挂载点。</p><p><strong>2、df命令也可以显示磁盘使用的文件系统信息</strong></p><p>比如我们df下之前创建过的目录gzipTest的使用情况</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">df</span>  gzipTest/<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576752596414.png" alt="1576752596414"></p><p><strong>3、df显示所有的信息</strong></p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">df <span class="hljs-comment">--total </span><br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576752719226.png" alt="1576752719226"></p><p>我们看到输出的末尾，包含一个额外的行，显示总的每一列。</p><p> 4、df换算后显示</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">df -h <br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576752819456.png" alt="1576752819456"></p><p>我们可以看到输出显示的数字形式的’G’（千兆字节），”M”（兆字节）和”K”（千字节）。</p><p>这使输出容易阅读和理解，从而使显示可读的。请注意，第二列的名称也发生了变化，为了使显示可读的”容量”。</p><h3 id="3-2-3-mount命令"><a href="#3-2-3-mount命令" class="headerlink" title="3.2.3 mount命令"></a>3.2.3 mount命令</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">在Linux当中所有的存储设备如u盘、光盘、硬盘等，都必须挂载之后才能正常使用。<br><br>其实挂载可以理解为Windows当中的分配盘符（重要），只不过windows当中是以英文字母ABCD等作为盘符，而linux是拿系统目录作为盘符，当然linux当中也不叫盘符，而是称为挂载点，而把为分区或者光盘等存储设备分配一个挂载点的过程称为挂载<br></code></pre></div></td></tr></table></figure><p> mount命令是经常会使用到的命令，它用于挂载Linux系统外的文件。</p><p><strong>挂载概念</strong></p><p>在安装linux系统时设立的各个分区，如根分区、/boot分区等都是自动挂载的，也就是说不需要我们人为操作，开机就会自动挂载。但是光盘、u盘等存储设备如果需要使用，就必须人为的进行挂载。</p><p>其实我们在windows下插入U盘也是需要挂载(分配盘符)的，只不过windows下分配盘符是自动的</p><p>Linux中的根目录以外的文件要想被访问，需要将其“关联”到根目录下的某个目录来实现，这种关联操作就是“挂载”，这个目录就是“挂载点”，解除次关联关系的过程称之为“卸载”。</p><p><strong>注意：“挂载点”的目录需要以下几个要求：</strong></p><p>（1）目录事先存在，可以用mkdir命令新建目录；</p><p>（2）挂载点目录不可被其他进程使用到；</p><p>（3）挂载点下原有文件将被隐藏。</p><p><strong>使用者权限：所有用户，设置级别的需要管理员</strong></p><p><strong>语法</strong></p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">mount <span class="hljs-comment">[-hV]</span><br>mount -a <span class="hljs-comment">[-fFnrsvw]</span> <span class="hljs-comment">[-t vfstype]</span><br>mount <span class="hljs-comment">[-fnrsvw]</span> <span class="hljs-comment">[-o options <span class="hljs-comment">[,...]</span>]</span> device | dir<br>mount <span class="hljs-comment">[-fnrsvw]</span> <span class="hljs-comment">[-t vfstype]</span> <span class="hljs-comment">[-o options]</span> device dir<br></code></pre></div></td></tr></table></figure><p>需求:<br>比如现在我们要通过挂载的方式查看Linux CD/DVD光驱里面的内容</p><p><strong>1、CD/DVD设置</strong></p><p>进入【虚拟机】–【设置】</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576805605263.png" alt="1576805605263"></p><p>设置CD/DVD的内容，我们这里使用的是F:\CentOS-7-x86_64-DVD-1810.iso</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576805634085.png" alt="1576805634085"></p><p>查看F:\CentOS-7-x86_64-DVD-1810.iso；里面的内容</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576805690039.png" alt="1576805690039"></p><p><strong>2、创建挂载点</strong></p><p>注意：一般用户无法挂载cdrom,只有root用户才可以操作</p><p>我们切换到root下创建一个挂载点（其实就是创建一个目录）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir  -p mnt/cdrom<br></code></pre></div></td></tr></table></figure><p><strong>3、开始挂载</strong></p><p>通过挂载点的方式查看上面的【ISO文件内容】</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount -t auto /dev/cdrom /mnt/cdrom<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576807195774.png" alt="1576807195774"></p><p>表示挂载成功</p><p><strong>4、查看挂载点内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l -a ./mnt/cdrom/<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576807395970.png" alt="1576807395970"></p><p>如上图所示，我们通过挂载点查看CD/DVD的文件个数是14个，和上面的【ISO文件内容】个数一致。</p><p><strong>5、卸载cdrom</strong></p><p>在前面我们将CD/DVD挂载到了文件系统，如果我们不用了，就可以将其卸载掉</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">umount .<span class="hljs-regexp">/mnt/</span>cdrom/<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576807774194.png" alt="1576807774194"></p><p>我们发现卸载后，通过挂载点就无法查看CD/DVD里面的数据了。</p><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h2><p>关于挂载：用户<strong>不能</strong>直接访问 硬件设备需要将硬件设备 <strong>挂载</strong> 到 系统目录上,  才可以让用户访问。</p><h1 id="4-shell与安装"><a href="#4-shell与安装" class="headerlink" title="4 shell与安装"></a>4 shell与安装</h1><blockquote><p>tips</p><p>重点讲解内容</p></blockquote><h2 id="4-1-yum使用"><a href="#4-1-yum使用" class="headerlink" title="4.1 yum使用"></a>4.1 yum使用</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">引子：<br>yum类似于开发工具idea、eclipse中的在线插件安装商店<br>我们输入一个将要安装的插件名字，进行搜索、安装的过程。<br></code></pre></div></td></tr></table></figure><p><strong>yum概念</strong></p><p>yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。</p><p>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><p><strong>yum原理</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576833281476.png" alt="1576833281476"></p><blockquote><p><strong>注意：必须联网</strong></p><p>不同的服务通过yum命令连接远程yum源进行查找、下载、安装</p></blockquote><p><strong>使用者权限：管理员</strong></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum [options] [command] [package ...]<br></code></pre></div></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>操作的对象。</li></ul><hr><p><strong>yum常用命令</strong></p><ul><li>1.列出所有可更新的软件清单命令：yum check-update</li><li>2.更新所有软件命令：yum update</li><li>3.仅安装指定的软件命令：yum install <package_name></li><li>4.仅更新指定的软件命令：yum update <package_name></li><li>5.列出所有可安裝的软件清单命令：yum list</li><li>6.删除软件包命令：yum remove <package_name></li><li>7.查找软件包 命令：yum search <keyword></li><li>8.清除缓存命令:<ul><li>yum clean packages: 清除缓存目录下的软件包</li><li>yum clean headers: 清除缓存目录下的 headers</li><li>yum clean oldheaders: 清除缓存目录下旧的 headers</li><li>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的headers</li></ul></li></ul><h3 id="4-1-1-安装tree"><a href="#4-1-1-安装tree" class="headerlink" title="4.1.1 安装tree"></a><strong>4.1.1 安装tree</strong></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum -y install tree   //y当安装过程提示选择全部为&quot;yes&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p>注意：第一次在itcast用户执行的时候</p><p>提示我们【需要管理员权限】</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576554600128.png" alt="1576554600128"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576554617660.png" alt="1576554617660"></p><p>安装完执行tree命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tree<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576832663328.png" alt="1576832663328"></p><h3 id="4-1-2-移除tree"><a href="#4-1-2-移除tree" class="headerlink" title="4.1.2 移除tree"></a><strong>4.1.2 移除tree</strong></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum remove  tree<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576832810922.png" alt="1576832810922"></p><p>此时，我们在执行tree命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tree<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576832843434.png" alt="1576832843434"></p><p>如上图，由于我们移除了tree，在执行tree命令的时候发现找不到这个命令了。</p><h3 id="4-1-3-yum查找"><a href="#4-1-3-yum查找" class="headerlink" title="4.1.3 yum查找"></a><strong>4.1.3 yum查找</strong></h3><p>利用 yum 的功能，找出以 tom 为开头的软件名称有哪些</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum list tom*<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576832953119.png" alt="1576832953119"></p><h3 id="4-1-4-yum源"><a href="#4-1-4-yum源" class="headerlink" title="4.1.4 yum源"></a>4.1.4 yum源</h3><p><strong>概述</strong></p><p>yum需要一个yum库，也就是yum源。</p><p>简单的说，我们安装软件的时候需要下载软件，将很多软件放在一起就是源。软件安装包的来源，所以yum源就是软件安装包来源 </p><p><strong>yum源分类</strong></p><p>目前，yum默认使用的是CentOS的yum源，如下</p><p>  <img src="https://gitee.com/wxqgm/pic/raw/master/img/1576834523252.png" alt="1576834523252"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576834556997.png" alt="1576834556997"></p><p>目前，国内有很多不错的yum源，比如阿里、网易、搜狐等</p><p><strong>安装阿里yum源</strong></p><p>因为默认的yum源服务器在国外，我们在安装软件的时候会受到速度的影响，所以安装国内yum源在下载的时候速度、稳定性会比国外的好很多。</p><p><strong>1) 安装wget</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install -y wget<br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576834799803.png" alt="1576834799803"></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576834824250.png" alt="1576834824250"></p><p>安装成功。</p><p><strong>2) 备份/etc/yum.repos.d/CentOS-Base.repo文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /etc/yum.repos.d/<br>mv CentOS-Base.repo CentOS-Base.repo.back<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576834936907.png" alt="1576834936907"></p><p><strong>3) 下载阿里云的Centos-7.repo文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></div></td></tr></table></figure><blockquote><p>注意</p><p>上面的url中要卸载Centos-7.repo；而不是Centos-6.repo</p></blockquote><p> 执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576837935001.png" alt="1576837935001"></p><p>查看下载的阿里云的Centos-6.repo文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat CentOS-Base.repo<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash"> CentOS-Base.repo</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="hljs-meta">#</span><span class="bash"> update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-meta">#</span><span class="bash"> geographically close to the client.  You should use this <span class="hljs-keyword">for</span> CentOS updates</span><br><span class="hljs-meta">#</span><span class="bash"> unless you are manually picking other mirrors.</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span></span> <br><span class="hljs-meta">#</span><span class="bash"> remarked out baseurl= line instead.</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment">#</span></span><br> <br>[base]<br>name=CentOS-$releasever - Base - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/<br>gpgcheck=1<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br> <br><span class="hljs-meta">#</span><span class="bash">released updates</span> <br>[updates]<br>name=CentOS-$releasever - Updates - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/<br>gpgcheck=1<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br> <br><span class="hljs-meta">#</span><span class="bash">additional packages that may be useful</span><br>[extras]<br>name=CentOS-$releasever - Extras - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/<br>gpgcheck=1<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br> <br><span class="hljs-meta">#</span><span class="bash">additional packages that extend functionality of existing packages</span><br>[centosplus]<br>name=CentOS-$releasever - Plus - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br> <br><span class="hljs-meta">#</span><span class="bash">contrib - packages by Centos Users</span><br>[contrib]<br>name=CentOS-$releasever - Contrib - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/contrib/$basearch/<br>gpgcheck=1<br>enabled=0<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br></code></pre></div></td></tr></table></figure><p>如上面的命令，之前是【CentOS】，现在是【aliyun】</p><p><strong>4) 重新加载yum</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum clean all<br></code></pre></div></td></tr></table></figure><p>清理之前（CentOS）的缓存</p><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576838137800.png" alt="1576838137800"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum makecache<br></code></pre></div></td></tr></table></figure><p>就是把服务器的包信息下载到本地电脑缓存起来，makecache建立一个缓存，以后用install时就在缓存中搜索，提高了速度。</p><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576838150825.png" alt="1576838150825"></p><p>如上图，元数据缓存已建立,缓存成功。</p><p><strong>5、验证yum源使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum search tomcat<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576836672011.png" alt="1576836672011"></p><p>如上图所示，我们发现，现在查找软件信息使用了上面的yum缓存。</p><p>Loading mirror speeds from cached hostfile(从缓存的主机文件加载镜像速度)</p><ul><li>base: mirrors.aliyun.com</li><li>extras: mirrors.aliyun.com</li><li>updates: mirrors.aliyun.com</li></ul><blockquote><p>总结</p><p>yum -y install 软件包</p><p>卸载软件<br>yum -y remove 软件包</p><p>查找软件</p><p>yum list *</p><p>yum源</p><p>版本:</p><p>比如我们使用的是CentOS7，在下载CentOS-Base.repo的时候要注意它的版本。</p></blockquote><h2 id="4-2-rpm使用"><a href="#4-2-rpm使用" class="headerlink" title="4.2 rpm使用"></a>4.2 rpm使用</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">RPM包管理类似于windows下的“添加<span class="hljs-regexp">/删除程序”但是功能却比“添加/</span>删除程序”强大很多<br></code></pre></div></td></tr></table></figure><p><strong>1、rpm介绍</strong></p><p>rpm(redhat package manager) 原本是 Red Hat Linux 发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux 的适用度。</p><p><strong>2、rpm与yum区别</strong></p><p>rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。</p><p>语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">用法: rpm [选项...]<br></code></pre></div></td></tr></table></figure><p><strong>rpm包</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577255859260.png" alt="1577255859260"></p><blockquote><p>注意：</p><p>以上为扩展名为.rpm的包</p><p>可以理解成是Windows中的.exe文件</p></blockquote><p><strong>安装rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -ivh 软件全包名<br></code></pre></div></td></tr></table></figure><p><strong>卸载rpm软件包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -e 软件全包名      <br></code></pre></div></td></tr></table></figure><p><strong>列出所有安装过的包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa<br></code></pre></div></td></tr></table></figure><p><strong>查询软件包信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qi 软件全包名<br></code></pre></div></td></tr></table></figure><p><strong>查看文件安装位置</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -ql 软件全包名<br></code></pre></div></td></tr></table></figure><h2 id="4-3-shell使用"><a href="#4-3-shell使用" class="headerlink" title="4.3 shell使用"></a>4.3 shell使用</h2><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">shell</span>脚本类似于我们在Windows中编写的批处理文件，它的扩展名是.bat，比如我们启动Tomcat（后面的课程我们会详细讲解）的时候经常启动的startup.bat，就是Windows下的批处理文件。<br>而在Linux中，<span class="hljs-keyword">shell</span>脚本编写的文件是以.<span class="hljs-keyword">sh</span>结尾的。比如Tomcat下我们经常使用startup.<span class="hljs-keyword">sh</span>来启动我们的Tomcat，这个startup.<span class="hljs-keyword">sh</span>文件就是<span class="hljs-keyword">shell</span>编写的。<br></code></pre></div></td></tr></table></figure><h3 id="4-3-1-shell入门"><a href="#4-3-1-shell入门" class="headerlink" title="4.3.1 shell入门"></a>4.3.1 shell入门</h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">通过简单的学习，我们编写一个简单的入门<span class="hljs-keyword">shell</span>程序。<br>我们通过前面学习的<span class="hljs-keyword">echo</span>命令，在<span class="hljs-keyword">shell</span>脚本中打印出一句话。<br></code></pre></div></td></tr></table></figure><p><strong>1) 什么是shell</strong></p><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p><a href="https://www.leiue.com/tags/shell">Shell</a> <a href="https://www.leiue.com/tags/%E8%84%9A%E6%9C%AC">脚本</a>（<a href="https://www.leiue.com/tags/shell-script">Shell Script</a>）又称 Shell 命令稿、程序化脚本，是一种计算机程序使用的文本文件，内容由一连串的 shell 命令组成，经由 Unix Shell 直译其内容后运作</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576838959401.png" alt="1576838959401"></p><p>Shell 被当成是一种脚本语言来设计，其运作方式与解释型语言相当，由 Unix shell 扮演命令行解释器的角色，在读取 shell 脚本之后，依序运行其中的 shell 命令，之后输出结果。利用 shell 脚本可以进行系统管理，文件操作等。</p><p>在 Unix 及所有的系统中，如 Linux、FreeBSD 等操作系统，都存在 shell 脚本。依照 Unix shell 的各种不同类型，shell 脚本也有各种不同方言。在 DOS、OS/2、Microsoft Windows 中的批处理文件，跟 shell 脚本有类似的功能。</p><p><strong>2) shell环境</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">java需要虚拟机解释器, 同理 <span class="hljs-keyword">shell</span><span class="bash">脚本也需要解释器</span><br></code></pre></div></td></tr></table></figure><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p><strong>查看解释器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /etc/shells<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577068054836.png" alt="1577068054836"></p><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li><p>Bourne Shell（/usr/bin/sh或/bin/sh）</p></li><li><p>Bourne Again Shell（/bin/bash）</p></li><li><p>C Shell（/usr/bin/csh）</p></li><li><p>K Shell（/usr/bin/ksh）</p></li><li><p>Shell for Root（/sbin/sh）</p></li><li><p>等等……</p></li></ul><p>我们当前课程使用的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell</p><p><strong>3) 编写第一个shell</strong></p><p>现在，我们打开文本编辑器(我们也可以使用 vi/vim 命令来创建文件)，新建一个文件 czbk.sh，扩展名为 sh（sh代表shell）：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash  --- 指定脚本解释器</span><br>echo &quot;你好，传智播客 !&quot;<br></code></pre></div></td></tr></table></figure><p>//写shell的习惯 第一行指定解释器</p><p>//文件是sh为后缀名</p><p>//括号成对书写</p><p>//注释的时候尽量不用中文注释。不友好。</p><p>//[] 括号两端要要有空格。  [ neirong ]</p><p>//习惯代码索引，增加阅读性</p><p>//写语句的时候，尽量写全了，比如if。。。</p><p>1、创建sh文件**</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim czbk.sh<br></code></pre></div></td></tr></table></figure><p><strong>2、编写并保存</strong></p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576839380199.png" alt="1576839380199"></p><p><strong>3、查看czbk.sh文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576839550390.png" alt="1576839550390"></p><p>如上图，我们发现刚刚编写的czbk.sh文件的的权限是【-rw-rw-r–】，通过我们之前学过的知识，我们发现这个文件并没有执行的权限</p><p>我们需要将czbk.sh文件设置下它的执行权限【x】，如果不设置有执行权限，当前的文件不具备文件执行的能力。</p><p><strong>通过chmod设置执行权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod +x ./czbk.sh<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576839765609.png" alt="1576839765609"></p><p>我们发现，czbk.sh拥有了【x】执行权限</p><p>下面，我们就开始执行czbk.sh</p><p><strong>4、执行czbk.sh文件</strong> — bash a.sh0</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./czbk.sh <br></code></pre></div></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1576839880567.png" alt="1576839880567"></p><p>如上图，我们刚刚编写的shell在执行的时候正常打印出来了，说明czbk.sh具备执行的能力</p><blockquote><p>注意：</p><p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p><p>echo 命令用于向窗口输出文本。</p></blockquote><h3 id="4-3-2-shell注释"><a href="#4-3-2-shell注释" class="headerlink" title="4.3.2 shell注释"></a>4.3.2 shell注释</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">引子：<br>在Java SE课程中，我们也学习了注释<br>比如单行注释我们使用双斜杠<span class="hljs-regexp">//</span><br>   多行注释我们使用/**开头表示注释多行<br>而在shell编程中，我们同样也要有注释，注释掉程序中不用的脚本<br></code></pre></div></td></tr></table></figure><p><strong>1、单行注释</strong></p><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">--------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> 这是一个注释</span><br><span class="hljs-meta">#</span><span class="bash">--------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#### 开始 #####</span></span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta">#</span><span class="bash"> 这里可以添加脚本描述信息</span><br><span class="hljs-meta">#</span><span class="bash"> </span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment">##### 结束  #####</span></span><br></code></pre></div></td></tr></table></figure><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，此时，我们可以通过EOF进行多行注释，如下：</p><p><strong>2、多行注释</strong></p><p>多行注释还可以使用以下格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">:&lt;&lt;EOF<br>注释内容...<br>注释内容...<br>注释内容...<br>EOF<br></code></pre></div></td></tr></table></figure><p>EOF 也可以使用其他符号:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">:&lt;&lt;&#x27;<br>注释内容...<br>注释内容...<br>注释内容...<br>&#x27;<br><br>:&lt;&lt;!<br>注释内容...<br>注释内容...<br>注释内容...<br>!<br></code></pre></div></td></tr></table></figure><blockquote><p>总结：</p><p>我们将在下面的小章节中使用注释，查看注释效果</p></blockquote><h3 id="4-3-3-shell变量"><a href="#4-3-3-shell变量" class="headerlink" title="4.3.3 shell变量"></a>4.3.3 shell变量</h3><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">引子：<br>这里的变量我们可以理解为我们在Java <span class="hljs-keyword">SE</span>阶段定义的变量，比如在<span class="hljs-keyword">SE</span>中我定义一个字符串类型的变量使用String stringStr=<span class="hljs-string">&quot;&quot;</span>;<br><br>注意：下面的演示我们还是继续沿用<span class="hljs-keyword">test</span>-<span class="hljs-keyword">shell</span>.<span class="hljs-keyword">sh</span>进行测试<br></code></pre></div></td></tr></table></figure><p><strong>1、定义变量:</strong></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">variable_name</span>=<span class="hljs-string">&quot;czbk&quot;</span><br></code></pre></div></td></tr></table></figure><p>变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>有效的 Shell 变量名示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">RUNOOB<br>LD_LIBRARY_PATH<br>_var<br>var2<br></code></pre></div></td></tr></table></figure><p>无效的变量命名：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">?var=123<br>user*name=runoob<br></code></pre></div></td></tr></table></figure><hr><p><strong>2、使用变量</strong></p><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">variable_name=&quot;czbk&quot;<br>echo $variable_name<br>echo $&#123;variable_name&#125;<br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175492599.png" alt="1577175492599"></p><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;I am good at $&#123;shell-t&#125;Script&quot;<br></code></pre></div></td></tr></table></figure><p>通过上面的脚本我们发现，如果不给shell-t变量加花括号，写成echo “I am good at $shell-tScript”，解释器shell就会把$shell-tScript当成一个变量，由于我们前面没有定义shell-t变量，那么解释器执行执行的结果自然就为空了。这里我们推荐给所有变量加上花括号，这也是一个好的编程习惯。</p><p>已定义的变量，可以被重新定义，如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">your_name=&quot;tom&quot;<br>echo $your_name<br>your_name=&quot;frank&quot;<br>echo $your_name<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175655898.png" alt="1577175655898"></p><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”frank”，使用变量的时候才加$。</p><p><strong>3、只读变量</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">这里的只读变量其实有点类似于我们在java se阶段课程中定义的<span class="hljs-keyword">final</span>变量，即在程序的上下文中不允许被程序修改<br></code></pre></div></td></tr></table></figure><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>myUrl=&quot;https://www.baidu.com&quot;<br>readonly myUrl<br>myUrl=&quot;https://cn.bing.com/&quot;<br></code></pre></div></td></tr></table></figure><p> 执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175714493.png" alt="1577175714493"></p><p><strong>4、删除变量</strong></p><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> variable_name<br></code></pre></div></td></tr></table></figure><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p><strong>示例如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>myUrl=&quot;https://www.baidu.com&quot;<br>unset myUrl<br>echo $myUrl<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175804257.png" alt="1577175804257"></p><p>如上面的shell脚本，我们定义了一个myUrl变量，通过unset删除这个变量，然后通过echo进行输出，结果是就是为空，没有任何的结果输出。</p><hr><p><strong>Shell 字符串</strong></p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">字符串是<span class="hljs-keyword">shell</span>编程中最常用也是最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号，正如我们开篇提到的，在Java <span class="hljs-keyword">SE</span>中我们定义一个字符串可以通过Stirng  stringStr=“abc&quot; 双引号的形式进行定义，而在<span class="hljs-keyword">shel</span>中也是可以的。<br></code></pre></div></td></tr></table></figure><p><strong>单引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">str=&#x27;this is a string variable&#x27;<br></code></pre></div></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><p><strong>双引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">your_name=&#x27;frank&#x27;<br>str=&quot;Hello,  \&quot;$your_name\&quot;! \n&quot;<br>echo -e $str<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175850350.png" alt="1577175850350"></p><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><p><strong>拼接字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">your_name=&quot;frank&quot;<br><span class="hljs-meta">#</span><span class="bash"> 使用双引号拼接</span><br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;<br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;<br>echo $greeting  $greeting_1<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175902317.png" alt="1577175902317"></p><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">string=&quot;czbk&quot;<br>echo $&#123;#string&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果：4.表示长度为4</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175975730.png" alt="1577175975730"></p><p><strong>提取字符串</strong></p><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">string=&quot;abcdefghijklmn&quot;<br>echo $&#123;string:1:4&#125; <br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577176031872.png" alt="1577176031872"></p><p>输出为【bcde】，通过截取我们发现，它的下标和我们在java中的读取方式是一样的，下标也是从0开始。</p><h3 id="4-3-4-shell数组"><a href="#4-3-4-shell数组" class="headerlink" title="4.3.4 shell数组"></a>4.3.4 shell数组</h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">这里的数组和我们在<span class="hljs-keyword">Java </span>SE阶段的数组结果（或是性质）是一样的，只是定义的过程大同小异<br></code></pre></div></td></tr></table></figure><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p><strong>定义数组</strong></p><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">数组名=(值1 值2 ... 值n)<br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">array_name=(value0 value1 value2 value3)<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">array_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br></code></pre></div></td></tr></table></figure><p>通过下标定义数组中的其中一个元素：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></div></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><p><strong>读取数组</strong></p><p>读取数组元素值的一般格式是：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;数组名[下标]&#125;</span><br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">valuen=$&#123;array_name[n]&#125;<br></code></pre></div></td></tr></table></figure><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo $&#123;array_name[@]&#125;<br></code></pre></div></td></tr></table></figure><p><strong>获取数组的长度</strong></p><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br><span class="hljs-meta">#</span><span class="bash"> 或者</span><br>length=$&#123;#array_name[*]&#125;<br></code></pre></div></td></tr></table></figure><p>下面，我们通过一个例子，定义数组、提取数组元素的例子来验证下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br>g=(a b c d e f)<br>echo &quot;数组下标为2的数据为:&quot; $&#123;g[2]&#125;<br>echo  &quot;数组所有数据为:&quot;  $&#123;#g[@]&#125;<br>echo  &quot;数组所有数据为:&quot;   $&#123;#g[*]&#125;<br></code></pre></div></td></tr></table></figure><p>如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577067300329.png" alt="1577067300329"></p><p> 执行效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577067402285.png" alt="1577067402285"></p><h3 id="4-3-5-shell运算符"><a href="#4-3-5-shell运算符" class="headerlink" title="4.3.5 shell运算符"></a>4.3.5 shell运算符</h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">我们在前面课程中学习<span class="hljs-keyword">Java </span>SE中也学到了运算符，比如算术、关系、布尔等，而在<span class="hljs-keyword">sehll编程中同样也有运算符，虽然表达的方式不一样，但是最终的目的都是一样的，都是为了解决编程中现存问题</span><br></code></pre></div></td></tr></table></figure><p>Shell 和其他编程一样，<strong>支持</strong>包括：算术、关系、布尔、字符串等运算符。</p><p>原生 bash **不支持 **简单的数学运算，但是可以通过其他命令来实现，例如expr。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加,我们还是利用上面的例子test-shell.sh </p><p><strong>1、算数运算符</strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">val</span>=`expr 2 + 2`<br>echo <span class="hljs-string">&quot;相加之后的结果为：&quot;</span> <span class="hljs-variable">$val</span><br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577068429739.png" alt="1577068429739"></p><p>注意：</p><p><strong>表达式和运算符之间要有空格</strong>，例如 2+2 是不对的，必须写成 2 + 2。</p><p>完整的表达式要被 <strong>`</strong> 包含，注意不是单引号。</p><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><p>下面是运算符shell脚本（还是采用之前的例子test-shell.sh ）w</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">g=(a b c d e f)</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组下标为2的数据为:&quot;</span> <span class="hljs-variable">$&#123;g[2]&#125;</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;数组所有数据为:&quot;</span>  <span class="hljs-variable">$&#123;#g[@]&#125;</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;数组所有数据为:&quot;</span>   <span class="hljs-variable">$&#123;#g[*]&#125;</span></span><br>:&lt;&lt;EOF<br>val= `expr 2 + 2`<br>echo &quot;相加之后的结果为：&quot; $val<br>EOF<br><br>a=4<br>b=20<br>echo “加法运算”  `expr $a + $b`<br>echo “减法运算”  `expr $a - $b`<br>echo “乘法运算，注意*号前面需要反斜杠” ` expr $a \* $b`<br>echo “除法运算”  `expr  $b / $a`<br>((a++))<br>echo &quot;a = $a&quot;<br>c=$((a + b)) <br>d=$[a + b]<br>echo &quot;c = $c&quot;<br>echo &quot;d = $d&quot;<br></code></pre></div></td></tr></table></figure><p><strong>上面的shell命令#开头的为单行注释</strong></p><p><strong>:&lt;&lt;EOF 开头和EOF结尾的为多行注释</strong></p><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577152161538.png" alt="1577152161538"></p><p><strong>2、字符串运算符</strong></p><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否为0，不为0返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><p><strong>字符串运算符实例如下（还是采用之前的例子test-shell.sh ）：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=&quot;abc&quot;<br>b=&quot;efg&quot;<br><br>if [ $a = $b ]<br>then<br>   echo &quot;$a = $b : a 等于 b&quot;<br>else<br>   echo &quot;$a = $b: a 不等于 b&quot;<br>fi<br>if [ $a != $b ]<br>then<br>   echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>   echo &quot;$a != $b: a 等于 b&quot;<br>fi<br> <br></code></pre></div></td></tr></table></figure><p> 执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577158474734.png" alt="1577158474734"></p><p><strong>3、关系运算符</strong></p><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><p><strong>关系运算符（还是采用之前的例子test-shell.sh ）</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=10<br>b=20<br><br>if [ $a -eq $b ]<br>then<br>   echo &quot;$a -eq $b : a 等于 b&quot;<br>else<br>   echo &quot;$a -eq $b: a 不等于 b&quot;<br>fi<br>if [ $a -ne $b ]<br>then<br>   echo &quot;$a -ne $b: a 不等于 b&quot;<br>else<br>   echo &quot;$a -ne $b : a 等于 b&quot;<br>fi<br>if [ $a -gt $b ]<br>then<br>   echo &quot;$a -gt $b: a 大于 b&quot;<br>else<br>   echo &quot;$a -gt $b: a 不大于 b&quot;<br>fi<br>if [ $a -lt $b ]<br>then<br>   echo &quot;$a -lt $b: a 小于 b&quot;<br>else<br>   echo &quot;$a -lt $b: a 不小于 b&quot;<br>fi<br>if [ $a -ge $b ]<br>then<br>   echo &quot;$a -ge $b: a 大于或等于 b&quot;<br>else<br>   echo &quot;$a -ge $b: a 小于 b&quot;<br>fi<br>if [ $a -le $b ]<br>then<br>   echo &quot;$a -le $b: a 小于或等于 b&quot;<br>else<br>   echo &quot;$a -le $b: a 大于 b&quot;<br>fi<br></code></pre></div></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577169772803.png" alt="1577169772803"></p><p><strong>4、布尔运算符</strong></p><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><p><strong>布尔运算符实例如下（还是采用之前的例子test-shell.sh ）：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=10<br>b=20<br><br>if [ $a != $b ]<br>then<br>   echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>   echo &quot;$a == $b: a 等于 b&quot;<br>fi<br>if [ $a -lt 100 -a $b -gt 15 ]<br>then<br>   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 true&quot;<br>else<br>   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 false&quot;<br>fi<br>if [ $a -lt 100 -o $b -gt 100 ]<br>then<br>   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 true&quot;<br>else<br>   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 false&quot;<br>fi<br>if [ $a -lt 5 -o $b -gt 100 ]<br>then<br>   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 true&quot;<br>else<br>   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 false&quot;<br>fi<br><br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577170810671.png" alt="1577170810671"></p><p><strong>5、逻辑运算符</strong></p><p>假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><p><strong>逻辑运算符实例如下（还是采用之前的例子test-shell.sh ）：</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=10<br>b=20<br><br>if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br><br>if [[ $a -lt 100 || $b -gt 100 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577171478166.png" alt="1577171478166"></p><h3 id="4-3-6-shell流程控制"><a href="#4-3-6-shell流程控制" class="headerlink" title="4.3.6 shell流程控制"></a>4.3.6 shell流程控制</h3><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">在前面的Java <span class="hljs-keyword">SE</span>课程中，我们学习了很多的流程控制语句，比如有<span class="hljs-keyword">if</span>-<span class="hljs-keyword">else</span>、<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span>、switch、<span class="hljs-keyword">for</span>、<span class="hljs-keyword">while</span>等语句；<br>在<span class="hljs-keyword">shell</span>编程中，我们同样也有这些流程控制，只是语法和java <span class="hljs-keyword">SE</span>有所区别，但是目的是一样的。<br></code></pre></div></td></tr></table></figure><p><strong>1、if 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if，我们还是采用之前的例子test-shell.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN <br>fi<br></code></pre></div></td></tr></table></figure><p> 比如，我们现在通过前面学习的知识查找一个进程，如果进程存在就打印true</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi<br></code></pre></div></td></tr></table></figure><blockquote><p>注意</p><p>末尾的fi就是if倒过来拼写</p></blockquote><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577174880068.png" alt="1577174880068"></p><p><strong>2、if else 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if else，我们还是采用之前的例子test-shell.sh。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br></code></pre></div></td></tr></table></figure><p>上接上面的例子，如果找不到sshAAA<strong>（此处可以随便输入一个）</strong>进程，我们就打印false</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if [ $(ps -ef | grep -c &quot;sshAAA&quot;) -gt 1 ]; then echo &quot;true&quot;;  else echo &quot;false&quot;; fi<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577175009088.png" alt="1577175009088"></p><p><strong>3、if else-if else 语句：</strong></p><p><strong>主要用于判断，相当于java se中的if else-if else</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></div></td></tr></table></figure><p>以下实例判断两个变量是否相等</p><p>我们继续使用上面的例子（test-shell.sh ）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=10<br>b=20<br>if [ $a == $b ]<br>then<br>   echo &quot;a 等于 b&quot;<br>elif [ $a -gt $b ]<br>then<br>   echo &quot;a 大于 b&quot;<br>elif [ $a -lt $b ]<br>then<br>   echo &quot;a 小于 b&quot;<br>else<br>   echo &quot;没有符合的条件&quot;<br>fi<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577152946471.png" alt="1577152946471"></p><p><strong>4、for 循环</strong></p><p><strong>主要用于循环，相当于java se中的for循环，我们还是采用之前的例子test-shell.sh</strong></p><p>for循环格式为</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></div></td></tr></table></figure><p>顺序输出当前列表中的字母：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for loop in A B C D E F G <br>do<br>    echo &quot;顺序输出字母为: $loop&quot;<br>done<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577153230698.png" alt="1577153230698"></p><p><strong>5、while循环</strong></p><p>主要用于循环，相当于java se中的while循环</p><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据 </p><p>语法格式为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure><p>以下是一个基本的while循环，测试条件是：如果int小于等于10，那么条件返回真。int从0开始，每次循环处理时，int加1。 </p><p>还是采用之前的例子test-shell.sh</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>int=1<br>while(( $int&lt;=10 ))<br>do<br>    echo &quot;输出的值为：&quot;$int<br>    let &quot;int++&quot;<br>done<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><strong><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577153468616.png" alt="1577153468616"></strong></p><p><strong>6、case … esac语句</strong></p><p><strong>主要用于分支条件选择，相当于java se中的switch case循环</strong></p><p><strong>case … esac</strong> 与其他语言中的 switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><p>还是采用之前的例子test-shell.sh</p><p>case … esac 语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">case 值 in<br>模式1)<br>    command1<br>    command2<br>    command3<br>    ;;<br>模式2）<br>    command1<br>    command2<br>    command3<br>    ;;<br>*)<br>    command1<br>    command2<br>    command3<br>    ;;<br>esac<br></code></pre></div></td></tr></table></figure><p>case 后为取值，值可以为变量或常数。</p><p>值后为关键字 in，接下来是匹配的各种模式，每一模式最后必须以右括号结束，模式支持正则表达式。</p><p>下面通过v的值进行case–esac</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">v=&quot;czbk&quot;<br><br>case &quot;$v&quot; in<br>   &quot;czbk&quot;) echo &quot;传智播客&quot;<br>   ;;<br>   &quot;baidu&quot;) echo &quot;baidu 搜索&quot;<br>   ;;<br>   &quot;google&quot;) echo &quot;google 搜索&quot;<br>   ;;<br>esac<br></code></pre></div></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577153795748.png" alt="1577153795748"></p><h3 id="4-3-7-shell函数"><a href="#4-3-7-shell函数" class="headerlink" title="4.3.7 shell函数"></a>4.3.7 shell函数</h3><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">我们将要学习的<span class="hljs-keyword">shell</span>函数，我们可以理解成在Java <span class="hljs-keyword">SE</span>阶段我们学习的方法，它和<span class="hljs-keyword">shell</span>函数的作用是一样的。<br></code></pre></div></td></tr></table></figure><p>函数语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[ function ] funname [()]<br><br>&#123;<br><br>    action;<br><br>    [return int;]<br><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：</p><ul><li>1、可以使用function fun() 定义函数，也可以直接fun() 定义,不带任何参数。</li><li>2、函数参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul></blockquote><p>下面我们将定义一个函数，并发生函数调用</p><p>还是采用之前的例子test-shell.sh</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>czbk()&#123;<br>    echo &quot;这是第一个函数!&quot;<br>&#125;<br>echo &quot;-----这里是函数开始执行-----&quot;<br>czbk<br>echo &quot;-----这里是函数执行完毕-----&quot;<br></code></pre></div></td></tr></table></figure><p>执行效果如下图</p><p><img src="https://gitee.com/wxqgm/pic/raw/master/img/1577159360606.png" alt="1577159360606"></p><p>下面，我们定义一个带有return语句的函数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">function czbk()&#123;<br>    echo &quot;对输入的两个数字进行相加运算...&quot;<br>    echo &quot;输入第一个数字: &quot;<br>    read aNum<br>    echo &quot;输入第二个数字: &quot;<br>    read anotherNum<br>    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;<br>    return $(($aNum+$anotherNum))<br>&#125;<br>czbk<br>echo &quot;输入的两个数字之和为 $? !&quot;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：</p><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p></blockquote><h3 id="4-3-8-总结"><a href="#4-3-8-总结" class="headerlink" title="4.3.8 总结"></a>4.3.8 总结</h3><p>在企业级开发过程中，我们（开发人员）学习Linux主要的目的就是在Linux系统中能够熟练的操作目录、文件，还有就是通过所学的命令系统化的编写sh文件，所以，在当前章节中，我们要熟练的编写shell脚本相关命令以及综合案例中的知识点。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo+GitHub/Gitee搭建个人图床</title>
    <link href="/2018/04/02/p2/"/>
    <url>/2018/04/02/p2/</url>
    
    <content type="html"><![CDATA[<h3 id="新建-public-仓库-gt-创建-token-gt-复制-token-一会填进PicGo插件中"><a href="#新建-public-仓库-gt-创建-token-gt-复制-token-一会填进PicGo插件中" class="headerlink" title="新建 public 仓库 -&gt; 创建 token -&gt; 复制 token ,一会填进PicGo插件中"></a>新建 public 仓库 -&gt; 创建 token -&gt; 复制 token ,一会填进PicGo插件中</h3><span id="more"></span><p>1.点击右上角头像，然后进入设置；</p><p>2.在页面左边最下找到 <code>Developer settings</code>，点击进入；</p><p>3.创建 token；</p><p>4.然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下</p><h3 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h3><p><a href="">PicGo下载</a></p><h3 id="安装成功后打开图床设置-点击GitHub图床-配置如下"><a href="#安装成功后打开图床设置-点击GitHub图床-配置如下" class="headerlink" title="安装成功后打开图床设置,点击GitHub图床,配置如下"></a>安装成功后打开图床设置,点击GitHub图床,配置如下</h3><table><thead><tr><th align="center">设定仓库名</th><th align="center">用户名/仓库名</th></tr></thead><tbody><tr><td align="center">设定分支名</td><td align="center">master或者main</td></tr><tr><td align="center">设定Token</td><td align="center">之前复制的token粘贴到这里</td></tr><tr><td align="center">指定存储路径</td><td align="center">img/(填入文件夹路径会自动在你仓库下创建同名文件夹)</td></tr><tr><td align="center">设定自定义域名(+cdn)</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/">https://cdn.jsdelivr.net/gh/用户名/仓库名/</a></td></tr></tbody></table><h3 id="设为默认图床-就可以开始使用了"><a href="#设为默认图床-就可以开始使用了" class="headerlink" title="设为默认图床,就可以开始使用了"></a>设为默认图床,就可以开始使用了</h3><h3 id="Gitee图床设置"><a href="#Gitee图床设置" class="headerlink" title="Gitee图床设置"></a>Gitee图床设置</h3><p>注册登录,创建gitee 仓库,创建token并复制</p><p>软件主页面点击插件设置,搜索gitee-uploader 1.1.2 并安装,配置如下</p><p>gitee 的repo 用户名以浏览器地址栏中的为准</p><table><thead><tr><th>repo</th><th>用户名/仓库名</th></tr></thead><tbody><tr><td>branch</td><td>master</td></tr><tr><td>token</td><td>你复制的</td></tr><tr><td>path</td><td>可而为空</td></tr><tr><td>…</td><td>…(剩下内容可为空或默认,不懂就不填)</td></tr></tbody></table><h3 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h3><p>文件-&gt;偏好设置-&gt;图像</p><p>插入图片时上传图片</p><p>上传服务设定</p><p>上传服务 picgo app</p><p>picgo 路径   你的安装路径</p><p>我的安装路径示例 C:\Program Files\PicGo\PicGo.exe</p><p>PicGo使用小技巧</p><p>好用的插件: </p><p>quick - capture 1.0.0-alpha.2</p><p>super-prefix 1.2.2</p><p>安装小窍门</p><p>安装软件不想安装在c盘可以在d盘创建一个文件夹,我的命名是develop,以后安装软件全部选这个文件夹</p>]]></content>
    
    
    <categories>
      
      <category>PicGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>PicGo</tag>
      
      <tag>个人图床</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsDeliver-A free CDN for Open Source</title>
    <link href="/2018/04/02/p1/"/>
    <url>/2018/04/02/p1/</url>
    
    <content type="html"><![CDATA[<p>注册<a href="https://github.com/">GitHub</a>并登录</p><p>创建public仓库</p><p>怎么使用参考官网</p><span id="more"></span><p><a href="https://www.jsdelivr.com/">jsDeliver CDN 官网</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://cdn.jsdelivr.net/gh/user/repo@version/file<br></code></pre></div></td></tr></table></figure><p>user: 用户名</p><p>repo@version: 仓库名@版本号</p><p>@: 分隔符</p><p>file: 文件名</p><p>前面的不用改,能自定义的从user开始</p>]]></content>
    
    
    <categories>
      
      <category>PicGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶18天思维导图</title>
    <link href="/2017/04/07/Mermaid1/"/>
    <url>/2017/04/07/Mermaid1/</url>
    
    <content type="html"><![CDATA[<p>出不来图请等一等,图很大,四百多行渲染有点慢</p><span id="more"></span><pre><code class=" mermaid">graph LR        id0(JavaSE进阶)---id01(第一天)        subgraph day01        id01(第一天)---id011(01-案例驱动教学模式介绍)        id01(第一天)---id012(02-分类思想)        id01(第一天)---id013(03-包的概述和定义)        id01(第一天)---id014(04-包的注意事项和类访问)        id01(第一天)---id015(05-需求说明和效果演示)        id01(第一天)---id016(06-环境搭建)        id01(第一天)---id017(07-菜单搭建)        id01(第一天)---id018(08-基本添加功能一思路分析)        id01(第一天)---id019(09-基本添加功能一代码实现)        id01(第一天)---id0110(10-添加功能-加入学号判断)        id01(第一天)---id0111(11-添加功能-问题分析)        id01(第一天)---id0112(12-statio关键字特点)        id01(第一天)---id0113(13-stati注意事项学号存在问题解决)        id01(第一天)---id0114(14-查看学生-代码实现)        id01(第一天)---id0115(15-删除功能一代码实现)        id01(第一天)---id0116(16-修改功能一代码实现)        id01(第一天)---id0117(17-学生管理系统代码优化)        id01(第一天)---id0118(18-老师管理系统环境搭建)        end        id0(JavaSE进阶)---id02(第二天)        subgraph day02        id02(第二天)---id021(01-继承入门)        id02(第二天)---id022(02-继承的好处和弊端)        id02(第二天)---id023(03-继承的特点)        id02(第二天)---id024(04-继承中成员变量的访问特点)        id02(第二天)---id025(05-this和super访问成员的格式)        id02(第二天)---id026(06-继承中成员方法的访问特点)        id02(第二天)---id027(07-方法重写概述和应用场景)        id02(第二天)---id028(08-方法重写的注意事项)        id02(第二天)---id029(09-权限修饰符)        id02(第二天)---id0210(10-继承中构造方法的访问特点)        id02(第二天)---id0211(11-构造方法的访问特点-父类没有空参构造方法)        id02(第二天)---id0212(12-代码优化和内存图解)        id02(第二天)---id0213(13-黑马信息管理系统-集成改进)        id02(第二天)---id0214(14-抽象类入门)        id02(第二天)---id0215(15-抽象类的注意事项)        id02(第二天)---id0216(16-模板设计模式)        id02(第二天)---id0217(17-final关键字)        id02(第二天)---id0218(18-黑马信息管理-系统抽象类改进)        id02(第二天)---id0219(19-代码块)        id02(第二天)---id0220(20-黑马信息管理系统一代码块改进)        end        id0(JavaSE进阶)---id03(第三天)        subgraph day03        id03(第三天)---id031(01-黑马信息管理系统-集合改进)        id03(第三天)---id032(02-黑马信息管理系统-抽取公共Dao)        id03(第三天)---id033(03-接口的介绍)        id03(第三天)---id034(04-接口的定义和特点)        id03(第三天)---id035(05-接口中的成员特点)        id03(第三天)---id036(06-JDK8版本中成员的特点-默认方法)        id03(第三天)---id037(07-JDK8版本中接口成员的特点-静态方法)        id03(第三天)---id038(08-JDK9版本中接口成员的特点私有方法)        id03(第三天)---id039(09-类和接口的关系)        id03(第三天)---id0310(10-黑马信息管理系统改进一接口改进)        id03(第三天)---id0311(11-黑马信息管理系统一问题分析一多态引入)        id03(第三天)---id0312(12-多态的前提条件)        id03(第三天)---id0313(13-多态中成员访问的特点)        id03(第三天)---id0314(14多态的好处和弊端)        id03(第三天)---id0315(15-多态中的转型)        id03(第三天)---id0316(16-多态中转型存在的风险和解决方案)        id03(第三天)---id0317(17-黑马信息管理系统多态改进)        end        id0(JavaSE进阶)---id04(第四天)        subgraph day04        id04(第四天)---id041(01-内部类-成员内部类)        id04(第四天)---id042(02-私有成员内部类-静态成员内部类)        id04(第四天)---id043(03-局部内部类)        id04(第四天)---id044(04-匿名内部类)        id04(第四天)---id045(05-匿名内部类的使用场景)        id04(第四天)---id046(06-Lambda初体验和函数式编程思想)        id04(第四天)---id047(07-Lambda表达式的格式说明和前提条件)        id04(第四天)---id048(08-Lambda练习-带参数无返回值)        id04(第四天)---id049(09-Lambda练习-无参数有返回值)        id04(第四天)---id0410(10-Lambd练习-带参数带返回值)        id04(第四天)---id0411(11-Lambd的省略模式)        id04(第四天)---id0412(12-匿名内部类和Lambda表达式的区别)        end        id0(JavaSE进阶)---id05(第五天)        subgraph day05        id05(第五天)---id051(01-API基本使用)        id05(第五天)---id052(02-API-Math)        id05(第五天)---id053(03-API-system)        id05(第五天)---id054(04-Object-toString)        id05(第五天)---id055(05-Object-equals)        id05(第五天)---id056(06-Object-面试题)        id05(第五天)---id057(07-API-Obiects)        id05(第五天)---id058(08-BigDecimal-构造)        id05(第五天)---id059(09-BigDecimal-四则运算)        id05(第五天)---id0510(10-BigDecimal-特殊方法)        id05(第五天)---id0511(11-基本数据类型包装类)        id05(第五天)---id0512(12-Integer-获得对象)        id05(第五天)---id0513(13-Integer-自动装箱和自动拆箱)        id05(第五天)---id0514(14-Integer-类型转换)        id05(第五天)---id0515(15-Integer-练习)        id05(第五天)---id0516(16-数组的高级操作-二分查找思路分析)        id05(第五天)---id0517(17-数组的高级操作-二分查找代码实现)        id05(第五天)---id0518(18-数组的高级操作-冒泡排序思路分析)        id05(第五天)---id0519(19-数组的高级操作-冒泡排序代码实现)        id05(第五天)---id0520(20-递归一概念)        id05(第五天)---id0521(21-递归一求阶乘代码买现)        id05(第五天)---id0522(22-递归-内存图)        id05(第五天)---id0523(23-数组的高级操作-快排核心思路分析)        id05(第五天)---id0524(24-数组的高级操作-快排核心代码实现)        id05(第五天)---id0525(25-数组的高级操作-快排完整实现)        id05(第五天)---id0526(26-Arrays)        end        id0(JavaSE进阶)---id06(第六天)        subgraph day06        id06(第六天)---id061(01-时间日期类一概述)        id06(第六天)---id062(02-时间日期类-Date构造方法)        id06(第六天)---id063(03-时间日期类-Date成员方法)        id06(第六天)---id064(04-时间日期类-simpledateformat)        id06(第六天)---id065(05-时间日期类-练习)        id06(第六天)---id066(06-时间日期类-JDK8的体验)        id06(第六天)---id067(07-JDK8时间类一获取时间对象)        id06(第六天)---id068(08-JDK8时间类-获取时间中的每个值)        id06(第六天)---id069(09-JDK8时间类-转换方法)        id06(第六天)---id0610(10-JDK8时间类-格式化和解析)        id06(第六天)---id0611(11-JDK8时间类-plus系列的方法)        id06(第六天)---id0612(12-JDK8时间类-minus系列的方法)        id06(第六天)---id0613(13-JDK8时间类-with系列的方法)        id06(第六天)---id0614(14-JDK8时间类一时间间隔对象)        id06(第六天)---id0615(15-JDK8时间类一小结)        id06(第六天)---id0616(16-异常的体系结构和异常的分类)        id06(第六天)---id0617(17-虚拟机默认处理异常的方式)        id06(第六天)---id0618(18-throws声明异常)        id06(第六天)---id0619(19-声明异常的注意事项)        id06(第六天)---id0620(20-throw抛出异常)        id06(第六天)---id0621(21-try. ..catch自已处理异常)        id06(第六天)---id0622(22-try. ..catch的常见问题)        id06(第六天)---id0623(23-throwable成员方法)        id06(第六天)---id0624(24-异常的小练习)        id06(第六天)---id0625(25-自定义异常)        end        id0(JavaSE进阶)---id07(第七天)        subgraph day07        id07(第七天)---id071(01-集合概述-集合与数组的对比)        id07(第七天)---id072(02-集合概述-集合体系结构)        id07(第七天)---id073(03-Collection-常见成员方法)        id07(第七天)---id074(04-Collection-迭代器基本使用)        id07(第七天)---id075(05-Collection-迭代器原理分析)        id07(第七天)---id076(06-Collection-迭代器删除方法)        id07(第七天)---id077(07一增强for-基本格式)        id07(第七天)---id078(08-增强for-注意点)        id07(第七天)---id079(09-Collection-练习)        id07(第七天)---id0710(10-List-概述和基本使用)        id07(第七天)---id0711(11-List-特有方法)        id07(第七天)---id0712(12-数据结构一栈和队列)        id07(第七天)---id0713(13-数据结构-数组和链表)        id07(第七天)---id0714(14-Arraylist-源码解析)        id07(第七天)---id0715(15-LinkedList-基本运用)        id07(第七天)---id0716(16-LinkedList-特有功能)        id07(第七天)---id0717(17-LinkedList-源码解析)        end        id0(JavaSE进阶)---id08(第八天)        subgraph day08        id08(第八天)---id081(01-泛型一概述)        id08(第八天)---id082(02-泛型一泛型类的使用)        id08(第八天)---id083(03-泛型-自定义泛型类)        id08(第八天)---id084(04-泛型-泛型方法的使用)        id08(第八天)---id085(05-泛型-自定义泛型方法)        id08(第八天)---id086(06-泛型一泛型接口)        id08(第八天)---id087(07-泛型-通配符)        id08(第八天)---id088(08-Set-概述)        id08(第八天)---id089(09-Set-基本使用)        id08(第八天)---id0810(10-TreeSet-基本使用)        id08(第八天)---id0811(11-TreeSet-自然排序)        id08(第八天)---id0812(12-自然排序-练习)        id08(第八天)---id0813(13-TreeSet-比较器排序)        id08(第八天)---id0814(14-TreeSet两种比较方式的对比)        id08(第八天)---id0815(15-数据结构-二叉树)        id08(第八天)---id0816(16-数据结构-二叉查找树)        id08(第八天)---id0817(17-数据结构一二叉查找树添加节点)        id08(第八天)---id0818(18-数据结构-平衡二叉树)        id08(第八天)---id0819(19-平衡二叉树一左旋)        id08(第八天)---id0820(20-平衡二叉树-右旋)        id08(第八天)---id0821(21-平衡二叉树一小结)        id08(第八天)---id0822(22-平衡二叉树-左左和左右)        id08(第八天)---id0823(23-平衡二叉树-右右和右左)        id08(第八天)---id0824(24-小结)        end        id0(JavaSE进阶)---id09(第九天)        subgraph day09        id09(第九天)---id091(01-红黑树一概述)        id09(第九天)---id092(02-红黑树红黑规则)        id09(第九天)---id093(03-红黑树一添加节点的默认颜色)        id09(第九天)---id094(04-红黑树一添加节点后如何保证红黑规则1)        id09(第九天)---id095(05-红黑树一添加节点后如何保证红黑规则2)        id09(第九天)---id096(06-红黑树-练习)        id09(第九天)---id097(07-HashSet-基本使用)        id09(第九天)---id098(08-HashSet-哈希值)        id09(第九天)---id099(09-HashSet-JDK7底层原理解析)        id09(第九天)---id0910(10-HashSet-JDK8底层优化)        id09(第九天)---id0911(11-HashSet-练习)        id09(第九天)---id0912(12-HashSet-小结)        id09(第九天)---id0913(13-Map-基本使用)        id09(第九天)---id0914(14-Map-常用方法)        id09(第九天)---id0915(15-Map-第一种遍历方式)        id09(第九天)---id0916(16-Map-第二种遍历方式)        id09(第九天)---id0917(17-HashMap-原理解析)        id09(第九天)---id0918(18-HashMap-练习)        id09(第九天)---id0919(19-TreeMap-原理解析)        id09(第九天)---id0920(20-TreeMap-练习)        end        id0(JavaSE进阶)---id10(第十天)        subgraph day10        id10(第十天)---id101(01-可变参数)        id10(第十天)---id102(02-创建不可变的集合)        id10(第十天)---id103(03-Stream流-初体验)        id10(第十天)---id104(04-Stream流-思想特点)        id10(第十天)---id105(05-Stream流-获取方法)        id10(第十天)---id106(06-中间方法-filter)        id10(第十天)---id107(07-其他常用中间方法)        id10(第十天)---id108(08-Stream流-终结方法)        id10(第十天)---id109(09-Stream流一不能直接修改数据源中的数据)        id10(第十天)---id1010(10收集方法-toList和toSet)        id10(第十天)---id1011(11-收集方法-toMap)        id10(第十天)---id1012(12-Stream流-练习)        end        id0(JavaSE进阶)---id11(第十一天)        subgraph day11        id11(第十一天)---id111(01-File和IO的概述)        id11(第十一天)---id112(02-File的构造方法)        id11(第十一天)---id113(03-绝对路径和相对路径)        id11(第十一天)---id114(04-Fi1e的创建功能)        id11(第十一天)---id115(05-Fie的删除方法)        id11(第十一天)---id116(06-File的获取和判断方法)        id11(第十一天)---id117(07-File的listFile方法)        id11(第十一天)---id118(08-File练习一)        id11(第十一天)---id119(09-File练习二)        id11(第十一天)---id1110(10-Fie练习二的递归分析)        id11(第十一天)---id1111(11-File练习三)        id11(第十一天)---id1112(12-IO的概述)        id11(第十一天)---id1113(13-IO的分类)        id11(第十一天)---id1114(14-字节流-字节输出流快速入门)        id11(第十一天)---id1115(15-字节流注意事项)        id11(第十一天)---id1116(16-字节流一次写多个数据)        id11(第十一天)---id1117(17-字节流-两个问题)        id11(第十一天)---id1118(18-字节流-trycatch捕获异常)        id11(第十一天)---id1119(19-字节流-小结)        id11(第十一天)---id1120(20-字节流-字节输入流基本学习)        id11(第十一天)---id1121(21-字节流-读多个字节)        id11(第十一天)---id1122(22-字节流-文件复制)        id11(第十一天)---id1123(23-字节流定义小数组拷贝)        id11(第十一天)---id1124(24-字节流-小数组拷贝原理)        id11(第十一天)---id1125(25-缓冲流-次读写一个字节代码实现)        id11(第十一天)---id1126(26-缓冲流-一次读写一个字节原理)        id11(第十一天)---id1127(27-缓冲流一次读写一个字节数组)        id11(第十一天)---id1128(28-小结)        end        id0(JavaSE进阶)---id12(第十二天)        subgraph day12        id12(第十二天)---id121(01-字节流操作文本文件出现乱码的问题)        id12(第十二天)---id122(02-字符流-编码表)        id12(第十二天)---id123(03-字符流编码和解码的方法)        id12(第十二天)---id124(04-字节流读取中文出现乱码的原因)        id12(第十二天)---id125(05-字符流-读取中文的过程)        id12(第十二天)---id126(06-字符流-写出数据)        id12(第十二天)---id127(07-字符流-写出数据的注意事项)        id12(第十二天)---id128(08-字符流-flush和close方法)        id12(第十二天)---id129(09-字符流-读取数据)        id12(第十二天)---id1210(10-字符流-练习)        id12(第十二天)---id1211(11-字符缓冲输入流-读取数据)        id12(第十二天)---id1212(12-字符缓冲输出流-输出数据)        id12(第十二天)---id1213(13-缓冲流特有方法)        id12(第十二天)---id1214(14-缓冲流-练习)        id12(第十二天)---id1215(15-10流-小结)        id12(第十二天)---id1216(16-转换流一概念)        id12(第十二天)---id1217(17-转换流-指定编码读写)        id12(第十二天)---id1218(18-对象操作流-基本特点)        id12(第十二天)---id1219(19-对象操作流-序列化)        id12(第十二天)---id1220(20-对象操作流-反序列化)        id12(第十二天)---id1221(21-对象操作流两个注意点)        id12(第十二天)---id1222(22-对象操作流-两个注意点2)        id12(第十二天)---id1223(23-对象操作流-练习)        id12(第十二天)---id1224(24-Properties-概述)        id12(第十二天)---id1225(25-Properties-作为map集合的基本使用)        id12(第十二天)---id1226(26-Properties-特有方法)        id12(第十二天)---id1227(27-Properties-load)        id12(第十二天)---id1228(28-Properties-store)        end        id0(JavaSE进阶)---id13(第十三天)        subgraph day13        id13(第十三天)---id131(01-多线程概述-初步了解多线程)        id13(第十三天)---id132(02-多线程概述一并发和并行)        id13(第十三天)---id133(03-多线程概述一进程和线程)        id13(第十三天)---id134(04-多线程的实现方式-继承Thread)        id13(第十三天)---id135(05-多线程的实现方式-两个小问题)        id13(第十三天)---id136(06-多线的实现方式-实现Runnable接口)        id13(第十三天)---id137(07-多线程的实现方式-实现callable接口)        id13(第十三天)---id138(08-三种实现方式的对比)        id13(第十三天)---id139(09-Thread方法-设置获取名字)        id13(第十三天)---id1310(10-Thread方法-获得线程对象)        id13(第十三天)---id1311(11-Thread方法-sleep)        id13(第十三天)---id1312(12-Thread方法一线程的优先级)        id13(第十三天)---id1313(13-Thread方法-守护线程)        id13(第十三天)---id1314(14-线程安全问题-卖票案例实现)        id13(第十三天)---id1315(15-线程安全问题-原因分析)        id13(第十三天)---id1316(16-线程安全问题-同步代码块)        id13(第十三天)---id1317(17-线程安全问题一锁对象唯一)        id13(第十三天)---id1318(18-线程安全问题-同步方法)        id13(第十三天)---id1319(19-线程安全问题-lock)        id13(第十三天)---id1320(20-死锁)        id13(第十三天)---id1321(21-生产者和消费者思路分析)        id13(第十三天)---id1322(22-生产者和消费者-代码实现)        id13(第十三天)---id1323(23-生产者和消费者代码改写)        id13(第十三天)---id1324(24-阻塞队列基本使用)        id13(第十三天)---id1325(25-阻塞队列一实现等待唤醒机制)        end        id0(JavaSE进阶)---id14(第十四天)        subgraph day14        id14(第十四天)---id141(01-线程状态)        id14(第十四天)---id142(02-线程池一基本原理)        id14(第十四天)---id143(03-线程池-Executors默认线程池)        id14(第十四天)---id144(04-线程池-Executors创建指定上限的线程池)        id14(第十四天)---id145(05-线程池-ThreadPoolExecutor)        id14(第十四天)---id146(05-线程池一参数详解)        id14(第十四天)---id147(07-线程池一非默认任务拒绝策略)        id14(第十四天)---id148(08-volatile-问题)        id14(第十四天)---id149(09-volatile解决)        id14(第十四天)---id1410(10-synchronized解决)        id14(第十四天)---id1411(11-原子性)        id14(第十四天)---id1412(12-volatile关键字不能保证原子性)        id14(第十四天)---id1413(13-原子性-AtomicInteger)        id14(第十四天)---id1414(14-AtomicInteger-内存解析)        id14(第十四天)---id1415(15-AtomicInteger-源码解析)        id14(第十四天)---id1416(16-悲观锁和乐观锁)        id14(第十四天)---id1417(17-并发工具类-Hashtable)        id14(第十四天)---id1418(18-并发工具类-ConcurrentHashMap基本使用)        id14(第十四天)---id1419(19-并发工具类ConcurrentHashMap1.7原理)        id14(第十四天)---id1420(20-并发工具类ConcurrentHashMap1.8原理)        id14(第十四天)---id1421(21-并发工具类CountDownLatch)        id14(第十四天)---id1422(22-并发工具类-Semaphore)        end        id0(JavaSE进阶)---id15(第十五天)        subgraph day15        id15(第十五天)---id151(01-网络编程三要素一概述)        id15(第十五天)---id152(02-网络编程三要素-IP)        id15(第十五天)---id153(03-网络编程-常见命令)        id15(第十五天)---id154(04-网络编程-Inetaddress类)        id15(第十五天)---id155(05-网络编程三要素-端口)        id15(第十五天)---id156(06-网络编程三要素-协议)        id15(第十五天)---id157(07-UDP-发送端)        id15(第十五天)---id158(08-UDP一接收端)        id15(第十五天)---id159(09-UDP练习)        id15(第十五天)---id1510(10-UDP-三种通讯方式)        id15(第十五天)---id1511(11-UDP-组播代码实现)        id15(第十五天)---id1512(12-UDP-广播代码实现)        id15(第十五天)---id1513(13-TCP-客户端)        id15(第十五天)---id1514(14-TCP-服务器)        id15(第十五天)---id1515(15-TCP-原理分析)        id15(第十五天)---id1516(16-TCP-三次握手)        id15(第十五天)---id1517(17-TCP-四次挥手)        id15(第十五天)---id1518(18-TCP-练习1)        id15(第十五天)---id1519(19-TCP-练习2)        id15(第十五天)---id1520(20-服务端优化一循环)        id15(第十五天)---id1521(21-服务端优化-UUID)        id15(第十五天)---id1522(22-服务端优化-多线程)        id15(第十五天)---id1523(23-服务端优化一线程池)        end        id0(JavaSE进阶)---id16(第十六天)        subgraph day16        id16(第十六天)---id161(01-类加载器-初步了解)        id16(第十六天)---id162(02-类加载器一类加载时机)        id16(第十六天)---id163(03-类加载的过程-加载)        id16(第十六天)---id164(04-类加载的过程-链接)        id16(第十六天)---id165(05-类加载的过程-初始化和小结)        id16(第十六天)---id166(06-类加载器一分类)        id16(第十六天)---id167(07-类加载器一双亲委派模型)        id16(第十六天)---id168(08-类加载器-常用方法)        id16(第十六天)---id169(09-反射一概述)        id16(第十六天)---id1610(10-反射一获取class对象)        id16(第十六天)---id1611(11-反射-获取Constructor对象)        id16(第十六天)---id1612(12-反射-利用Constructor创建对象)        id16(第十六天)---id1613(13-反射一小结)        id16(第十六天)---id1614(14-反射一获取Field对象)        id16(第十六天)---id1615(15-反射-利用Field赋值和获取值)        id16(第十六天)---id1616(16-反射一获取Method对象)        id16(第十六天)---id1617(17-反射-利用Method象运行方法)        end        id0(JavaSE进阶)---id17(第十七天)        subgraph day17        id17(第十七天)---id171(01-xml-作为配置文件的优势)        id17(第十七天)---id172(02-xml一概述)        id17(第十七天)---id173(03-xml-标签的规则)        id17(第十七天)---id174(04-xml-语法规则)        id17(第十七天)---id175(05-xml-DOM解析思想)        id17(第十七天)---id176(06-xml-解析的准备工作)        id17(第十七天)---id177(07-xml-解析代码实现)        id17(第十七天)---id178(08-DTD入门案例-编写DTD)        id17(第十七天)---id179(09-DTD入门案例-引入DTD)        id17(第十七天)---id1710(10-DTD约束-三种引入方式)        id17(第十七天)---id1711(11-DTD语法规则-定义元素)        id17(第十七天)---id1712(12-DTD语法规则-定义属性)        id17(第十七天)---id1713(13-schema-schema和dtd的区别)        id17(第十七天)---id1714(14-schema入门案例-编写schema)        id17(第十七天)---id1715(15-schema入门案例-引入schema)        id17(第十七天)---id1716(16-schema入门案例-定义属性)        id17(第十七天)---id1717(17-枚举-什么是枚举)        id17(第十七天)---id1718(18-枚举定义格式)        id17(第十七天)---id1719(19-枚举-枚举的特点)        id17(第十七天)---id1720(20-枚举-枚举的方法)        id17(第十七天)---id1721(21-注解一注解的优势)        id17(第十七天)---id1722(22-注解一注解的概述)        id17(第十七天)---id1723(23-注解一自定义注解)        id17(第十七天)---id1724(24-注解一特殊属性value)        id17(第十七天)---id1725(25-注解-自定义注解练习)        id17(第十七天)---id1726(26注解-元注解)        end        id0(JavaSE进阶)---id18(第十八天)        subgraph day18        id18(第十八天)---id181(01-单元测试一概述)        id18(第十八天)---id182(02-单元测试-基本使用)        id18(第十八天)---id183(03-单元测试-三个常用注解before, test, after)        id18(第十八天)---id184(04-日志技术-日志技术与输出语句的区别)        id18(第十八天)---id185(05-日志技术-体系结构和Log4J)        id18(第十八天)---id186(06-日志技术-Log4J入门案例)        id18(第十八天)---id187(07一日志技术-Log4J三个核心)        id18(第十八天)---id188(08-日志技术-配置文件详解)        id18(第十八天)---id189(09-日志技术-Log4J在项目中的应用)        end</code></pre>]]></content>
    
    
    <categories>
      
      <category>Mermaid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day18 XML&amp;枚举</title>
    <link href="/2017/04/02/SAd18/"/>
    <url>/2017/04/02/SAd18/</url>
    
    <content type="html"><![CDATA[<h1 id="XML-amp-枚举"><a href="#XML-amp-枚举" class="headerlink" title="XML&amp;枚举"></a>XML&amp;枚举</h1><span id="more"></span><h2 id="1-XML概述"><a href="#1-XML概述" class="headerlink" title="1.XML概述"></a>1.XML概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​        XML是一种可扩展的标记语言.</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h4><p>​            通过标签来描述数据的一门语言</p><h4 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h4><h5 id="标签的名字是可以自定义的"><a href="#标签的名字是可以自定义的" class="headerlink" title="标签的名字是可以自定义的"></a>标签的名字是可以自定义的</h5><h5 id="XML文件是由很多标签组成的"><a href="#XML文件是由很多标签组成的" class="headerlink" title="XML文件是由很多标签组成的"></a>XML文件是由很多标签组成的</h5><h5 id="而标签名是可以自定义的"><a href="#而标签名是可以自定义的" class="headerlink" title="而标签名是可以自定义的"></a>而标签名是可以自定义的</h5><h2 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><h4 id="由一对-lt-gt-所构成的语法-就是标签"><a href="#由一对-lt-gt-所构成的语法-就是标签" class="headerlink" title="由一对&lt;&gt;所构成的语法,就是标签."></a>由一对&lt;&gt;所构成的语法,就是标签.</h4><h4 id="例如-就是student标签"><a href="#例如-就是student标签" class="headerlink" title="例如: 就是student标签"></a>例如: <student>就是student标签</h4><h4 id="标签有时我们也将其称之为元素"><a href="#标签有时我们也将其称之为元素" class="headerlink" title="标签有时我们也将其称之为元素"></a>标签有时我们也将其称之为元素</h4><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><p>​        &lt;标签名 属性=”属性值” &gt;标签体(内容)&lt;/标签名&gt;</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则:"></a>规则:</h3><h4 id="1-标签必须有开始有结束"><a href="#1-标签必须有开始有结束" class="headerlink" title="1:标签必须有开始有结束."></a>1:标签必须有开始有结束.</h4><h5 id=""><a href="#" class="headerlink" title=""></a><student></student></h5><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><teacher/></h5><h4 id="2-标签可以有多个属性-但属性之间使用空格隔开"><a href="#2-标签可以有多个属性-但属性之间使用空格隔开" class="headerlink" title="2:标签可以有多个属性,但属性之间使用空格隔开."></a>2:标签可以有多个属性,但属性之间使用空格隔开.</h4><h4 id="3-属性值必须用引号引起来-单双都可以"><a href="#3-属性值必须用引号引起来-单双都可以" class="headerlink" title="3:属性值必须用引号引起来(单双都可以)."></a>3:属性值必须用引号引起来(单双都可以).</h4><h4 id="4-标签必须正确嵌套-不允许交叉"><a href="#4-标签必须正确嵌套-不允许交叉" class="headerlink" title="4:标签必须正确嵌套,不允许交叉."></a>4:标签必须正确嵌套,不允许交叉.</h4><h2 id="3-XML的文档声明"><a href="#3-XML的文档声明" class="headerlink" title="3.XML的文档声明:"></a>3.XML的文档声明:</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式:"></a>格式:</h3><p>​        <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析:"></a>解析:</h3><h4 id="version-当前xml的版本-必须有-且必须是”1-0”"><a href="#version-当前xml的版本-必须有-且必须是”1-0”" class="headerlink" title="version    :当前xml的版本,必须有,且必须是”1.0”"></a>version    :当前xml的版本,必须有,且必须是”1.0”</h4><h4 id="encoding-当前xml的字符集-一般为”UTF-8”"><a href="#encoding-当前xml的字符集-一般为”UTF-8”" class="headerlink" title="encoding:当前xml的字符集. 一般为”UTF-8”"></a>encoding:当前xml的字符集. 一般为”UTF-8”</h4><h2 id="4-XML语法规范"><a href="#4-XML语法规范" class="headerlink" title="4.XML语法规范:"></a>4.XML语法规范:</h2><h3 id="1-文件后缀名必须是xml"><a href="#1-文件后缀名必须是xml" class="headerlink" title="1:文件后缀名必须是xml"></a>1:文件后缀名必须是xml</h3><h3 id="2-文档声明必须在文件的第一行第一列"><a href="#2-文档声明必须在文件的第一行第一列" class="headerlink" title="2:文档声明必须在文件的第一行第一列."></a>2:文档声明必须在文件的第一行第一列.</h3><h3 id="3-有且仅有一个跟标签"><a href="#3-有且仅有一个跟标签" class="headerlink" title="3:有且仅有一个跟标签"></a>3:有且仅有一个跟标签</h3><h4 id="4-特殊符号一般写在CDATA区"><a href="#4-特殊符号一般写在CDATA区" class="headerlink" title="4:特殊符号一般写在CDATA区."></a>4:特殊符号一般写在CDATA区.</h4><p>​        <code>&lt;![CDATA[ 内容 ]]&gt;</code></p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><h5 id="person-xml-引用dtd"><a href="#person-xml-引用dtd" class="headerlink" title="person.xml(引用dtd)"></a>person.xml(引用dtd)</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">persons</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&#x27;persondtd.dtd&#x27;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">persons</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">person</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">persons</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="person-dtd-约束"><a href="#person-dtd-约束" class="headerlink" title="person.dtd(约束)"></a>person.dtd(约束)</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;!ELEMENT persons (person)&gt;<br>&lt;!ELEMENT person (name,age)&gt;<br>&lt;!ELEMENT name (#PCDATA)&gt;<br>&lt;!ELEMENT age (#PCDATA)&gt;<br></code></pre></div></td></tr></table></figure><h4 id="test2-dtdgrammar"><a href="#test2-dtdgrammar" class="headerlink" title="test2(dtdgrammar)"></a>test2(dtdgrammar)</h4><h5 id="person-xml"><a href="#person-xml" class="headerlink" title="person.xml"></a>person.xml</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">persons</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&#x27;persondtd.dtd&#x27;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">persons</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;002&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">persons</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="person-dtd"><a href="#person-dtd" class="headerlink" title="person.dtd"></a>person.dtd</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;!ELEMENT persons (person+)&gt;<br>&lt;!ELEMENT person (name,age)&gt;<br>&lt;!ELEMENT name (#PCDATA)&gt;<br>&lt;!ELEMENT age (#PCDATA)&gt;<br>&lt;!ATTLIST person id CDATA #REQUIRED&gt;<br></code></pre></div></td></tr></table></figure><h4 id="test3-importdtd"><a href="#test3-importdtd" class="headerlink" title="test3(importdtd)"></a>test3(importdtd)</h4><h4 id="person-dtd-1"><a href="#person-dtd-1" class="headerlink" title="person.dtd"></a>person.dtd</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;!ELEMENT persons (person)&gt;<br>&lt;!ELEMENT person (name,age)&gt;<br>&lt;!ELEMENT name (#PCDATA)&gt;<br>&lt;!ELEMENT age (#PCDATA)&gt;<br></code></pre></div></td></tr></table></figure><h5 id="person1-xml"><a href="#person1-xml" class="headerlink" title="person1.xml"></a>person1.xml</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE persons SYSTEM &#39;persondtd.dtd&#39;&gt;<br><br>&lt;persons&gt;<br>    &lt;person&gt;<br>        &lt;name&gt;张三&lt;&#x2F;name&gt;<br>        &lt;age&gt;23&lt;&#x2F;age&gt;<br>    &lt;&#x2F;person&gt;<br><br>&lt;&#x2F;persons&gt;<br></code></pre></div></td></tr></table></figure><h5 id="person2-xml"><a href="#person2-xml" class="headerlink" title="person2.xml"></a>person2.xml</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE persons [<br>        &lt;!ELEMENT persons (person)&gt;<br>        &lt;!ELEMENT person (name,age)&gt;<br>        &lt;!ELEMENT name (#PCDATA)&gt;<br>        &lt;!ELEMENT age (#PCDATA)&gt;<br>        ]&gt;<br><br>&lt;persons&gt;<br>    &lt;person&gt;<br>        &lt;name&gt;张三&lt;&#x2F;name&gt;<br>        &lt;age&gt;23&lt;&#x2F;age&gt;<br>    &lt;&#x2F;person&gt;<br><br>&lt;&#x2F;persons&gt;<br></code></pre></div></td></tr></table></figure><h5 id="person3-xml"><a href="#person3-xml" class="headerlink" title="person3.xml"></a>person3.xml</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE persons PUBLIC &quot;dtd文件的名称&quot; &quot;dtd文档的URL&quot;&gt;<br><br>&lt;persons&gt;<br>    &lt;person&gt;<br>        &lt;name&gt;张三&lt;&#x2F;name&gt;<br>        &lt;age&gt;23&lt;&#x2F;age&gt;<br>    &lt;&#x2F;person&gt;<br><br>&lt;&#x2F;persons&gt;<br></code></pre></div></td></tr></table></figure><h4 id="schemaprimer"><a href="#schemaprimer" class="headerlink" title="schemaprimer"></a>schemaprimer</h4><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scheme">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;<br>&lt;schema<br>    xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;<br>    targetNamespace=&quot;http://www.itheima.cn/javase&quot;<br>    elementFormDefault=&quot;qualified&quot;<br>&gt;<br><br>    &lt;!--定义persons复杂元素--&gt;<br>    &lt;element name=&quot;persons&quot;&gt;<br>        &lt;complexType&gt;<br>            &lt;sequence&gt;<br>                &lt;!--定义person复杂元素--&gt;<br>                &lt;element name = &quot;person&quot;&gt;<br>                    &lt;complexType&gt;<br>                        &lt;sequence&gt;<br><br>                            &lt;!--定义name和age简单元素--&gt;<br>                            &lt;element name = &quot;name&quot; type = &quot;string&quot;&gt;&lt;/element&gt;<br>                            &lt;element name = &quot;age&quot; type = &quot;string&quot;&gt;&lt;/element&gt;<br><br>                        &lt;/sequence&gt;<br><br>                        &lt;attribute name=&quot;id&quot; type=&quot;string&quot; use=&quot;required&quot;&gt;&lt;/attribute&gt;<br>                    &lt;/complexType&gt;<br><br><br>                &lt;/element&gt;<br>            &lt;/sequence&gt;<br>        &lt;/complexType&gt;<br><br><br>    &lt;/element&gt;<br><br><br><br>&lt;/schema&gt;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scheme">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;<br><br>&lt;persons<br>    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>    xmlns=&quot;http://www.itheima.cn/javase&quot;<br>    xsi:schemaLocation=&quot;http://www.itheima.cn/javase person.xsd&quot;<br>&gt;<br>    &lt;person id=&quot;001&quot;&gt;<br>        &lt;name&gt;张三&lt;/name&gt;<br>        &lt;age&gt;23&lt;/age&gt;<br>    &lt;/person&gt;<br><br><br>&lt;/persons&gt;<br></code></pre></div></td></tr></table></figure><h2 id="5-XML的解析的方式"><a href="#5-XML的解析的方式" class="headerlink" title="5.XML的解析的方式"></a>5.XML的解析的方式</h2><h3 id="DOM解析-Document-Object-Model"><a href="#DOM解析-Document-Object-Model" class="headerlink" title="DOM解析:Document Object Model."></a>DOM解析:Document Object Model.</h3><h4 id="一次性将文档的所有元素都加载到内存中"><a href="#一次性将文档的所有元素都加载到内存中" class="headerlink" title="一次性将文档的所有元素都加载到内存中."></a>一次性将文档的所有元素都加载到内存中.</h4><h4 id="可以对整个文档进行”增删改查”操作"><a href="#可以对整个文档进行”增删改查”操作" class="headerlink" title="可以对整个文档进行”增删改查”操作."></a>可以对整个文档进行”增删改查”操作.</h4><h3 id="SAX解析-Simple-Api-for-XML"><a href="#SAX解析-Simple-Api-for-XML" class="headerlink" title="SAX解析:Simple Api for XML."></a>SAX解析:Simple Api for XML.</h3><h4 id="事件驱动的方式-一次加载并解析一行代码"><a href="#事件驱动的方式-一次加载并解析一行代码" class="headerlink" title="事件驱动的方式,一次加载并解析一行代码."></a>事件驱动的方式,一次加载并解析一行代码.</h4><h4 id="只能对文档进行”查询”工作"><a href="#只能对文档进行”查询”工作" class="headerlink" title="只能对文档进行”查询”工作"></a>只能对文档进行”查询”工作</h4><h2 id="6-XML的解析-DOM4J"><a href="#6-XML的解析-DOM4J" class="headerlink" title="6.XML的解析-DOM4J"></a>6.XML的解析-DOM4J</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><h4 id="1-导入dom4j的jar包"><a href="#1-导入dom4j的jar包" class="headerlink" title="1:导入dom4j的jar包"></a>1:导入dom4j的jar包</h4><h4 id="2-创建解析器"><a href="#2-创建解析器" class="headerlink" title="2:创建解析器"></a>2:创建解析器</h4><h4 id="3-解析文档获得代表文档的Document对象"><a href="#3-解析文档获得代表文档的Document对象" class="headerlink" title="3:解析文档获得代表文档的Document对象."></a>3:解析文档获得代表文档的Document对象.</h4><h4 id="4-获得根节点"><a href="#4-获得根节点" class="headerlink" title="4:获得根节点."></a>4:获得根节点.</h4><h4 id="5-从跟节点下查找其他的节点"><a href="#5-从跟节点下查找其他的节点" class="headerlink" title="5:从跟节点下查找其他的节点."></a>5:从跟节点下查找其他的节点.</h4><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><p>​        SAXReader reader = new SAXReader();<br>​            // 创建解析器<br>​        Document document = 解析器.read(“文档路径”);<br>​            // 指定要解析的xml文档<br>​        Element root = 文档对象.getRootElement();<br>​            // 获文档得根节点(根节点也是节点)<br>​        Element e = 节点.element(“标签名”);<br>​             // 查找节点中的第一指定标签,返回对应节点<br>​        Element e = 节点.elements(“标签名”);<br>​             // 查找节点中的所有指定标签,返回节点集合</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>​        String elName = 节点.getName();<br>​            // 获取节点的名字<br>​        String elText = 节点.getText();<br>​            // 获取节点中的文本<br>​        String value = 节点.attributeValue(“属性名”);<br>​            // 获取节点的指定属性的值</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        在查找元素时,只能一层一层的往下找.</p><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="student-xml"><a href="#student-xml" class="headerlink" title="student.xml"></a>student.xml</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!--注释的内容--&gt;</span><br><span class="hljs-comment">&lt;!--本xml文件用来描述多个学生信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--第一个学生信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;i</span><br><span class="hljs-comment">        nfo&gt;学生&amp;lt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;的信息&lt;/info&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;message&gt; &lt;![CDATA[内容 &lt;&lt;&lt;&lt;&lt;&lt; &gt;&gt;&gt;&gt;&gt;&gt; ]]]&gt;&lt;/message&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--第二个学生信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aaa</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aaa</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&#x27;&quot;</span> + id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.dom4j.Attribute;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用dom4j解析xml文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XmlParse</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> DocumentException </span>&#123;<br>        <span class="hljs-comment">//1.获取一个解析器对象</span><br>        SAXReader saxReader = <span class="hljs-keyword">new</span> SAXReader();<br>        <span class="hljs-comment">//2.利用解析器把xml文件加载到内存中,并返回一个文档对象</span><br>        Document document = saxReader.read(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;myxml\\xml\\student.xml&quot;</span>));<br>        <span class="hljs-comment">//3.获取到根标签</span><br>        Element rootElement = document.getRootElement();<br>        <span class="hljs-comment">//4.通过根标签来获取student标签</span><br>        <span class="hljs-comment">//elements():可以获取调用者所有的子标签.会把这些子标签放到一个集合中返回.</span><br>        <span class="hljs-comment">//elements(&quot;标签名&quot;):可以获取调用者所有的指定的子标签,会把这些子标签放到一个集合中并返回</span><br>        <span class="hljs-comment">//List list = rootElement.elements();</span><br>        List&lt;Element&gt; studentElements = rootElement.elements(<span class="hljs-string">&quot;student&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(list.size());</span><br><br>        <span class="hljs-comment">//用来装学生对象</span><br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><br>        <span class="hljs-comment">//5.遍历集合,得到每一个student标签</span><br>        <span class="hljs-keyword">for</span> (Element element : studentElements) &#123;<br>            <span class="hljs-comment">//element依次表示每一个student标签</span><br><br>            <span class="hljs-comment">//获取id这个属性</span><br>            Attribute attribute = element.attribute(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-comment">//获取id的属性值</span><br>            String id = attribute.getValue();<br><br><br>            <span class="hljs-comment">//获取name标签</span><br>            <span class="hljs-comment">//element(&quot;标签名&quot;):获取调用者指定的子标签</span><br>            Element nameElement = element.element(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-comment">//获取这个标签的标签体内容</span><br>            String name = nameElement.getText();<br><br><br>            <span class="hljs-comment">//获取age标签</span><br>            Element ageElement = element.element(<span class="hljs-string">&quot;age&quot;</span>);<br>            <span class="hljs-comment">//获取age标签的标签体内容</span><br>            String age = ageElement.getText();<br><br><span class="hljs-comment">//            System.out.println(id);</span><br><span class="hljs-comment">//            System.out.println(name);</span><br><span class="hljs-comment">//            System.out.println(age);</span><br><br>            Student s = <span class="hljs-keyword">new</span> Student(id,name,Integer.parseInt(age));<br>            list.add(s);<br>        &#125;<br>        <span class="hljs-comment">//遍历操作</span><br>        <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-枚举"><a href="#7-枚举" class="headerlink" title="7.枚举:"></a>7.枚举:</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​        枚举是固定选项的一个结构,用来限制取值范围. </p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式:"></a>格式:</h3><p>​        </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举名 </span>&#123;<br>    选项一,选项二,选项三;<span class="hljs-comment">//后面没有代码时&quot; ; &quot;可以省,有则不能</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season</span> </span>&#123;<br>    SPRING,SUMMER,AUTUMN,WINTER;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><h4 id="1-每个枚举项都是枚举的一个对象"><a href="#1-每个枚举项都是枚举的一个对象" class="headerlink" title="1:每个枚举项都是枚举的一个对象."></a>1:每个枚举项都是枚举的一个对象.</h4><h4 id="2-使用枚举时-只能在他的选项中进行选择-不允许使用其他内容"><a href="#2-使用枚举时-只能在他的选项中进行选择-不允许使用其他内容" class="headerlink" title="2:使用枚举时,只能在他的选项中进行选择,不允许使用其他内容"></a>2:使用枚举时,只能在他的选项中进行选择,不允许使用其他内容</h4><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><h5 id="class-EnumDemo"><a href="#class-EnumDemo" class="headerlink" title="class EnumDemo"></a>class EnumDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnumDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.所有枚举类都是Enum的子类</span><br><span class="hljs-comment">        2.我们可以通过&quot;枚举类名.枚举项名称&quot;去访问指定的枚举项</span><br><span class="hljs-comment">        3.每一个枚举项其实就是该枚举的一个对象</span><br><span class="hljs-comment">        4.枚举也是一个类，也可以去定义成员变量</span><br><span class="hljs-comment">        5.枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，</span><br><span class="hljs-comment">          但是如果枚举类有其他的东西，这个分号就不能省略。建议不要省略</span><br><span class="hljs-comment">        6.枚举类可以有构造器，但必须是private的，它默认的也是private的。</span><br><span class="hljs-comment">          枚举项的用法比较特殊：枚举(&quot;&quot;);</span><br><span class="hljs-comment">        7.枚举类也可以有抽象方法，但是枚举项必须重写该方法</span><br><span class="hljs-comment">    */</span><br><br>        <span class="hljs-comment">//第二个特点的演示</span><br>        <span class="hljs-comment">//我们可以通过&quot;枚举类名.枚举项名称&quot;去访问指定的枚举项</span><br>        System.out.println(Season.SPRING);<br>        System.out.println(Season.SUMMER);<br>        System.out.println(Season.AUTUMN);<br>        System.out.println(Season.WINTER);<br><br>        <span class="hljs-comment">//第三个特点的演示</span><br>        <span class="hljs-comment">//每一个枚举项其实就是该枚举的一个对象</span><br>        Season spring = Season.SPRING;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="enum-Season"><a href="#enum-Season" class="headerlink" title="enum Season"></a>enum Season</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season</span> </span>&#123;<br><br>    SPRING(<span class="hljs-string">&quot;春&quot;</span>)&#123;<br><br>        <span class="hljs-comment">//如果枚举类中有抽象方法</span><br>        <span class="hljs-comment">//那么在枚举项中必须要全部重写</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-keyword">this</span>.name);<br>        &#125;<br><br>    &#125;,<br><br>    SUMMER(<span class="hljs-string">&quot;夏&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-keyword">this</span>.name);<br>        &#125;<br>    &#125;,<br><br>    AUTUMN(<span class="hljs-string">&quot;秋&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-keyword">this</span>.name);<br>        &#125;<br>    &#125;,<br><br>    WINTER(<span class="hljs-string">&quot;冬&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-keyword">this</span>.name);<br>        &#125;<br>    &#125;;<br><br><br>    <span class="hljs-keyword">public</span> String name;<br><br><br>    <span class="hljs-comment">//空参构造</span><br>    <span class="hljs-comment">//private Season()&#123;&#125;</span><br><br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Season</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><h5 id="class-EnumDemo-1"><a href="#class-EnumDemo-1" class="headerlink" title="class EnumDemo"></a>class EnumDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnumDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        String name() 获取枚举项的名称</span><br>        String name = Season.SPRING.name();<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        int ordinal() 返回枚举项在枚举类中的索引值</span><br>        <span class="hljs-keyword">int</span> index1 = Season.SPRING.ordinal();<br>        <span class="hljs-keyword">int</span> index2 = Season.SUMMER.ordinal();<br>        <span class="hljs-keyword">int</span> index3 = Season.AUTUMN.ordinal();<br>        <span class="hljs-keyword">int</span> index4 = Season.WINTER.ordinal();<br>        System.out.println(index1);<br>        System.out.println(index2);<br>        System.out.println(index3);<br>        System.out.println(index4);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        int compareTo(E o) 比较两个枚举项，返回的是索引值的差值</span><br>        <span class="hljs-keyword">int</span> result = Season.SPRING.compareTo(Season.WINTER);<br>        System.out.println(result);<span class="hljs-comment">//-3</span><br>        System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        String toString()   返回枚举常量的名称</span><br>        String s = Season.SPRING.toString();<br>        System.out.println(s);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        static &lt;T&gt; T valueOf(Class&lt;T&gt; type,String name)</span><br><span class="hljs-comment">//        获取指定枚举类中的指定名称的枚举值</span><br>        Season spring = Enum.valueOf(Season.class, <span class="hljs-string">&quot;SPRING&quot;</span>);<br>        System.out.println(spring);<br>        System.out.println(Season.SPRING == spring);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><br><span class="hljs-comment">//        values()       获得所有的枚举项</span><br>        Season[] values = Season.values();<br>        <span class="hljs-keyword">for</span> (Season value : values) &#123;<br>            System.out.println(value);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="enum-Season-1"><a href="#enum-Season-1" class="headerlink" title="enum Season"></a>enum Season</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season</span> </span>&#123;<br>    SPRING,SUMMER,AUTUMN,WINTER;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="8-注解"><a href="#8-注解" class="headerlink" title="8.注解:"></a>8.注解:</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><h4 id="对代码进行解释说明性的内容"><a href="#对代码进行解释说明性的内容" class="headerlink" title="对代码进行解释说明性的内容"></a>对代码进行解释说明性的内容</h4><h4 id="该内容是给虚拟机看的"><a href="#该内容是给虚拟机看的" class="headerlink" title="该内容是给虚拟机看的."></a>该内容是给虚拟机看的.</h4><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解:"></a>常见注解:</h3><h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><p>​            //方法重写</p><h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><p>​            //方法已过时<br>​            //仅仅会再调用方法时,方法上出现横线</p><h4 id="SuppressWarnings-“all”"><a href="#SuppressWarnings-“all”" class="headerlink" title="@SuppressWarnings(“all”)"></a>@SuppressWarnings(“all”)</h4><p>​            //忽略所有的警告</p><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h5 id="class-Fu"><a href="#class-Fu" class="headerlink" title="class Fu"></a>class Fu</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Zi"><a href="#class-Zi" class="headerlink" title="class Zi"></a>class Zi</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(value = &quot;all&quot;)</span><br><span class="hljs-comment">//表示压制了本类中所有的警告</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//告诉我们得编译器这个方法是重写了父类中的show方法</span><br>                <span class="hljs-comment">//那么我们在进行方法定义的时候，就需要按照重写方法的要求进行方法定义。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//表示这是一个过时的方法</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;method.......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(value = &quot;all&quot;)</span><br>    <span class="hljs-comment">//表示压制本方法中所有的警告</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//System.out.println(a);</span><br>        <span class="hljs-comment">//System.out.println(b);</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解:"></a>元注解:</h3><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​            修饰注解的注解</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>​                    //指定注解使用位置<br>​                    //默认可以使用在(类,方法,成员变量)上</p><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><h6 id="ElementType-TYPE"><a href="#ElementType-TYPE" class="headerlink" title="ElementType.TYPE"></a>ElementType.TYPE</h6><p>​                         //类</p><h6 id="ElementType-FIELD"><a href="#ElementType-FIELD" class="headerlink" title="ElementType.FIELD"></a>ElementType.FIELD</h6><p>​                         //成员变量</p><h6 id="ElementType-METHOD"><a href="#ElementType-METHOD" class="headerlink" title="ElementType.METHOD"></a>ElementType.METHOD</h6><p>​                         //成员方法</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>​                     //指定注解的存活时间<br>​                    //默认只存活在源码中(编译后消失)</p><h5 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h5><h6 id="RetentionPolicy-SOURCE"><a href="#RetentionPolicy-SOURCE" class="headerlink" title="RetentionPolicy.SOURCE"></a>RetentionPolicy.SOURCE</h6><p>​                        //只存在于源代码中</p><h6 id="RetentionPolicy-CLASS"><a href="#RetentionPolicy-CLASS" class="headerlink" title="RetentionPolicy.CLASS"></a>RetentionPolicy.CLASS</h6><p>​                        //存在于源代码中和字节码文件中</p><h6 id="RetentionPolicy-RUNTIME"><a href="#RetentionPolicy-RUNTIME" class="headerlink" title="RetentionPolicy.RUNTIME"></a>RetentionPolicy.RUNTIME</h6><p>​                         //直到运行的时候还存在(永远都在)</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><h5 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h5><p>​                     //指定该注解是否能被子类继承</p><h5 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h5><h6 id="Anno1"><a href="#Anno1" class="headerlink" title="Anno1"></a>Anno1</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Anno1 &#123;<br><br>    <span class="hljs-comment">//定义一个基本类型的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span> <span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 23</span>;<br><br>    <span class="hljs-comment">//定义一个String类型的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;itheima&quot;</span>;<br><br>    <span class="hljs-comment">//定义一个Class类型的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Class <span class="hljs-title">clazz</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Anno2.class</span>;<br><br>    <span class="hljs-comment">//定义一个注解类型的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Anno2 <span class="hljs-title">anno</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> @Anno2</span>;<br><br>    <span class="hljs-comment">//定义一个枚举类型的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Season <span class="hljs-title">season</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Season.SPRING</span>;<br><br>    <span class="hljs-comment">//以上类型的一维数组</span><br>    <span class="hljs-comment">//int数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] arr() <span class="hljs-keyword">default</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>    <span class="hljs-comment">//枚举数组</span><br>    <span class="hljs-keyword">public</span> Season[] seasons() <span class="hljs-keyword">default</span> &#123;Season.SPRING,Season.SUMMER&#125;;<br><br><br>    <span class="hljs-comment">//value。后期我们在使用注解的时候，如果我们只需要给注解的balue属性赋值。</span><br>    <span class="hljs-comment">//那么value就可以省略</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="Anno2"><a href="#Anno2" class="headerlink" title="Anno2"></a>Anno2</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Anno2 &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-AnnoDemo"><a href="#class-AnnoDemo" class="headerlink" title="class AnnoDemo"></a>class AnnoDemo</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在使用注解的时候如果注解里面的属性没有指定默认值。</span><br><span class="hljs-comment">//那么我们就需要手动给出注解属性的设置值。</span><br><span class="hljs-comment">//@Anno1(name = &quot;itheima&quot;)</span><br><span class="hljs-meta">@Anno1(&quot;abc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnoDemo</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="enum-Season-2"><a href="#enum-Season-2" class="headerlink" title="enum Season"></a>enum Season</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season</span> </span>&#123;<br>    SPRING,SUMMER,AUTUMN,WINTER;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="9-自定义注解-了解"><a href="#9-自定义注解-了解" class="headerlink" title="9.自定义注解(了解)"></a>9.自定义注解(了解)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><h4 id="格式-3"><a href="#格式-3" class="headerlink" title="格式:"></a>格式:</h4><p>​            </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> 注解名 &#123;<br>    <span class="hljs-keyword">public</span> 数据类型 属性名() <span class="hljs-keyword">default</span>  默认值;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h5 id="1-public可以省略"><a href="#1-public可以省略" class="headerlink" title="1:public可以省略."></a>1:public可以省略.</h5><h5 id="2-”default-默认值”可以省略"><a href="#2-”default-默认值”可以省略" class="headerlink" title="2:”default 默认值”可以省略"></a>2:”default 默认值”可以省略</h5><h5 id="3-数据类型可以是”基本数据类型-String-Class-枚举-注解”-或者是”这几种类型的一维数组”"><a href="#3-数据类型可以是”基本数据类型-String-Class-枚举-注解”-或者是”这几种类型的一维数组”" class="headerlink" title="3:数据类型可以是”基本数据类型,String,Class,枚举,注解”,或者是”这几种类型的一维数组”"></a>3:数据类型可以是”基本数据类型,String,Class,枚举,注解”,或者是”这几种类型的一维数组”</h5><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><h5 id="注解名-属性名-属性值-属性名-属性值…"><a href="#注解名-属性名-属性值-属性名-属性值…" class="headerlink" title="@注解名(属性名=属性值,属性名=属性值…)"></a>@注解名(属性名=属性值,属性名=属性值…)</h5><p>​            //在类上/方法上/成员变量上使用</p><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意:"></a>注意:</h4><h5 id="1-注解在使用的时候-必须保证”注解中的每个属性都有值”"><a href="#1-注解在使用的时候-必须保证”注解中的每个属性都有值”" class="headerlink" title="1:注解在使用的时候,必须保证”注解中的每个属性都有值”"></a>1:注解在使用的时候,必须保证”注解中的每个属性都有值”</h5><h5 id="2-如果属性有默认值-可以赋值-也可以不赋值-但如果没有默认值-则使用时必须赋值"><a href="#2-如果属性有默认值-可以赋值-也可以不赋值-但如果没有默认值-则使用时必须赋值" class="headerlink" title="2:如果属性有默认值,可以赋值,也可以不赋值,但如果没有默认值,则使用时必须赋值"></a>2:如果属性有默认值,可以赋值,也可以不赋值,但如果没有默认值,则使用时必须赋值</h5><h5 id="3-如果使用注解只需要给value属性赋值-则赋值时-value属性名可以省略"><a href="#3-如果使用注解只需要给value属性赋值-则赋值时-value属性名可以省略" class="headerlink" title="3:如果使用注解只需要给value属性赋值,则赋值时,value属性名可以省略."></a>3:如果使用注解只需要给value属性赋值,则赋值时,value属性名可以省略.</h5><h5 id="4-如果赋值的属性是数组-且赋值时之赋值了一个值-则赋值时的-可以省略"><a href="#4-如果赋值的属性是数组-且赋值时之赋值了一个值-则赋值时的-可以省略" class="headerlink" title="4:如果赋值的属性是数组,且赋值时之赋值了一个值,则赋值时的{}可以省略"></a>4:如果赋值的属性是数组,且赋值时之赋值了一个值,则赋值时的{}可以省略</h5><h5 id="5-如果注解的所有属性都有默认值-则使用注解时-可以不带"><a href="#5-如果注解的所有属性都有默认值-则使用注解时-可以不带" class="headerlink" title="5:如果注解的所有属性都有默认值,则使用注解时,可以不带()"></a>5:如果注解的所有属性都有默认值,则使用注解时,可以不带()</h5><h3 id="意义"><a href="#意义" class="headerlink" title="意义:"></a>意义:</h3><h4 id="自定义注解本身没有意义"><a href="#自定义注解本身没有意义" class="headerlink" title="自定义注解本身没有意义,"></a>自定义注解本身没有意义,</h4><h4 id="他的意义在于后续代码为该注解赋予了什么特殊功能"><a href="#他的意义在于后续代码为该注解赋予了什么特殊功能" class="headerlink" title="他的意义在于后续代码为该注解赋予了什么特殊功能."></a>他的意义在于后续代码为该注解赋予了什么特殊功能.</h4><h3 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h3><h4 id="interface-Test"><a href="#interface-Test" class="headerlink" title="@interface Test"></a>@interface Test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-comment">//表示Test这个注解的存活时间</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-UseTest"><a href="#class-UseTest" class="headerlink" title="class UseTest"></a>class UseTest</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UseTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//没有使用Test注解</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UseTest....show....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//使用Test注解</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UseTest....method....&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//没有使用Test注解</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UseTest....function....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-AnnoDemo-1"><a href="#class-AnnoDemo-1" class="headerlink" title="class AnnoDemo"></a>class AnnoDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnoDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//1.通过反射获取UseTest类的字节码文件对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myanno3.UseTest&quot;</span>);<br><br>        <span class="hljs-comment">//创建对象</span><br>        UseTest useTest = (UseTest) clazz.newInstance();<br><br><br>        <span class="hljs-comment">//2.通过反射获取这个类里面所有的方法对象</span><br>        Method[] methods = clazz.getDeclaredMethods();<br><br><br>        <span class="hljs-comment">//3.遍历数组，得到每一个方法对象</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            <span class="hljs-comment">//method依次表示每一个方法对象。</span><br>            <span class="hljs-comment">//isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</span><br>            <span class="hljs-comment">//判断当前方法上是否有指定的注解。</span><br>            <span class="hljs-comment">//参数：注解的字节码文件对象</span><br>            <span class="hljs-comment">//返回值：布尔结果。  true 存在  false 不存在</span><br>            <span class="hljs-keyword">if</span>(method.isAnnotationPresent(Test.class))&#123;<br>                method.invoke(useTest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h3><h4 id="interface-Anno"><a href="#interface-Anno" class="headerlink" title="@interface Anno"></a>@interface Anno</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD,ElementType.TYPE,ElementType.METHOD&#125;)</span>  <span class="hljs-comment">//指定注解使用的位置（成员变量，类，方法）</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//指定该注解的存活时间</span><br><span class="hljs-comment">//@Inherited //指定该注解可以被继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Anno &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;student.......show..........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Person"><a href="#class-Person" class="headerlink" title="class Person"></a>class Person</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Anno</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-StudentDemo"><a href="#class-StudentDemo" class="headerlink" title="class StudentDemo"></a>class StudentDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//获取到Student类的字节码文件对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myanno4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//获取注解。</span><br>        <span class="hljs-keyword">boolean</span> result = clazz.isAnnotationPresent(Anno.class);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XML</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day17 反射</title>
    <link href="/2017/04/02/SAd17/"/>
    <url>/2017/04/02/SAd17/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><span id="more"></span><h2 id="1-类的加载器-了解"><a href="#1-类的加载器-了解" class="headerlink" title="1.类的加载器(了解)"></a>1.类的加载器(了解)</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>​        负责将.class文件加载到内存中，并为之生成对应的 java.lang.Class 对象。        </p><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><h4 id="1-BootstrapClassLoader"><a href="#1-BootstrapClassLoader" class="headerlink" title="1:BootstrapClassLoader"></a>1:BootstrapClassLoader</h4><h5 id="1-启动类加载器-内置类加载器"><a href="#1-启动类加载器-内置类加载器" class="headerlink" title="1.启动类加载器/内置类加载器"></a>1.启动类加载器/内置类加载器</h5><h5 id="2-负责加载-JAVA-HOME中jre-lib-rt-jar里所有的class"><a href="#2-负责加载-JAVA-HOME中jre-lib-rt-jar里所有的class" class="headerlink" title="2.负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class."></a>2.负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class.</h5><h5 id="3-JDK中的默认有的类，都由该加载器加载。"><a href="#3-JDK中的默认有的类，都由该加载器加载。" class="headerlink" title="3.JDK中的默认有的类，都由该加载器加载。"></a>3.JDK中的默认有的类，都由该加载器加载。</h5><h5 id="4-由C-实现，程序员无法获取也无法操作。"><a href="#4-由C-实现，程序员无法获取也无法操作。" class="headerlink" title="4.由C++实现，程序员无法获取也无法操作。"></a>4.由C++实现，程序员无法获取也无法操作。</h5><h4 id="2-ExtensionClassLoader"><a href="#2-ExtensionClassLoader" class="headerlink" title="2:ExtensionClassLoader"></a>2:ExtensionClassLoader</h4><h5 id="平台类加载器"><a href="#平台类加载器" class="headerlink" title="平台类加载器"></a>平台类加载器</h5><h5 id="负责加载java平台中扩展功能的一些jar包"><a href="#负责加载java平台中扩展功能的一些jar包" class="headerlink" title="负责加载java平台中扩展功能的一些jar包."></a>负责加载java平台中扩展功能的一些jar包.</h5><h5 id="包括-JAVA-HOME中“jre-lib-jar”或-Djava-ext-dirs指定目录下的jar包"><a href="#包括-JAVA-HOME中“jre-lib-jar”或-Djava-ext-dirs指定目录下的jar包" class="headerlink" title="包括$JAVA_HOME中“jre\lib*.jar”或-Djava.ext.dirs指定目录下的jar包"></a>包括$JAVA_HOME中“jre\lib*.jar”或-Djava.ext.dirs指定目录下的jar包</h5><h4 id="3-SystemClassLoader"><a href="#3-SystemClassLoader" class="headerlink" title="3:SystemClassLoader"></a>3:SystemClassLoader</h4><h5 id="应用类加载器-也叫AppClassLoader"><a href="#应用类加载器-也叫AppClassLoader" class="headerlink" title="应用类加载器, 也叫AppClassLoader"></a>应用类加载器, 也叫AppClassLoader</h5><h5 id="负责加载classpath中指定的jar包及目录中class"><a href="#负责加载classpath中指定的jar包及目录中class" class="headerlink" title="负责加载classpath中指定的jar包及目录中class."></a>负责加载classpath中指定的jar包及目录中class.</h5><h5 id="就是我们自己写的类都是由该加载器加载"><a href="#就是我们自己写的类都是由该加载器加载" class="headerlink" title="就是我们自己写的类都是由该加载器加载"></a>就是我们自己写的类都是由该加载器加载</h5><h3 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><h5 id="InputStream-is-当前类名-class-getClassLoader-getResourceAsStream-“文件名”"><a href="#InputStream-is-当前类名-class-getClassLoader-getResourceAsStream-“文件名”" class="headerlink" title="InputStream is = 当前类名.class.getClassLoader().getResourceAsStream(“文件名”);"></a>InputStream is = 当前类名.class.getClassLoader().getResourceAsStream(“文件名”);</h5><h5 id="InputStream-is-ClassLoader-getSystemClassLoader-getResourceAsStream-“文件名”"><a href="#InputStream-is-ClassLoader-getSystemClassLoader-getResourceAsStream-“文件名”" class="headerlink" title="InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(“文件名”);"></a>InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(“文件名”);</h5><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><h5 id="配置文件必须放在src根目录下"><a href="#配置文件必须放在src根目录下" class="headerlink" title="配置文件必须放在src根目录下."></a>配置文件必须放在src根目录下.</h5><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1获取类加载器"><a href="#test1获取类加载器" class="headerlink" title="test1获取类加载器"></a>test1获取类加载器</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  获取类加载器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//获取系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//获取系统类加载器的父加载器 --- 平台类加载器</span><br>        ClassLoader classLoader1 = systemClassLoader.getParent();<br><br>        <span class="hljs-comment">//获取平台类加载器的父加载器 --- 启动类加载器</span><br>        ClassLoader classLoader2 = classLoader1.getParent();<br><br>        System.out.println(<span class="hljs-string">&quot;系统类加载器&quot;</span> + systemClassLoader);<br>        System.out.println(<span class="hljs-string">&quot;平台类加载器&quot;</span> + classLoader1);<br>        System.out.println(<span class="hljs-string">&quot;启动类加载器&quot;</span> + classLoader2);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2利用加载器去加载一个指定的文件"><a href="#test2利用加载器去加载一个指定的文件" class="headerlink" title="test2利用加载器去加载一个指定的文件"></a>test2利用加载器去加载一个指定的文件</h4><h5 id="测试类ClassLoaderDemo2"><a href="#测试类ClassLoaderDemo2" class="headerlink" title="测试类ClassLoaderDemo2"></a>测试类ClassLoaderDemo2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span><br>        <span class="hljs-comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span><br><br>        <span class="hljs-comment">//获取系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//利用加载器去加载一个指定的文件</span><br>        <span class="hljs-comment">//参数：文件的路径</span><br>        <span class="hljs-comment">//返回值：字节流。</span><br>        InputStream is = systemClassLoader.getResourceAsStream(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(is);<br><br>        System.out.println(prop);<br><br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="prop-properties"><a href="#prop-properties" class="headerlink" title="prop.properties"></a>prop.properties</h5><p>指定的文件,被加载的文件,可以是配置文件也可以是图片等,放在src根目录下,与类同级</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">zhangsan </span><br><span class="hljs-attr">age</span>=<span class="hljs-string">13</span><br></code></pre></div></td></tr></table></figure><h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>​        所谓的反射，指的是，程序在运行过程中，获“类的字节码”文件，再从“类的字节码”中，获取类的“成员变量”，“成员方法”，“构造方法”，并且使用他们，这种现象就叫做反射。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li><div class="hljs code-wrapper"><pre><code>    1.先获取“类的字节码”</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>    2.从“类的字节码”获取“成员变量”，“成员方法”，“构造方法”</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>     3.使用这些“成员变量”，“成员方法”，“构造方法”</code></pre></div></li></ul><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="ReflectDemo1"><a href="#ReflectDemo1" class="headerlink" title="ReflectDemo1"></a>ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        <span class="hljs-comment">//获取系统类加载器，加载prop.properties文件</span><br>        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        <span class="hljs-comment">//创建Properties集合</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//将文件中的数据读取到集合当中</span><br>        prop.load(is);<br>        is.close();<br><br>        <span class="hljs-comment">//--------下面的代码就是利用反射创建对象并调用方法---------------------</span><br><br>        <span class="hljs-comment">//获取字节码文件对象</span><br>        Class clazz = Class.forName(prop.getProperty(<span class="hljs-string">&quot;className&quot;</span>));<br>        <span class="hljs-comment">//获取构造器对象</span><br>        Constructor constructor = clazz.getConstructor();<br>        <span class="hljs-comment">//利用构造器对象创建一个对象</span><br>        Object o = constructor.newInstance();<br>        <span class="hljs-comment">//获取方法对象</span><br>        Method method = clazz.getMethod(prop.getProperty(<span class="hljs-string">&quot;methodName&quot;</span>));<br>        <span class="hljs-comment">//运行方法</span><br>        method.invoke(o);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Teacher"><a href="#class-Teacher" class="headerlink" title="class Teacher"></a>class Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师在上课&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Worker"><a href="#class-Worker" class="headerlink" title="class Worker"></a>class Worker</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;工人在工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Worker&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="prop-properties-1"><a href="#prop-properties-1" class="headerlink" title="prop.properties"></a>prop.properties</h5><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">className</span>=<span class="hljs-string">com.itheima.myreflect1.Worker</span><br><span class="hljs-attr">methodName</span>=<span class="hljs-string">work</span><br></code></pre></div></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><h4 id="1-可以越过访问权限。"><a href="#1-可以越过访问权限。" class="headerlink" title="1.可以越过访问权限。"></a>1.可以越过访问权限。</h4><h4 id="2-可以提高代码的“可扩展性”"><a href="#2-可以提高代码的“可扩展性”" class="headerlink" title="2.可以提高代码的“可扩展性”"></a>2.可以提高代码的“可扩展性”</h4><h4 id="3-是很多框架的底层实现。"><a href="#3-是很多框架的底层实现。" class="headerlink" title="3.是很多框架的底层实现。"></a>3.是很多框架的底层实现。</h4><h2 id="3-反射-前期操作"><a href="#3-反射-前期操作" class="headerlink" title="3.反射-前期操作"></a>3.反射-前期操作</h2><h3 id="获取类的字节码文件-获取class对象的三种方式"><a href="#获取类的字节码文件-获取class对象的三种方式" class="headerlink" title="获取类的字节码文件(获取class对象的三种方式)"></a>获取类的字节码文件(获取class对象的三种方式)</h3><h4 id="1-Class-clazz-Class-forName-“类的全名称”"><a href="#1-Class-clazz-Class-forName-“类的全名称”" class="headerlink" title="1.Class clazz = Class.forName(“类的全名称”);"></a>1.Class clazz = Class.forName(“类的全名称”);</h4><h4 id="2-Class-clazz-类名-class"><a href="#2-Class-clazz-类名-class" class="headerlink" title="2.Class clazz = 类名.class;"></a>2.Class clazz = 类名.class;</h4><h4 id="3-Class-clazz-对象-getClass"><a href="#3-Class-clazz-对象-getClass" class="headerlink" title="3.Class clazz = 对象.getClass();"></a>3.Class clazz = 对象.getClass();</h4><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><h5 id="class-ReflectDemo1"><a href="#class-ReflectDemo1" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取class对象的三种方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.Class类中的静态方法forName(&quot;全类名&quot;)</span><br>            <span class="hljs-comment">//全类名:包名 + 类名</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect2.Student&quot;</span>);<br>        System.out.println(clazz);<br><br>        <span class="hljs-comment">//2.通过class属性来获取</span><br>        Class clazz2 = Student.class;<br>        System.out.println(clazz2);<br><br>        <span class="hljs-comment">//3.利用对象的getClass方法来获取class对象</span><br>        <span class="hljs-comment">//getClass方法是定义在Object类中.</span><br>        Student s = <span class="hljs-keyword">new</span> Student();<br>        Class clazz3 = s.getClass();<br>        System.out.println(clazz3);<br><br>        System.out.println(clazz == clazz2);<br>        System.out.println(clazz2 == clazz3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="破解权限"><a href="#破解权限" class="headerlink" title="破解权限"></a>破解权限</h3><h4 id="void-setAccessible-boolean-flag"><a href="#void-setAccessible-boolean-flag" class="headerlink" title="void setAccessible(boolean flag);"></a>void setAccessible(boolean flag);</h4><p>​         //如果flag是true，则暴力破解，越过权限。<br>​        //构造方法，成员变量，成员方法三者均可使用</p><h2 id="4-反射-构造方法"><a href="#4-反射-构造方法" class="headerlink" title="4.反射-构造方法"></a>4.反射-构造方法</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法完成"><a href="#通过Class类的方法完成" class="headerlink" title="通过Class类的方法完成"></a>通过Class类的方法完成</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Constructor[] getConstructors();</td><td align="center">//获取所有的public修饰的构造方法</td></tr><tr><td align="center">Constructor[] getDeclaredConstructors();</td><td align="center">//获取所有的构造方法(包含private)</td></tr><tr><td align="center">Constructor getConstructor(Class… parameterTypes);</td><td align="center">//获取指定的public修饰的构造方法</td></tr><tr><td align="center">Constructor getDeclaredConstructor(Class… parameterTypes);</td><td align="center">//获取指定的构造方法(包含private)</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><h4 id="通过Constructor类的方法"><a href="#通过Constructor类的方法" class="headerlink" title="通过Constructor类的方法"></a>通过Constructor类的方法</h4><h5 id="T-newInstance-Object…-initargs"><a href="#T-newInstance-Object…-initargs" class="headerlink" title="T  newInstance(Object… initargs)"></a>T  newInstance(Object… initargs)</h5><p>​            通过构造方法创建对象<br>​            initargs: 构造方法的参数</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="通过无参构造方法创建对象"><a href="#通过无参构造方法创建对象" class="headerlink" title="通过无参构造方法创建对象"></a>通过无参构造方法创建对象</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//通过无参构造方法创建对象</span><br><span class="hljs-comment">//1.获取无参构造方法</span><br>Constructor c=clazz.getConstructor();<br><span class="hljs-comment">//2.通过无参构造方法创建一个对象</span><br>Object obj = c.newInstance();<br></code></pre></div></td></tr></table></figure><h4 id="通过有参构造方法创建对象"><a href="#通过有参构造方法创建对象" class="headerlink" title="通过有参构造方法创建对象"></a>通过有参构造方法创建对象</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//通过有参构造方法创建对象</span><br><span class="hljs-comment">//1.获取有参构造方法</span><br>Constructor c=clazz.getConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br><span class="hljs-comment">//2.通过有参构造方法创建一个对象,构造方法参数是&quot;张三&quot;,18</span><br>Object obj = c.newInstance(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<br></code></pre></div></td></tr></table></figure><h3 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><h5 id="class-ReflectDemo1-1"><a href="#class-ReflectDemo1-1" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Constructor对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                      返回单个构造方法对象</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        Constructor constructor = clazz.getDeclaredConstructor(String.class);<br>        System.out.println(constructor);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                      返回单个公共构造方法对象</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        <span class="hljs-comment">//小括号中,一定要跟构造方法的形参保持一致.</span><br>        Constructor constructor1 = clazz.getConstructor();<br>        System.out.println(constructor1);<br><br>        Constructor constructor2 = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br>        System.out.println(constructor2);<br><br>        <span class="hljs-comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span><br>        Constructor constructor3 = clazz.getConstructor(<span class="hljs-keyword">int</span>.class);<br>        System.out.println(constructor3);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;?&gt;[] getDeclaredConstructors()：</span><br><span class="hljs-comment">//                                      返回所有构造方法对象的数组</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        Constructor[] constructors = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Constructor&lt;?&gt;[] getConstructors()：</span><br><span class="hljs-comment">//                                      返回所有公共构造方法对象的数组</span><br>        <span class="hljs-comment">//1.获取Class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br>        Constructor[] constructors = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="ReflectDemo2"><a href="#ReflectDemo2" class="headerlink" title="ReflectDemo2"></a>ReflectDemo2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Constructor对象并创建对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        <span class="hljs-comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//获取一个私有的构造方法并创建对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取一个私有化的构造方法.</span><br>        Constructor constructor = clazz.getDeclaredConstructor(String.class);<br><br>        <span class="hljs-comment">//被private修饰的成员,不能直接使用的</span><br>        <span class="hljs-comment">//如果用反射强行获取并使用,需要临时取消访问检查</span><br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//3.直接创建对象</span><br>        Student student = (Student) constructor.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//简写格式</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span><br>        Student student = (Student) clazz.newInstance();<span class="hljs-comment">//这个方法现在已经过时了,了解一下</span><br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        Constructor constructor = clazz.getConstructor();<br><br>        <span class="hljs-comment">//3.利用空参来创建Student的对象</span><br>        Student student = (Student) constructor.newInstance();<br><br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect3.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        Constructor constructor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br><br>        <span class="hljs-comment">//3.利用newInstance创建Student的对象</span><br>        Student student = (Student) constructor.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br><br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-comment">//私有的有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name的值为:&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;private...Student...有参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的无参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;public...Student...无参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name的值为:&quot;</span> + name + <span class="hljs-string">&quot;age的值为:&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;public...Student...有参构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-反射-成员变量"><a href="#5-反射-成员变量" class="headerlink" title="5.反射-成员变量"></a>5.反射-成员变量</h2><h3 id="获取-1"><a href="#获取-1" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法"><a href="#通过Class类的方法" class="headerlink" title="通过Class类的方法"></a>通过Class类的方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Field[] getFields();</td><td align="center">//获取所有的public修饰的成员变量</td></tr><tr><td align="center">Field getField(String name);</td><td align="center">//获取指定的public修饰的成员变量</td></tr><tr><td align="center">Field[] getDeclaredFields();</td><td align="center">//获取所有的成员变量(包含private)</td></tr><tr><td align="center">Field getDeclaredField(String name);</td><td align="center">//获取指定的成员变量(包含private)</td></tr></tbody></table><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Object get(Object obj);</td><td align="center">//获取”obj对象”中”当前Field成员变量”的值;</td></tr><tr><td align="center">void set(Object obj, Object value);</td><td align="center">//把”obj对象”中”当前Field成员变量”的值设置为”value”</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//创建一个对象</span><br>Constructor c=clazz.getConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br><span class="hljs-comment">//2.通过有参构造方法创建一个对象,构造方法参数是&quot;张三&quot;,18</span><br>Object obj = c.newInstance(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-comment">//获取成员变量name</span><br>Field f = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//获取obj中成员变量name的值</span><br>Object nameValue = f.get(obj);<br><span class="hljs-comment">//把obj中成员变量name的值设置为张三丰</span><br>f.set(obj,<span class="hljs-string">&quot;张三丰&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h3><h4 id="class-ReflectDemo1-2"><a href="#class-ReflectDemo1-2" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Field对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>       <span class="hljs-comment">// method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//        Field getDeclaredField(String name)：返回单个成员变量对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取money成员变量</span><br>        Field field = clazz.getDeclaredField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(field);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//        Field getField(String name)：返回单个公共成员变量对象</span><br>        <span class="hljs-comment">//想要获取的成员变量必须是真实存在的</span><br>        <span class="hljs-comment">//且必须是public修饰的.</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name这个成员变量</span><br>        <span class="hljs-comment">//Field field = clazz.getField(&quot;name&quot;);</span><br>        <span class="hljs-comment">//Field field = clazz.getField(&quot;name1&quot;);</span><br>        Field field = clazz.getField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(field);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Field[] getDeclaredFields()：返回所有成员变量对象的数组</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取所有的Field对象</span><br>        Field[] fields = clazz.getDeclaredFields();<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Field[] getFields()：返回所有公共成员变量对象的数组</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取Field对象.</span><br>        Field[] fields = clazz.getFields();<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-ReflectDemo2"><a href="#class-ReflectDemo2" class="headerlink" title="class ReflectDemo2"></a>class ReflectDemo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用Field对象,获取值或者修改值</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;<br><span class="hljs-comment">//        Object get(Object obj) 返回由该 Field表示的字段在指定对象上的值。</span><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取成员变量Field的对象</span><br>        Field field = clazz.getDeclaredField(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//3.取消一下访问检查</span><br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//4.调用get方法来获取值</span><br>        <span class="hljs-comment">//4.1创建一个对象</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//4.2获取指定对象的money的值</span><br>        Object o = field.get(student);<br><br>        <span class="hljs-comment">//5.打印一下</span><br>        System.out.println(o);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-comment">//        void set(Object obj, Object value)：给obj对象的成员变量赋值为value</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect4.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name这个Field对象</span><br>        Field field = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//3.利用set方法进行赋值.</span><br>        <span class="hljs-comment">//3.1先创建一个Student对象</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//3.2有了对象才可以给指定对象进行赋值</span><br>        field.set(student,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Student-3"><a href="#class-Student-3" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String gender;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">300</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-反射-成员方法"><a href="#6-反射-成员方法" class="headerlink" title="6.反射-成员方法"></a>6.反射-成员方法</h2><h3 id="获取-2"><a href="#获取-2" class="headerlink" title="获取:"></a>获取:</h3><h4 id="通过Class类的方法-1"><a href="#通过Class类的方法-1" class="headerlink" title="通过Class类的方法"></a>通过Class类的方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Method[] getMethods()</td><td align="center">//得到所有的public修饰的成员方法</td></tr><tr><td align="center">Method getMethod(String name, Class… parameterTypes)</td><td align="center">//得到指定的public修饰的成员方法</td></tr><tr><td align="center">Method[] getDeclaredMethods()</td><td align="center">//得到所有的成员方法(包含私有)</td></tr><tr><td align="center">Method getDeclaredMethod(String name, Class… parameterTypes)</td><td align="center">//得到指定的成员方法(包含私有)</td></tr></tbody></table><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用:"></a>使用:</h3><h4 id="通过Method类的方法"><a href="#通过Method类的方法" class="headerlink" title="通过Method类的方法"></a>通过Method类的方法</h4><h5 id="Object-invoke-Object-obj-Object…-args"><a href="#Object-invoke-Object-obj-Object…-args" class="headerlink" title="Object invoke(Object obj, Object… args)"></a>Object invoke(Object obj, Object… args)</h5><h6 id="通过obj对象-调用当前Method方法"><a href="#通过obj对象-调用当前Method方法" class="headerlink" title="通过obj对象, 调用当前Method方法"></a>通过obj对象, 调用当前Method方法</h6><h6 id="args是调用方法时-方法的参数"><a href="#args是调用方法时-方法的参数" class="headerlink" title="args是调用方法时, 方法的参数"></a>args是调用方法时, 方法的参数</h6><h6 id="相当于-obj-方法-args"><a href="#相当于-obj-方法-args" class="headerlink" title="相当于 obj.方法(args)"></a>相当于 obj.方法(args)</h6><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取学生类的字节码文件</span><br>Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><span class="hljs-comment">//获取学生类的对象,因为有了学生类的对象之后才能操作方法</span><br>Object stu = clazz.newInstance();<br><span class="hljs-comment">//获取成员方法</span><br><span class="hljs-comment">//获取名字叫做getName的无参的方法</span><br>Method getName = clazz.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br><span class="hljs-comment">//让stu对象调用getName方法</span><br>getName.invoke(stu);<br><span class="hljs-comment">//获取名字是setName的有参的方法,参数只有一个,参数类型是String</span><br>Method setName = clazz.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br><span class="hljs-comment">//让stu对象调用setName方法(该方法有返回值就接收,没有就不管)</span><br>setName.invoke(stu);<br></code></pre></div></td></tr></table></figure><h3 id="test-5"><a href="#test-5" class="headerlink" title="test"></a>test</h3><h4 id="class-ReflectDemo1-3"><a href="#class-ReflectDemo1-3" class="headerlink" title="class ReflectDemo1"></a>class ReflectDemo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Method对象</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4();</span><br>        <span class="hljs-comment">//method5();</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：</span><br><span class="hljs-comment">//                                返回单个成员方法对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取一个成员方法show</span><br>        Method method = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取一个有形参的方法function2</span><br>        Method method = clazz.getMethod(<span class="hljs-string">&quot;function2&quot;</span>, String.class);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//        Method getMethod(String name, Class&lt;?&gt;... parameterTypes) ：</span><br><span class="hljs-comment">//                                返回单个公共成员方法对象</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取成员方法function1</span><br>        Method method1 = clazz.getMethod(<span class="hljs-string">&quot;function1&quot;</span>);<br>        <span class="hljs-comment">//3.打印一下</span><br>        System.out.println(method1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Method[] getDeclaredMethods()：</span><br><span class="hljs-comment">//                                返回所有成员方法对象的数组，不包括继承的</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取Method对象</span><br>        Method[] methods = clazz.getDeclaredMethods();<br>        <span class="hljs-comment">//3.遍历一下数组</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//        Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</span><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取成员方法对象</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-ReflectDemo2-1"><a href="#class-ReflectDemo2-1" class="headerlink" title="class ReflectDemo2"></a>class ReflectDemo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Method对象并运行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br><span class="hljs-comment">//        Object invoke(Object obj, Object... args)：运行方法</span><br><span class="hljs-comment">//        参数一：用obj对象调用该方法</span><br><span class="hljs-comment">//        参数二：调用方法的传递的参数（如果没有就不写）</span><br><span class="hljs-comment">//        返回值：方法的返回值（如果没有就不写）</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect5.Student&quot;</span>);<br>        <span class="hljs-comment">//2.获取里面的Method对象  function4</span><br>        Method method = clazz.getMethod(<span class="hljs-string">&quot;function4&quot;</span>, String.class);<br>        <span class="hljs-comment">//3.运行function4方法就可以了</span><br>        <span class="hljs-comment">//3.1创建一个Student对象,当做方法的调用者</span><br>        Student student = (Student) clazz.newInstance();<br>        <span class="hljs-comment">//3.2运行方法</span><br>        Object result = method.invoke(student, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-comment">//4.打印一下返回值</span><br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Student-4"><a href="#class-Student-4" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-comment">//私有的，无参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;私有的show方法，无参无返回值&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，无参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function1方法，无参无返回值&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，有参无返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function2</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function2方法，有参无返回值,参数为&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，无参有返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">function3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function3方法，无参有返回值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//公共的，有参有返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">function4</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;function4方法，有参有返回值,参数为&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day16 网络编程</title>
    <link href="/2017/04/02/SAd16/"/>
    <url>/2017/04/02/SAd16/</url>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><span id="more"></span><h2 id="1-网络编程"><a href="#1-网络编程" class="headerlink" title="1.网络编程"></a>1.网络编程</h2><h3 id="指的是通过代码的手段-实现网络间的通讯"><a href="#指的是通过代码的手段-实现网络间的通讯" class="headerlink" title="指的是通过代码的手段,实现网络间的通讯."></a>指的是通过代码的手段,实现网络间的通讯.</h3><h3 id="简单来说-就是电脑与电脑之间收发消息"><a href="#简单来说-就是电脑与电脑之间收发消息" class="headerlink" title="简单来说,就是电脑与电脑之间收发消息"></a>简单来说,就是电脑与电脑之间收发消息</h3><h3 id="网络编程又叫做”Socket编程”"><a href="#网络编程又叫做”Socket编程”" class="headerlink" title="网络编程又叫做”Socket编程”"></a>网络编程又叫做”Socket编程”</h3><h2 id="2-网络编程三要素"><a href="#2-网络编程三要素" class="headerlink" title="2.网络编程三要素:"></a>2.网络编程三要素:</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址:"></a>IP地址:</h3><h4 id="网络设备在网络中的唯一标识"><a href="#网络设备在网络中的唯一标识" class="headerlink" title="网络设备在网络中的唯一标识."></a>网络设备在网络中的唯一标识.</h4><h4 id="命令"><a href="#命令" class="headerlink" title="命令:"></a>命令:</h4><h5 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h5><p>​                 //查看本机IP地址</p><h5 id="ping-IP地址"><a href="#ping-IP地址" class="headerlink" title="ping IP地址"></a>ping IP地址</h5><p>​                //测试是否和指定网络联通            </p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>​            127.0.0.1 –&gt; 本机<br>​            <em>.</em>.*.255 –&gt; 广播地址</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h3><h4 id="应用程序在设备中的唯一标识"><a href="#应用程序在设备中的唯一标识" class="headerlink" title="应用程序在设备中的唯一标识."></a>应用程序在设备中的唯一标识.</h4><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><h5 id="取值范围0-65535"><a href="#取值范围0-65535" class="headerlink" title="取值范围0-65535"></a>取值范围0-65535</h5><h5 id="一个端口在同一时间之内只能由一个程序占用"><a href="#一个端口在同一时间之内只能由一个程序占用" class="headerlink" title="一个端口在同一时间之内只能由一个程序占用"></a>一个端口在同一时间之内只能由一个程序占用</h5><h5 id="0-1024一般为系统占用的端口号"><a href="#0-1024一般为系统占用的端口号" class="headerlink" title="0-1024一般为系统占用的端口号"></a>0-1024一般为系统占用的端口号</h5><h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议:"></a>网络传输协议:</h3><h4 id="数据在网络中传输的规则"><a href="#数据在网络中传输的规则" class="headerlink" title="数据在网络中传输的规则."></a>数据在网络中传输的规则.</h4><h4 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h4><h5 id="UDP"><a href="#UDP" class="headerlink" title="UDP:"></a>UDP:</h5><h6 id="面向无连接"><a href="#面向无连接" class="headerlink" title="面向无连接"></a>面向无连接</h6><h6 id="速度快-不安全-容易丢失数据"><a href="#速度快-不安全-容易丢失数据" class="headerlink" title="速度快,不安全,容易丢失数据."></a>速度快,不安全,容易丢失数据.</h6><h6 id="每次最多发送64K"><a href="#每次最多发送64K" class="headerlink" title="每次最多发送64K."></a>每次最多发送64K.</h6><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP:"></a>TCP:</h5><h6 id="面向稳定链接"><a href="#面向稳定链接" class="headerlink" title="面向稳定链接"></a>面向稳定链接</h6><h6 id="需要经历三次握手"><a href="#需要经历三次握手" class="headerlink" title="需要经历三次握手"></a>需要经历三次握手</h6><h6 id="速度慢-安全"><a href="#速度慢-安全" class="headerlink" title="速度慢,安全."></a>速度慢,安全.</h6><h2 id="3-InetAddress"><a href="#3-InetAddress" class="headerlink" title="3.InetAddress"></a>3.InetAddress</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        在Java中用来表示IP地址的类.</p><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象:"></a>获取对象:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">static InetAddress getByName(String str);</td><td align="center">//通过”主机名”或”IP地址”得到对象</td></tr><tr><td align="center">static InetAddress getLocalHost();</td><td align="center">//获取本机的”IP地址”对象</td></tr></tbody></table><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">String getHostName();</td><td align="center">//获取主机名</td></tr><tr><td align="center">String getHostAddress();</td><td align="center">//获取IP地址</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">//static InetAddress getByName(String host)</span><br><span class="hljs-comment">//                          确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</span><br><span class="hljs-comment">//String getHostName()     获取此IP地址的主机名</span><br><span class="hljs-comment">//String getHostAddress()  返回文本显示中的IP地址字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InetadressDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;沉迷代码&quot;</span>);<br><br>        String hostName = address.getHostName();<br>        System.out.println(<span class="hljs-string">&quot;主机名为&quot;</span> + hostName);<br><br>        String ip = address.getHostAddress();<br>        System.out.println(<span class="hljs-string">&quot;IP为&quot;</span> + ip);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-UDP协议-单播"><a href="#4-UDP协议-单播" class="headerlink" title="4.UDP协议-单播"></a>4.UDP协议-单播</h2><h3 id="UDP-发送端"><a href="#UDP-发送端" class="headerlink" title="UDP-发送端"></a>UDP-发送端</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建发送端Socket对象-DatagramSocket"><a href="#1-创建发送端Socket对象-DatagramSocket" class="headerlink" title="1.创建发送端Socket对象(DatagramSocket)"></a>1.创建发送端Socket对象(DatagramSocket)</h5><p>​                因为是发送端的Socket，所以不需要指定端口号</p><h5 id="2-准备数据-并且打包。DatagramPacket"><a href="#2-准备数据-并且打包。DatagramPacket" class="headerlink" title="2.准备数据,并且打包。DatagramPacket"></a>2.准备数据,并且打包。DatagramPacket</h5><h5 id="3-发送数据"><a href="#3-发送数据" class="headerlink" title="3.发送数据"></a>3.发送数据</h5><h5 id="4-释放资源"><a href="#4-释放资源" class="headerlink" title="4.释放资源"></a>4.释放资源</h5><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建发送端Socket对象(DatagramSocket).因为是发送端的Socket,所以不需要指定端口号</span><br>       DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>       <span class="hljs-comment">//2.准备数据,并且打包.DatagramPacket</span><br>       <span class="hljs-comment">//2.1准备数据</span><br>       <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-string">&quot;hello udp,im comming !&quot;</span>.getBytes();<br>       <span class="hljs-comment">//2.2指定接收方(收件人)的IP地址</span><br>       InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>       <span class="hljs-comment">//2.3指定接收方的端口号</span><br>       <span class="hljs-keyword">int</span> port = <span class="hljs-number">8888</span>;<br>       DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bys, bys.length, address, port);<br><br>       <span class="hljs-comment">//3.发送数据</span><br>       ds.send(dp);<br>       <span class="hljs-comment">//4.释放资源</span><br>       ds.close();<br></code></pre></div></td></tr></table></figure><p>​            </p><h3 id="UDP-接收端"><a href="#UDP-接收端" class="headerlink" title="UDP-接收端"></a>UDP-接收端</h3><h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建接收端的Socket对象-DatagramSocket"><a href="#1-创建接收端的Socket对象-DatagramSocket" class="headerlink" title="1.创建接收端的Socket对象(DatagramSocket)"></a>1.创建接收端的Socket对象(DatagramSocket)</h5><p>​                因为是接收端，所以要明确自己是谁(端口)</p><h5 id="2-准备容器。DatagramPacket"><a href="#2-准备容器。DatagramPacket" class="headerlink" title="2.准备容器。DatagramPacket"></a>2.准备容器。DatagramPacket</h5><h5 id="3-接收数据。签收"><a href="#3-接收数据。签收" class="headerlink" title="3.接收数据。签收"></a>3.接收数据。签收</h5><h5 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a>4.解析</h5><h5 id="5-释放资源"><a href="#5-释放资源" class="headerlink" title="5.释放资源"></a>5.释放资源</h5><h4 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建接收端的Socket对象(DatagramSocket).因为是接收端,所以要明确自己是谁(端口),该端口号必须与发送端指定的完全一致</span><br>    DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8888</span>);<br>    <span class="hljs-comment">//2.准备容器DatagramPacket</span><br>    <span class="hljs-comment">//byte[] bys = new byte[1024];</span><br>    <span class="hljs-comment">//DatagramPacket dp = new DatagramPacket(bys, bys.length);</span><br>    DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>], <span class="hljs-number">1024</span>);<br>    <span class="hljs-comment">//3.接收数据.签收.如果没有人发送数据,则程序在这里一直等待,直到有人发送数据</span><br>    ds.receive(dp);<br>    <span class="hljs-comment">//4.解析.当数据被接收之后,都放在了DatagramPacket中,所以,所谓的解析数据,其实就是解析DatagramPacket</span><br>    <span class="hljs-comment">//4.1获取对方发送的IP</span><br>    InetAddress address = dp.getAddress();<br>    System.out.println(<span class="hljs-string">&quot;sender---&gt;&quot;</span> + address.getHostAddress());<br>    <span class="hljs-comment">//4.2获取发送方的端口号</span><br>    <span class="hljs-keyword">int</span> port = dp.getPort();<br>    <span class="hljs-comment">//4.3获取发送的数据</span><br>    <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>    <span class="hljs-comment">//4.4获取具体收到的数据的长度</span><br>    <span class="hljs-keyword">int</span> length = dp.getLength();<br>    <span class="hljs-comment">//4.5转换数据并打印</span><br>    System.out.println(<span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, length));<br>    <span class="hljs-comment">//5.释放资源</span><br>    ds.close();<br></code></pre></div></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><h5 id="发送端ClientDemo"><a href="#发送端ClientDemo" class="headerlink" title="发送端ClientDemo"></a><code>发送端ClientDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.找码头</span><br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br>        <span class="hljs-comment">//2.打包礼物</span><br>        <span class="hljs-comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span><br>        String s = <span class="hljs-string">&quot;送给村长老丈人的礼物&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br><br>        <span class="hljs-comment">//3.由码头发送包裹</span><br>        ds.send(dp);<br><br>        <span class="hljs-comment">//4.付钱走羊</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo"><a href="#接收端ServerDemo" class="headerlink" title="接收端ServerDemo"></a><code>接收端ServerDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-comment">//注意点:</span><br>        <span class="hljs-comment">//1.要先运行接收端,再运行发送端</span><br>        <span class="hljs-comment">//2.如果接收端再启动之后,没有接收到数据,那么会死等(阻塞).</span><br>        <span class="hljs-comment">//3.在接收数据的时候,需要调用一个getLength方法,表示接收到了多少字节</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.找码头     ---- 表示接收端从10000端口接收数据的.</span><br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2,创建一个新的箱子</span><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length);<br>        <span class="hljs-comment">//3.接收礼物,把礼物放到新的箱子中</span><br>        System.out.println(<span class="hljs-string">&quot;-----------接收前----------&quot;</span>);<br>        ds.receive(dp);<br>        System.out.println(<span class="hljs-string">&quot;------------接收后---------&quot;</span>);<br>        <span class="hljs-comment">//4.从新的箱子里面获取礼物</span><br>       <span class="hljs-comment">// byte[] data = dp.getData();</span><br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,length));<br>        <span class="hljs-comment">//5.拿完走羊</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2使用UDP协议完成以下要求"><a href="#test2使用UDP协议完成以下要求" class="headerlink" title="test2使用UDP协议完成以下要求:"></a>test2使用UDP协议完成以下要求:</h4><h5 id="发送方：循环向接收方发送数据-数据来自于键盘录入-直到键盘录入886时-循环停止"><a href="#发送方：循环向接收方发送数据-数据来自于键盘录入-直到键盘录入886时-循环停止" class="headerlink" title="发送方：循环向接收方发送数据, 数据来自于键盘录入, 直到键盘录入886时, 循环停止"></a>发送方：循环向接收方发送数据, 数据来自于键盘录入, 直到键盘录入886时, 循环停止</h5><h5 id="接收方：循环接收发送方发送过来的数据-并打印"><a href="#接收方：循环接收发送方发送过来的数据-并打印" class="headerlink" title="接收方：循环接收发送方发送过来的数据, 并打印"></a>接收方：循环接收发送方发送过来的数据, 并打印</h5><h5 id="发送端ClientDemo-1"><a href="#发送端ClientDemo-1" class="headerlink" title="发送端ClientDemo"></a><code>发送端ClientDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            String s = sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;886&quot;</span>.equals(s))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>            InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>            DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>            ds.send(dp);<br>        &#125;<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-1"><a href="#接收端ServerDemo-1" class="headerlink" title="接收端ServerDemo"></a><code>接收端ServerDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length);<br><br>            ds.receive(dp);<br><br>            <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>            <span class="hljs-keyword">int</span> length = dp.getLength();<br><br>            System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br>        &#125;<br><br>       <span class="hljs-comment">// ds.close();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-UDP协议-组播"><a href="#5-UDP协议-组播" class="headerlink" title="5.UDP协议-组播"></a>5.UDP协议-组播</h2><h3 id="组播-发送端"><a href="#组播-发送端" class="headerlink" title="组播-发送端"></a>组播-发送端</h3><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>​            1.基本操作和单播类似<br>​            2.在指定接收方的IP地址时, 指定的是组名<br>​                组名使用IP来表示<br>​                IP范围是(224.0.0.0 - 239.255.255.255)<br>​            3.正常发送数据</p><h4 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//1.创建发送端Socket对象(DatagramSocket).因为是发送端的Socket,所以不需要指定端口号</span><br>       DatagramSocket ds = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket()</span>;<br> <br>       <span class="hljs-comment">//2.准备数据,并且打包.DatagramPacket</span><br>       <span class="hljs-comment">//2.1准备数据</span><br>       byte<span class="hljs-literal">[]</span> bys = <span class="hljs-string">&quot;hello udp,im comming !&quot;</span>.get<span class="hljs-constructor">Bytes()</span>;<br>       <span class="hljs-comment">//2.2指定接收方(收件人)的IP地址</span><br>       InetAddress address = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>)</span>;<br>       <span class="hljs-comment">//2.3指定接收方的端口号</span><br>       <span class="hljs-built_in">int</span> port = <span class="hljs-number">8888</span>;<br>       DatagramPacket dp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">bys</span>, <span class="hljs-params">bys</span>.<span class="hljs-params">length</span>, <span class="hljs-params">address</span>, <span class="hljs-params">port</span>)</span>;<br> <br>       <span class="hljs-comment">//3.发送数据</span><br>       ds.send(dp);<br>       <span class="hljs-comment">//4.释放资源</span><br>       ds.close<span class="hljs-literal">()</span>;<br></code></pre></div></td></tr></table></figure><h3 id="组播-接收端"><a href="#组播-接收端" class="headerlink" title="组播-接收端"></a>组播-接收端</h3><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><h5 id="1-使用MulticastSocket作为接收方的Socket"><a href="#1-使用MulticastSocket作为接收方的Socket" class="headerlink" title="1.使用MulticastSocket作为接收方的Socket"></a>1.使用MulticastSocket作为接收方的Socket</h5><h5 id="2-把当前计算机-加入到指定小组中"><a href="#2-把当前计算机-加入到指定小组中" class="headerlink" title="2.把当前计算机,加入到指定小组中"></a>2.把当前计算机,加入到指定小组中</h5><p>​                组名仍然使用IP来表示<br>​                组名必须和发送方指定的组名保持一致</p><h5 id="3-正常接收数据"><a href="#3-正常接收数据" class="headerlink" title="3.正常接收数据"></a>3.正常接收数据</h5><h4 id="案例：-3"><a href="#案例：-3" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//接收方使用MulticastSocket作为Socket</span><br>       MulticastSocket ms=<span class="hljs-keyword">new</span> MulticastSocket(<span class="hljs-number">8888</span>);<br>       <span class="hljs-comment">//把当前计算机加入到某个小组中</span><br>       ms.joinGroup(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>));<br>       DatagramPacket dp=<span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br>       ms.receive(dp);<br>       <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>       <span class="hljs-keyword">int</span> length = dp.getLength();<br>       System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br>ms.close();<br></code></pre></div></td></tr></table></figure><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="test1组播"><a href="#test1组播" class="headerlink" title="test1组播"></a>test1组播</h4><h5 id="发送端ClinetDemo"><a href="#发送端ClinetDemo" class="headerlink" title="发送端ClinetDemo"></a>发送端ClinetDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClinetDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>        String s = <span class="hljs-string">&quot;hello 组播&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-2"><a href="#接收端ServerDemo-2" class="headerlink" title="接收端ServerDemo"></a>接收端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MulticastSocket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        MulticastSocket ms = <span class="hljs-keyword">new</span> MulticastSocket(<span class="hljs-number">10000</span>);<br><br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br><br><br>        <span class="hljs-comment">//把当前计算机绑定一个组播地址,表示添加到这一组中.</span><br>        ms.joinGroup(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>));<br><br><br>        ms.receive(dp);<br><br>        <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br><br>        ms.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2广播"><a href="#test2广播" class="headerlink" title="test2广播"></a>test2广播</h4><h5 id="发送端ClientDemo-2"><a href="#发送端ClientDemo-2" class="headerlink" title="发送端ClientDemo"></a>发送端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>        String s = <span class="hljs-string">&quot;广播 hello&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = s.getBytes();<br>        InetAddress address = InetAddress.getByName(<span class="hljs-string">&quot;255.255.255.255&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">10000</span>;<br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(bytes,bytes.length,address,port);<br><br>        ds.send(dp);<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接收端ServerDemo-3"><a href="#接收端ServerDemo-3" class="headerlink" title="接收端ServerDemo"></a>接收端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10000</span>);<br><br>        DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br><br>        ds.receive(dp);<br><br>        <span class="hljs-keyword">byte</span>[] data = dp.getData();<br>        <span class="hljs-keyword">int</span> length = dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,length));<br><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-TCP-客户端"><a href="#6-TCP-客户端" class="headerlink" title="6.TCP-客户端"></a>6.TCP-客户端</h2><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP-客户端"></a>TCP-客户端</h3><h4 id="步骤：-2"><a href="#步骤：-2" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建Socket对象。指定“服务端”的ip地址和端口号"><a href="#1-创建Socket对象。指定“服务端”的ip地址和端口号" class="headerlink" title="1.创建Socket对象。指定“服务端”的ip地址和端口号"></a>1.创建Socket对象。指定“服务端”的ip地址和端口号</h5><h5 id="2-传输数据"><a href="#2-传输数据" class="headerlink" title="2.传输数据"></a>2.传输数据</h5><p>​                如果给“服务端”发消息，用输出流写。<br>​                如果接收“服务端”发送的数据，则用输入流读。</p><h5 id="3-释放资源"><a href="#3-释放资源" class="headerlink" title="3.释放资源"></a>3.释放资源</h5><h4 id="案例：-4"><a href="#案例：-4" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Socket对象.指定服务端的ip地址和端口号</span><br>        Socket s = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">10010</span>);<br>        <span class="hljs-comment">//2.给服务端发消息</span><br>        OutputStream os = s.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>        <span class="hljs-comment">//发完了说一下,一个结束标记,不能直接调用close方法关闭输出流,会出错</span><br>        s.shutdownOutput();<br>        <span class="hljs-comment">//3.接收服务端发送过来的数据</span><br>        InputStream is = s.getInputStream();<br>        <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = is.read(bys);<br>        System.out.println(<span class="hljs-keyword">new</span> String(bys, <span class="hljs-number">0</span>, len));<br>        <span class="hljs-comment">//4.释放资源</span><br>        s.close();<br></code></pre></div></td></tr></table></figure><h3 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP-服务端"></a>TCP-服务端</h3><h4 id="步骤：-3"><a href="#步骤：-3" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-创建ServerSocket对象，指定端口号"><a href="#1-创建ServerSocket对象，指定端口号" class="headerlink" title="1.创建ServerSocket对象，指定端口号"></a>1.创建ServerSocket对象，指定端口号</h5><h5 id="2-调用accept-方法获取Socket对象。"><a href="#2-调用accept-方法获取Socket对象。" class="headerlink" title="2.调用accept()方法获取Socket对象。"></a>2.调用accept()方法获取Socket对象。</h5><p>​                如果有客户端访问，则该方法执行，得到一个Socket<br>​                如果没有客户端访问，就一直等待。</p><h5 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3.传输数据"></a>3.传输数据</h5><p>​                如果给“客户端”发消息，用输出流写。<br>​                如果接收“客户端”发送的数据，则用输入流读。</p><h5 id="4-释放资源-1"><a href="#4-释放资源-1" class="headerlink" title="4.释放资源"></a>4.释放资源</h5><h4 id="案例：-5"><a href="#案例：-5" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建ServerSocket对象,指定端口号</span><br>ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10010</span>);<br><span class="hljs-comment">//2.调用accept()方法获取Socket对象</span><br>Socket s = ss.accept();<br>    <span class="hljs-comment">//接收客户端发送过来的数据</span><br>        InputStream is=s.getInputStream();<br>        <span class="hljs-keyword">byte</span>[] bys=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len=is.read(bys);<br>        System.out.println(<span class="hljs-keyword">new</span> String(bys,<span class="hljs-number">0</span>,len));<br>    <span class="hljs-comment">//向客户端发送数据</span><br>        OutputStream os=s.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello!!!&quot;</span>.getBytes());<br>        os.close();<br>s.close();<br></code></pre></div></td></tr></table></figure><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h4><h5 id="客户端ClientDemo"><a href="#客户端ClientDemo" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1,创建一个Socket对象</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.获取一个IO流开始写数据</span><br>        OutputStream os = socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">/*while(true)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">//3.释放资源</span><br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo"><a href="#服务端ServerDemo" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1. 创建Socket对象</span><br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//2. 等待客户端连接</span><br>        System.out.println(<span class="hljs-number">111</span>);<br>        Socket accept = ss.accept();<br>        System.out.println(<span class="hljs-number">222</span>);<br>        <span class="hljs-comment">//3.获得输入流对象</span><br>        InputStream is = accept.getInputStream();<br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = is.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br><br>        <span class="hljs-comment">//4.释放资源</span><br>        is.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><h5 id="客户端ClientDemo-1"><a href="#客户端ClientDemo-1" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        OutputStream os = socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>       <span class="hljs-comment">// os.close();如果在这里关流,会导致整个socket都无法使用</span><br>        socket.shutdownOutput();<span class="hljs-comment">//仅仅关闭输出流.并写一个结束标记,对socket没有任何影响</span><br><br><br>        <span class="hljs-comment">/*InputStream is = socket.getInputStream();</span><br><span class="hljs-comment">        int b;</span><br><span class="hljs-comment">        while((b = is.read()) !=-1)&#123;</span><br><span class="hljs-comment">            System.out.println((char) b);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo-1"><a href="#服务端ServerDemo-1" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        Socket accept = ss.accept();<br><br>        InputStream is = accept.getInputStream();<br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = is.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br>       <span class="hljs-comment">/* OutputStream os = accept.getOutputStream();</span><br><span class="hljs-comment">        os.write(&quot;你谁啊?&quot;.getBytes());*/</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;你谁啊?&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        bw.close();<br>        is.close();<br>        accept.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><p>客户端需求：把一个图片文件发送到服务端并读取回馈信息。要求判断文件是否存在及格式是否为jpg并要求文件小于2M。</p><p>服务端需求：接收客户端发送过来的图片数据。进行存储后，回馈一个“上传成功”字样。支持多用户的并发访问。</p><h5 id="客户端ClientDemo-2"><a href="#客户端ClientDemo-2" class="headerlink" title="客户端ClientDemo"></a>客户端ClientDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;socketmodule\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="服务端ServerDemo-2"><a href="#服务端ServerDemo-2" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        Socket accept = ss.accept();<br><br>        <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>        <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;socketmodule\\ServerDir\\copy.jpg&quot;</span>));<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<br>        &#125;<br><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        bos.close();<br>        accept.close();<br>        ss.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>需求</p><p>服务器只能处理一个客户端请求，接收完一个图片之后，服务器就关闭了。</p></li><li><p>解决方案</p><p>使用循环</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo"><a href="#客户端-ClientDemo" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-3"><a href="#服务端ServerDemo-3" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br><br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\copy.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br>            bos.close();<br>            accept.close();<br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><ul><li><p>需求</p><p>第二次上传文件的时候，会把第一次的文件给覆盖。</p></li><li><p>解决方案</p><p>UUID. randomUUID()方法生成随机的文件名</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-1"><a href="#客户端-ClientDemo-1" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-4"><a href="#服务端ServerDemo-4" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br><br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(accept.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(accept.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br>            bos.close();<br>            accept.close();<br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-UUIDDemo"><a href="#class-UUIDDemo" class="headerlink" title="class UUIDDemo"></a>class UUIDDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUIDDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UUID uuid = UUID.randomUUID();<br>        String s = uuid.toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><p>需求</p><p>使用循环虽然可以让服务器处理多个客户端请求。但是还是无法同时跟多个客户端进行通信。</p></li><li><p>解决方案</p><p>开启多线程处理</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-2"><a href="#客户端-ClientDemo-2" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端ServerDemo-5"><a href="#服务端ServerDemo-5" class="headerlink" title="服务端ServerDemo"></a>服务端ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br>            ThreadSocket ts = <span class="hljs-keyword">new</span> ThreadSocket(accept);<br>            <span class="hljs-keyword">new</span> Thread(ts).start();<br><br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="实现类ThreadSocket"><a href="#实现类ThreadSocket" class="headerlink" title="实现类ThreadSocket"></a>实现类ThreadSocket</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Socket acceptSocket;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadSocket</span><span class="hljs-params">(Socket accept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.acceptSocket = accept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(acceptSocket.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(acceptSocket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (acceptSocket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    acceptSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p>需求</p><p>使用多线程虽然可以让服务器同时处理多个客户端请求。但是资源消耗太大。</p></li><li><p>解决方案</p><p>加入线程池</p></li><li><p>代码实现</p></li></ul><h4 id="客户端-ClientDemo-3"><a href="#客户端-ClientDemo-3" class="headerlink" title="客户端 ClientDemo"></a>客户端 ClientDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//是本地的流,用来读取本地文件的.</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;optimizeserver\\ClientDir\\1.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写到服务器 --- 网络中的流</span><br>        OutputStream os = socket.getOutputStream();<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<span class="hljs-comment">//通过网络写到服务器中</span><br>        &#125;<br>        bos.flush();<br>        <span class="hljs-comment">//给服务器一个结束标记,告诉服务器文件已经传输完毕</span><br>        socket.shutdownOutput();<br><br><br><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) !=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br><br>        bis.close();<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="服务端-ServerDemo"><a href="#服务端-ServerDemo" class="headerlink" title="服务端 ServerDemo"></a>服务端 ServerDemo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10000</span>);<br>        ThreadPoolExecutor pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>                <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数量</span><br>                <span class="hljs-number">10</span>,   <span class="hljs-comment">//线程池的总数量</span><br>                <span class="hljs-number">60</span>,   <span class="hljs-comment">//临时线程空闲时间</span><br>                TimeUnit.SECONDS, <span class="hljs-comment">//临时线程空闲时间的单位</span><br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">5</span>),<span class="hljs-comment">//阻塞队列</span><br>                Executors.defaultThreadFactory(),<span class="hljs-comment">//创建线程的方式</span><br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy()<span class="hljs-comment">//任务拒绝策略</span><br>        );<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            Socket accept = ss.accept();<br>            ThreadSocket ts = <span class="hljs-keyword">new</span> ThreadSocket(accept);<br>            <span class="hljs-comment">//new Thread(ts).start();</span><br>            pool.submit(ts);<br><br>        &#125;<br>        <span class="hljs-comment">//ss.close();</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="实现类ThreadSocket-1"><a href="#实现类ThreadSocket-1" class="headerlink" title="实现类ThreadSocket"></a>实现类ThreadSocket</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Socket acceptSocket;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadSocket</span><span class="hljs-params">(Socket accept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.acceptSocket = accept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//网络中的流,从客户端读取数据的</span><br>            BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(acceptSocket.getInputStream());<br>            <span class="hljs-comment">//本地的IO流,把数据写到本地中,实现永久化存储</span><br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;optimizeserver\\ServerDir\\&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;.jpg&quot;</span>));<br><br>            <span class="hljs-keyword">int</span> b;<br>            <span class="hljs-keyword">while</span>((b = bis.read()) !=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(b);<br>            &#125;<br><br>            BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(acceptSocket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (acceptSocket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    acceptSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day15多线程补充与单元测试与日志</title>
    <link href="/2017/04/02/SAd15/"/>
    <url>/2017/04/02/SAd15/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程补充"><a href="#多线程补充" class="headerlink" title="多线程补充"></a>多线程补充</h1><span id="more"></span><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        是一个原子性的Integer类.<br>​        内部的操作可以保证多线程的原子性.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public AtomicInteger();</td><td align="center">//默认值为0</td></tr><tr><td align="center">public AtomicInteger(int num);</td><td align="center">//默认值为num</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo1</span> </span>&#123;<br><span class="hljs-comment">//    public AtomicInteger()：                   初始化一个默认值为0的原子型Integer</span><br><span class="hljs-comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger();<br>        System.out.println(ac);<br><br>        AtomicInteger ac2 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">10</span>);<br>        System.out.println(ac2);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public int addAndGet(int delta);</td><td align="center">//以原子方式将参数与对象中的值相加，并返回结果。</td></tr><tr><td align="center">public int get();</td><td align="center">//获取值</td></tr></tbody></table><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo2</span> </span>&#123;<br><span class="hljs-comment">//    int get():                    获取值</span><br><span class="hljs-comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span><br><span class="hljs-comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span><br><span class="hljs-comment">//    int addAndGet(int data):     以原子方式将参数与对象中的值相加，并返回结果。</span><br><span class="hljs-comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        System.out.println(ac1.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int andIncrement = ac2.getAndIncrement();</span><br><span class="hljs-comment">//        System.out.println(andIncrement);</span><br><span class="hljs-comment">//        System.out.println(ac2.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac3.incrementAndGet();</span><br><span class="hljs-comment">//        System.out.println(i);//自增后的值</span><br><span class="hljs-comment">//        System.out.println(ac3.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac4.addAndGet(20);</span><br><span class="hljs-comment">//        System.out.println(i);</span><br><span class="hljs-comment">//        System.out.println(ac4.get());</span><br><br>        AtomicInteger ac5 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">int</span> andSet = ac5.getAndSet(<span class="hljs-number">20</span>);<br>        System.out.println(andSet);<br>        System.out.println(ac5.get());<br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><h2 id="并发包"><a href="#并发包" class="headerlink" title="并发包"></a>并发包</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​         并发包就是一些线程安全的集合类.</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3><table><thead><tr><th align="center">并发包</th><th align="center">对应的</th></tr></thead><tbody><tr><td align="center">ConcurrentHashMap</td><td align="center">//线程安全的HashMap</td></tr><tr><td align="center">CopyOnWriteArrayList</td><td align="center">//线程安全的ArrayList</td></tr><tr><td align="center">CopyOnWriteArraySet</td><td align="center">//线程安全的HashSet</td></tr></tbody></table><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><code>ConcurrentHashMap</code></h4><p>用hashMap会出错</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        HashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Hashtable-过时的-悲观锁-效率低"><a href="#Hashtable-过时的-悲观锁-效率低" class="headerlink" title="Hashtable(过时的,悲观锁,效率低)"></a>Hashtable(过时的,悲观锁,效率低)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashtableDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Hashtable&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> Hashtable&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="ConcurrentHashMap-推荐-乐观锁-效率高"><a href="#ConcurrentHashMap-推荐-乐观锁-效率高" class="headerlink" title="ConcurrentHashMap(推荐,乐观锁,效率高)"></a>ConcurrentHashMap(推荐,乐观锁,效率高)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConcurrentHashMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        ConcurrentHashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​            </p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​        在多线程情况下,可以控制线程的执行顺序的类<br>​        确定某个线程在其他线程执行之后再执行.</p><h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public CountDownLatch(int num);</td><td align="center">//创建一个对象,指定一个计数器</td></tr></tbody></table><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void await();</td><td align="center">//当前线程等待,当计数器归零的时候,自动唤醒</td></tr><tr><td align="center">public void countDown();</td><td align="center">//计数器-1</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h5 id="测试类MyCountDownLatchDemo"><a href="#测试类MyCountDownLatchDemo" class="headerlink" title="测试类MyCountDownLatchDemo"></a>测试类MyCountDownLatchDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCountDownLatchDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.创建CountDownLatch的对象，需要传递给四个线程。</span><br>        <span class="hljs-comment">//在底层就定义了一个计数器，此时计数器的值就是3</span><br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//2.创建四个线程对象并开启他们。</span><br>        MotherThread motherThread = <span class="hljs-keyword">new</span> MotherThread(countDownLatch);<br>        motherThread.start();<br><br>        ChileThread1 t1 = <span class="hljs-keyword">new</span> ChileThread1(countDownLatch);<br>        t1.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br><br>        ChileThread2 t2 = <span class="hljs-keyword">new</span> ChileThread2(countDownLatch);<br>        t2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br><br>        ChileThread3 t3 = <span class="hljs-keyword">new</span> ChileThread3(countDownLatch);<br>        t3.setName(<span class="hljs-string">&quot;小刚&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MotherThread"><a href="#线程类MotherThread" class="headerlink" title="线程类MotherThread"></a>线程类MotherThread</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MotherThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MotherThread</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.等待</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//当计数器变成0的时候，会自动唤醒这里等待的线程。</span><br>            countDownLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//2.收拾碗筷</span><br>        System.out.println(<span class="hljs-string">&quot;妈妈在收拾碗筷&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread1"><a href="#线程类ChileThread1" class="headerlink" title="线程类ChileThread1"></a>线程类ChileThread1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread1</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread2"><a href="#线程类ChileThread2" class="headerlink" title="线程类ChileThread2"></a>线程类ChileThread2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread2</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类ChileThread3"><a href="#线程类ChileThread3" class="headerlink" title="线程类ChileThread3"></a>线程类ChileThread3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChileThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChileThread3</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        可以控制”同时运行的线程的数量”.<br>​        和synchronized功能类似<br>​        该类允许多个线程同时拥有”锁”的</p><h3 id="构造-2"><a href="#构造-2" class="headerlink" title="构造:"></a>构造:</h3><p>​        public Semaphore(int num);<br>​            //最多允许同时运行num个线程</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h3><p>​        void acquire();<br>​            //获取”许可证”,运行线程<br>​        void release();<br>​            //释放”许可证”</p><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="实现类MyRunnable"><a href="#实现类MyRunnable" class="headerlink" title="实现类MyRunnable"></a>实现类MyRunnable</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//1.获得管理员对象，</span><br>    <span class="hljs-keyword">private</span> Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">2</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//2.获得通行证</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            semaphore.acquire();<br>            <span class="hljs-comment">//3.开始行驶</span><br>            System.out.println(<span class="hljs-string">&quot;获得了通行证开始行驶&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;归还通行证&quot;</span>);<br>            <span class="hljs-comment">//4.归还通行证</span><br>            semaphore.release();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类MySemaphoreDemo"><a href="#测试类MySemaphoreDemo" class="headerlink" title="测试类MySemaphoreDemo"></a>测试类MySemaphoreDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySemaphoreDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(mr).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><h4 id="1-导入jar包-模块根目录下新建lib文件夹-右键add-as-Directory"><a href="#1-导入jar包-模块根目录下新建lib文件夹-右键add-as-Directory" class="headerlink" title="1:导入jar包. (模块根目录下新建lib文件夹,右键add as Directory )"></a>1:导入jar包. (模块根目录下新建lib文件夹,右键add as Directory )</h4><p>​            junit-4.12.jar<br>​            hamcrest-core-1.3.jar</p><h4 id="2-在对应方法上加上-Test注解"><a href="#2-在对应方法上加上-Test注解" class="headerlink" title="2:在对应方法上加上@Test注解"></a>2:在对应方法上加上@Test注解</h4><h3 id="注解"><a href="#注解" class="headerlink" title="注解:"></a>注解:</h3><table><thead><tr><th align="center">用法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Test</td><td align="center">//表示测试该方法</td></tr><tr><td align="center">@Before</td><td align="center">//在测试的方法前运行</td></tr><tr><td align="center">@After</td><td align="center">//在测试的方法后运行</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        测试方法必须是”公共的,无返回值的,无参数的”.</p><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitDemo1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> sum = a + b;<br>        System.out.println(sum);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitDemo2</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="1-导入log4j的jar包"><a href="#1-导入log4j的jar包" class="headerlink" title="1:导入log4j的jar包"></a>1:导入log4j的jar包</h5><p>​            log4j-1.2.17.jar<br>​            slf4j-api-1.7.30.jar<br>​            slf4j-log4j12-1.7.26.jar</p><h5 id="2-导入配置文件-放在src目录下"><a href="#2-导入配置文件-放在src目录下" class="headerlink" title="2:导入配置文件(放在src目录下)"></a>2:导入配置文件(放在src目录下)</h5><p>​            log4j.properties</p><h5 id="3-创建日志对象"><a href="#3-创建日志对象" class="headerlink" title="3:创建日志对象"></a>3:创建日志对象</h5><p>​            Logger log = LoggerFactory.getLogger(当前类.class);</p><h5 id="4-输出日志"><a href="#4-输出日志" class="headerlink" title="4:输出日志."></a>4:输出日志.</h5><p>​            log.debug(“debug级别的日志-详细信息”);<br>​            log.info(“info级别的日志-普通信息”);<br>​            log.warn(“warn级别的日志-警告信息”);<br>​            log.error(“error级别的日志-错误信息”);</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h4><h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">,my,fileAppender</span><br><br><span class="hljs-comment">### direct log messages to my ###</span><br><span class="hljs-meta">log4j.appender.my</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.my.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.my.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.my.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="hljs-string">%d %t %5p %c&#123;1&#125;:%L - %m%n</span><br><br><span class="hljs-comment"># fileAppender演示</span><br><span class="hljs-meta">log4j.appender.fileAppender</span>=<span class="hljs-string">org.apache.log4j.FileAppender</span><br><span class="hljs-meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.fileAppender.Append</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.fileAppender.File</span>=<span class="hljs-string">D:/log4j-log.log</span><br><span class="hljs-meta">log4j.appender.fileAppender.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="hljs-string">%d %5p %c&#123;1&#125;:%L - %m%n</span><br></code></pre></div></td></tr></table></figure><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4JTest01</span> </span>&#123;<br><br>    <span class="hljs-comment">//使用log4j的api来获取日志的对象</span><br>    <span class="hljs-comment">//弊端：如果以后我们更换日志的实现类，那么下面的代码就需要跟着改</span><br>    <span class="hljs-comment">//不推荐使用</span><br>    <span class="hljs-comment">//private static final Logger LOGGER = Logger.getLogger(Log4JTest01.class);</span><br><br><br>    <span class="hljs-comment">//使用slf4j里面的api来获取日志的对象</span><br>    <span class="hljs-comment">//好处：如果以后我们更换日志的实现类，那么下面的代码不需要跟着修改</span><br>    <span class="hljs-comment">//推荐使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Log4JTest01.class);<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.导入jar包</span><br>        <span class="hljs-comment">//2.编写配置文件</span><br>        <span class="hljs-comment">//3.在代码中获取日志的对象</span><br>        <span class="hljs-comment">//4.按照日志级别设置日志信息</span><br><br>        LOGGER.debug(<span class="hljs-string">&quot;debug级别的日志&quot;</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;info级别的日志&quot;</span>);<br>        LOGGER.warn(<span class="hljs-string">&quot;warn级别的日志&quot;</span>);<br>        LOGGER.error(<span class="hljs-string">&quot;error级别的日志&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog4j</span> </span>&#123;<br><br>    <span class="hljs-comment">//获取日志对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MyLog4j.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//键盘录入一个数字</span><br>        String number = sc.nextLine();<br><br>        <span class="hljs-comment">//类型转换</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> result = Integer.parseInt(number);<br>           <span class="hljs-comment">// System.out.println(&quot;类型转换成功&quot; + result);</span><br>            LOGGER.info(<span class="hljs-string">&quot;类型转换成功&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>           <span class="hljs-comment">// System.out.println(&quot;类型转换失败，请录入一个整数&quot;);</span><br>            LOGGER.info(<span class="hljs-string">&quot;类型转换失败，请录入一个整数&quot;</span>,e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程补充</tag>
      
      <tag>单元测试</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day14多线程2</title>
    <link href="/2017/04/02/SAd14/"/>
    <url>/2017/04/02/SAd14/</url>
    
    <content type="html"><![CDATA[<h2 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h2><span id="more"></span><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​        所谓等待唤醒,指的是线程的等待和唤醒<br>​        是一个线程叫醒另外一个线程去运行代码的机制</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void wait()</td><td align="center">导致当前线程等待直到另一个线程调用该对象的notify()方法或notifyAll()方法</td></tr><tr><td align="center">void notify()</td><td align="center">唤醒正在等待对象监视器的单个线程</td></tr><tr><td align="center">void notifyAll()</td><td align="center">唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>只用锁对象才能调用等待和唤醒的方法.</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        一个实现了等待和唤醒机制的容器.</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成:"></a>组成:</h3><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a><code>ArrayBlockingQueue</code></h4><h4 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a><code>LinkedBlockingDeque</code></h4><table><thead><tr><th align="center">类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ArrayBlockingQueue</td><td align="center">底层是数组,元素是有限的.</td></tr><tr><td align="center">LinkedBlockingDeque</td><td align="center">底层是链表,元素是无限的.并不是真正的无限,最大是int的最大值</td></tr></tbody></table><p>​        </p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h3><h4 id="public-void-put-E-e"><a href="#public-void-put-E-e" class="headerlink" title="public void put(E e)"></a><code>public void put(E e)</code></h4><h4 id="public-E-take"><a href="#public-E-take" class="headerlink" title="public E take();"></a><code>public E take();</code></h4><p>​<br>​            </p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public void put(E e)</td><td align="center">存入元素.该方法是阻塞的.当容器满的时候,该方法就会停止,等待着容器空</td></tr><tr><td align="center">public E take();</td><td align="center">获取元素.该方法是阻塞的.当容器空的时候,该方法会停止,等待着容器存入</td></tr></tbody></table><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 创建阻塞队列的对象,容量为 1</span><br>        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 存储元素</span><br>        arrayBlockingQueue.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br><br>        <span class="hljs-comment">// 取元素</span><br>        System.out.println(arrayBlockingQueue.take());<br>        System.out.println(arrayBlockingQueue.take()); <span class="hljs-comment">// 取不到会阻塞</span><br><br>        System.out.println(<span class="hljs-string">&quot;程序结束了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><h4 id="1-新建"><a href="#1-新建" class="headerlink" title="1.新建"></a><code>1.新建</code></h4><h4 id="2-可运行状态-就绪状态"><a href="#2-可运行状态-就绪状态" class="headerlink" title="2.可运行状态(就绪状态)"></a><code>2.可运行状态</code>(就绪状态)</h4><h4 id="3-阻塞状态"><a href="#3-阻塞状态" class="headerlink" title="3.阻塞状态"></a><code>3.阻塞状态</code></h4><h4 id="4-无限等待状态"><a href="#4-无限等待状态" class="headerlink" title="4.无限等待状态"></a><code>4.无限等待状态</code></h4><h4 id="5-计时等待"><a href="#5-计时等待" class="headerlink" title="5.计时等待"></a><code>5.计时等待</code></h4><h4 id="6-终止"><a href="#6-终止" class="headerlink" title="6.终止"></a><code>6.终止</code></h4><table><thead><tr><th align="center">状态(English)</th><th align="center">状态(Chinese)</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">新建</td></tr><tr><td align="center">RUNNABLE</td><td align="center">可运行状态</td></tr><tr><td align="center">BLOCKED</td><td align="center">阻塞状态</td></tr><tr><td align="center">WAITING</td><td align="center">无限等待状态</td></tr><tr><td align="center">TIMED_WAITING</td><td align="center">计时等待</td></tr><tr><td align="center">TERMINATED</td><td align="center">终止</td></tr></tbody></table><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环向阻塞队列中添加包子</p><p>3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环获取阻塞队列中的包子</p><p>3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建阻塞队列对象</p><p>创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><p>见day13死锁那里</p></li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池:"></a>线程池:</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​        线程池,就是存储线程的池子.<br>​        线程池可以创建和回收线程.</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h3><h4 id="ExecutorService-es-Executors-newCachedThreadPool"><a href="#ExecutorService-es-Executors-newCachedThreadPool" class="headerlink" title="ExecutorService es = Executors.newCachedThreadPool();"></a><code>ExecutorService es = Executors.newCachedThreadPool();</code></h4><h4 id="ExecutorService-es-Executors-newFixedThreadPool-int-num"><a href="#ExecutorService-es-Executors-newFixedThreadPool-int-num" class="headerlink" title="ExecutorService es = Executors.newFixedThreadPool(int num);"></a><code>ExecutorService es = Executors.newFixedThreadPool(int num);</code></h4><table><thead><tr><th align="center">创建格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ExecutorService es = Executors.newCachedThreadPool();</td><td align="center">创建一个默认线程池.内部最多有int最大值个线程</td></tr><tr><td align="center">ExecutorService es = Executors.newFixedThreadPool(int num);</td><td align="center">创建一个线程池.内部线程最大数量为num​</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><h4 id="submit-Runnable-task"><a href="#submit-Runnable-task" class="headerlink" title="submit(Runnable task)"></a><code>submit(Runnable task)</code></h4><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a><code>shutdown()</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">submit(Runnable task);</td><td align="center">提交任务.把要执行的任务交给线程池,由线程池分配线程执行</td></tr><tr><td align="center">shutdown();</td><td align="center">关闭线程池</td></tr></tbody></table><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//static ExecutorService newCachedThreadPool()   创建一个默认的线程池</span><br><span class="hljs-comment">//static newFixedThreadPool(int nThreads)        创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        <span class="hljs-comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span><br>        ExecutorService executorService = Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//Executors --- 可以帮助我们创建线程池对象</span><br>        <span class="hljs-comment">//ExecutorService --- 可以帮助我们控制线程池</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-comment">//Thread.sleep(2000);</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.shutdown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class="hljs-comment">//创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//参数不是初始值而是最大值</span><br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>        ThreadPoolExecutor pool = (ThreadPoolExecutor) executorService;<br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//0</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//2</span><br><span class="hljs-comment">//        executorService.shutdown();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ThreadPoolExecutor-了解"><a href="#ThreadPoolExecutor-了解" class="headerlink" title="ThreadPoolExecutor(了解)"></a>ThreadPoolExecutor(了解)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>用于自定义线程池.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(  <span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                             <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                             <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-function"><span class="hljs-params">                             TimeUnit unit,</span></span><br><span class="hljs-function"><span class="hljs-params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-function"><span class="hljs-params">                             ThreadFactory threadFactory,</span></span><br><span class="hljs-function"><span class="hljs-params">                             RejectedExecutionHandler handler)</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h3><p>​        </p><table><thead><tr><th align="center">参数</th><th align="center">解析</th></tr></thead><tbody><tr><td align="center">corePoolSize</td><td align="center">核心线程的最大值,不能小于0</td></tr><tr><td align="center">maximumPoolSize</td><td align="center">最大线程数,不能小于等于0,maximumPoolSize&gt;=corePoolSize</td></tr><tr><td align="center">keepAliveTime</td><td align="center">空闲线程最大存活时间,不能小于0</td></tr><tr><td align="center">unit</td><td align="center">空闲线程最大存活时间的时间单位,一般使用TimeUtil选项</td></tr><tr><td align="center">workQueue</td><td align="center">任务队列(排队的数量),不能为null</td></tr><tr><td align="center">threadFactory</td><td align="center">创建线程方式,一般为Executors.defaultThreadFactory(),不能为null</td></tr><tr><td align="center">handler</td><td align="center">任务的拒绝策略(多余任务的处理方案)不能为null</td></tr></tbody></table><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略:"></a>拒绝策略:</h3><table><thead><tr><th align="center">策略</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ThreadPoolExecutor.AbortPolicy</td><td align="center">丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</td></tr><tr><td align="center">ThreadPoolExecutor.DiscardPolicy</td><td align="center">丢弃任务，但是不抛出异常 这是不推荐的做法。</td></tr><tr><td align="center">ThreadPoolExecutor.DiscardOldestPolicy</td><td align="center">抛弃队列中等待最久的任务 然后把当前任务加入队列中。</td></tr><tr><td align="center">ThreadPoolExecutor.CallerRunsPolicy</td><td align="center">调用任务的run()方法绕过线程池直接执行。</td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a><code>test</code></h3><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类MyThreadPoolDemo3</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadPoolDemo3</span> </span>&#123;<br><span class="hljs-comment">//    参数一：核心线程数量</span><br><span class="hljs-comment">//    参数二：最大线程数</span><br><span class="hljs-comment">//    参数三：空闲线程最大存活时间</span><br><span class="hljs-comment">//    参数四：时间单位</span><br><span class="hljs-comment">//    参数五：任务队列</span><br><span class="hljs-comment">//    参数六：创建线程工厂</span><br><span class="hljs-comment">//    参数七：任务的拒绝策略</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadPoolExecutor pool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,TimeUnit.SECONDS,<span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">10</span>), Executors.defaultThreadFactory(),<span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br>        pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br>        pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br><br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        多线程之间共享数据,在A线程修改数据的情况下,B没有看到A修改后的最新数据,这种现象就是”多线程的可见性问题”.</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><h3 id="1-使用volatile关键字-修饰该数据"><a href="#1-使用volatile关键字-修饰该数据" class="headerlink" title="1:使用volatile关键字,修饰该数据."></a>1:使用volatile关键字,修饰该数据.</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><h5 id="Money类"><a href="#Money类" class="headerlink" title="Money类"></a><code>Money类</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread1"><a href="#线程类MyThread1" class="headerlink" title="线程类MyThread1"></a><code>线程类MyThread1</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(Money.money == <span class="hljs-number">100000</span>)&#123;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread2"><a href="#线程类MyThread2" class="headerlink" title="线程类MyThread2"></a><code>线程类MyThread2</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Money.money = <span class="hljs-number">90000</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类Demo"><a href="#测试类Demo" class="headerlink" title="测试类Demo"></a><code>测试类Demo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-可以使用synchronized加锁解决"><a href="#2-可以使用synchronized加锁解决" class="headerlink" title="2:可以使用synchronized加锁解决."></a>2:可以使用synchronized加锁解决.</h3><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><h5 id="Money类-1"><a href="#Money类-1" class="headerlink" title="Money类"></a><code>Money类</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Money</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object lock = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread1-1"><a href="#线程类MyThread1-1" class="headerlink" title="线程类MyThread1"></a><code>线程类MyThread1</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Money.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Money.money != <span class="hljs-number">100000</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="线程类MyThread2-1"><a href="#线程类MyThread2-1" class="headerlink" title="线程类MyThread2"></a><code>线程类MyThread2</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (Money.lock) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            Money.money = <span class="hljs-number">90000</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类Demo-1"><a href="#测试类Demo-1" class="headerlink" title="测试类Demo"></a><code>测试类Demo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述:"></a>概述:</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>​            指的是: “多个操作,要么一起成功,要么一起失败”.</p><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a><code>test1</code></h5><p>volatile关键字不能保证原子性</p><h6 id="实现类MyAtomThread"><a href="#实现类MyAtomThread" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类AtomDemo"><a href="#测试类AtomDemo" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><h6 id="实现类MyAtomThread-1"><a href="#实现类MyAtomThread-1" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br>    <span class="hljs-keyword">private</span> Object lock = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                count++;<br>                System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类AtomDemo-1"><a href="#测试类AtomDemo-1" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="原子性问题-1"><a href="#原子性问题-1" class="headerlink" title="原子性问题"></a>原子性问题</h4><p>​            指的是:多个多线操作共同处理数据,并且出现了数据丢失的这种现象,就叫做”多线程的原子性问题”</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决:"></a>解决:</h3><p>​        使用原子性安全的类.</p><h4 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo1</span> </span>&#123;<br><span class="hljs-comment">//    public AtomicInteger()：                   初始化一个默认值为0的原子型Integer</span><br><span class="hljs-comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger();<br>        System.out.println(ac);<br><br>        AtomicInteger ac2 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">10</span>);<br>        System.out.println(ac2);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomIntergerDemo2</span> </span>&#123;<br><span class="hljs-comment">//    int get():                    获取值</span><br><span class="hljs-comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span><br><span class="hljs-comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span><br><span class="hljs-comment">//    int addAndGet(int data):     以原子方式将参数与对象中的值相加，并返回结果。</span><br><span class="hljs-comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        System.out.println(ac1.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int andIncrement = ac2.getAndIncrement();</span><br><span class="hljs-comment">//        System.out.println(andIncrement);</span><br><span class="hljs-comment">//        System.out.println(ac2.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac3.incrementAndGet();</span><br><span class="hljs-comment">//        System.out.println(i);//自增后的值</span><br><span class="hljs-comment">//        System.out.println(ac3.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac4.addAndGet(20);</span><br><span class="hljs-comment">//        System.out.println(i);</span><br><span class="hljs-comment">//        System.out.println(ac4.get());</span><br><br>        AtomicInteger ac5 = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">int</span> andSet = ac5.getAndSet(<span class="hljs-number">20</span>);<br>        System.out.println(andSet);<br>        System.out.println(ac5.get());<br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><h5 id="实现类MyAtomThread-2"><a href="#实现类MyAtomThread-2" class="headerlink" title="实现类MyAtomThread"></a><code>实现类MyAtomThread</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//private volatile int count = 0; //送冰淇淋的数量</span><br>    <span class="hljs-comment">//private Object lock = new Object();</span><br>    AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-comment">//synchronized (lock) &#123;</span><br><span class="hljs-comment">//                count++;</span><br><span class="hljs-comment">//                ac++;</span><br>            <span class="hljs-keyword">int</span> count = ac.incrementAndGet();<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>           <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//private volatile int count = 0; //送冰淇淋的数量</span><br>    <span class="hljs-comment">//private Object lock = new Object();</span><br>    AtomicInteger ac = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-comment">//synchronized (lock) &#123;</span><br><span class="hljs-comment">//                count++;</span><br><span class="hljs-comment">//                ac++;</span><br>            <span class="hljs-keyword">int</span> count = ac.incrementAndGet();<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>           <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类AtomDemo-2"><a href="#测试类AtomDemo-2" class="headerlink" title="测试类AtomDemo"></a><code>测试类AtomDemo</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyAtomThread atom = <span class="hljs-keyword">new</span> MyAtomThread();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a><code>源码解析</code></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//先自增，然后获取自增后的结果</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//+ 1 自增后的结果</span><br>        <span class="hljs-comment">//this 就表示当前的atomicInteger（值）</span><br>        <span class="hljs-comment">//1    自增一次</span><br>        <span class="hljs-keyword">return</span> U.getAndAddInt(<span class="hljs-keyword">this</span>, VALUE, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-keyword">long</span> offset, <span class="hljs-keyword">int</span> delta)</span> </span>&#123;<br>        <span class="hljs-comment">//v 旧值</span><br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-comment">//自旋的过程</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//不断的获取旧值</span><br>            v = getIntVolatile(o, offset);<br>            <span class="hljs-comment">//如果这个方法的返回值为false，那么继续自旋</span><br>            <span class="hljs-comment">//如果这个方法的返回值为true，那么自旋结束</span><br>            <span class="hljs-comment">//o 表示的就是内存值</span><br>            <span class="hljs-comment">//v 旧值</span><br>            <span class="hljs-comment">//v + delta 修改后的值</span><br>        &#125; <span class="hljs-keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));<br>            <span class="hljs-comment">//作用：比较内存中的值，旧值是否相等，如果相等就把修改后的值写到内存中，返回true。表示修改成功。</span><br>            <span class="hljs-comment">//                                 如果不相等，无法把修改后的值写到内存中，返回false。表示修改失败。</span><br>            <span class="hljs-comment">//如果修改失败，那么继续自旋。</span><br>        <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></div></td></tr></table></figure><pre><code class=" mermaid">graph LRid0(JavaSE进阶)---id14(第十四天)subgraph day14id14(第十四天)---id141(01-线程状态)id14(第十四天)---id142(02-线程池一基本原理)id14(第十四天)---id143(03-线程池-Executors默认线程池)id14(第十四天)---id144(04-线程池-Executors创建指定上限的线程池)id14(第十四天)---id145(05-线程池-ThreadPoolExecutor)id14(第十四天)---id146(05-线程池一参数详解)id14(第十四天)---id147(07-线程池一非默认任务拒绝策略)id14(第十四天)---id148(08-volatile-问题)id14(第十四天)---id149(09-volatile解决)id14(第十四天)---id1410(10-synchronized解决)id14(第十四天)---id1411(11-原子性)id14(第十四天)---id1412(12-volatile关键字不能保证原子性)id14(第十四天)---id1413(13-原子性-AtomicInteger)id14(第十四天)---id1414(14-AtomicInteger-内存解析)id14(第十四天)---id1415(15-AtomicInteger-源码解析)id14(第十四天)---id1416(16-悲观锁和乐观锁)id14(第十四天)---id1417(17-并发工具类-Hashtable)id14(第十四天)---id1418(18-并发工具类-ConcurrentHashMap基本使用)id14(第十四天)---id1419(19-并发工具类ConcurrentHashMap1.7原理)id14(第十四天)---id1420(20-并发工具类ConcurrentHashMap1.8原理)id14(第十四天)---id1421(21-并发工具类CountDownLatch)id14(第十四天)---id1422(22-并发工具类-Semaphore)end</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day13多线程1</title>
    <link href="/2017/04/02/SAd13/"/>
    <url>/2017/04/02/SAd13/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><span id="more"></span><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="并行"><a href="#并行" class="headerlink" title="并行:"></a>并行:</h3><p>​        同一时刻，有多个指令在多个CPU上同时执行。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发:"></a>并发:</h3><p>​        同一时刻，有多个指令在单个CPU上交替执行。<br>​    进程:<br>​        是正在运行的程序,包含多个线程.<br>​    线程:<br>​        是进程中的一条执行路径,是cpu的最小执行单元.</p><h2 id="多线程程序"><a href="#多线程程序" class="headerlink" title="多线程程序"></a>多线程程序</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        同时拥有多个执行路径的进程</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>​        1.多个线程之间交替执行.<br>​        2.每个线程执行的时间是随机的.<br>​        3.线程的执行顺序也是随机的.</p><h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:定义一个类,继承Thread类</li><li>2:重写run方法<div class="hljs code-wrapper"><pre><code>把需要执行的代码写入run方法中.</code></pre></div></li><li>3:创建自定义类的对象.</li><li>4:调用自定义对象的start方法,启动线程</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="1-创建线程类"><a href="#1-创建线程类" class="headerlink" title="1.创建线程类"></a>1.创建线程类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-CTRL-O选择run方法重写-把需要执行的代码写入run方法中"><a href="#2-CTRL-O选择run方法重写-把需要执行的代码写入run方法中" class="headerlink" title="2.CTRL+O选择run方法重写,把需要执行的代码写入run方法中."></a>2.CTRL+O选择run方法重写,把需要执行的代码写入run方法中.</h5><p><code>test卖票逻辑</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> ticket=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    <span class="hljs-keyword">if</span>(ticket==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ticket--;<br>        System.out.println(Thread.currentThread().getName()<br>                            + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-测试类中使用线程"><a href="#3-测试类中使用线程" class="headerlink" title="3.测试类中使用线程"></a>3.测试类中使用线程</h5><p>测试类<code>Demo</code>main方法中使用线程</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//使用线程</span><br>        MyThread mt=<span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//创建对象,类名 变量名=new 类名();</span><br>        mt.start();<br>        <span class="hljs-comment">//调用方法,变量名.方法名();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//代码就是线程在开启之后执行的代码</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;开启了&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        MyThread t2 = <span class="hljs-keyword">new</span> MyThread();<br>        t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br>        <span class="hljs-comment">//t1.run();//表示的仅仅是创建对象,用对象去调用方法,并没有开启线程.</span><br>        <span class="hljs-comment">//t2.run();</span><br>        <span class="hljs-comment">//开启一条线程</span><br>        t1.start();<br>        <span class="hljs-comment">//开启第二条线程</span><br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:自定义一个类,该类实现Runnable接口</li><li>2:重写run方法<br>  把需要执行的代码写入run方法中.</li><li>3:创建自定义类的对象</li><li>4:创建Thread类的对象<br>  把”自定义类的对象”作为构造方法的参数</li><li>5:调用Thread类的对象start方法,启动线程</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h5><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="CTRL-O重写run方法-把需要执行的代码写入run方法中"><a href="#CTRL-O重写run方法-把需要执行的代码写入run方法中" class="headerlink" title="CTRL+O重写run方法,把需要执行的代码写入run方法中."></a>CTRL+O重写run方法,把需要执行的代码写入run方法中.</h5><p><code>实现类MyRunnable</code>继承的Runnable的run方法中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//把需要执行的代码写入run方法中.</span><br>        <span class="hljs-comment">//线程启动后执行的代码</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;第二种方式实现多线程&quot;</span> + i);<br>        &#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类中使用线程"><a href="#测试类中使用线程" class="headerlink" title="测试类中使用线程"></a>测试类中使用线程</h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//使用线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建了一个参数的对象</span><br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br>        <span class="hljs-comment">//创建了一个线程对象,并把参数传递给这个线程.</span><br>        <span class="hljs-comment">//在线程启动之后,执行的就是参数里面的run方法</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br>        <br>        MyRunnable mr2 = <span class="hljs-keyword">new</span> MyRunnable();<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr2);<br>        t2.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3.实现Callable接口"></a>3.实现Callable接口</h3><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1:自定义一个类,该类实现Callable接口</li><li>2:重写call方法<div class="hljs code-wrapper"><pre><code>把需要执行的代码写入call方法中.</code></pre></div></li><li><div class="hljs code-wrapper"><pre><code>3:创建自定义类的对象</code></pre></div></li><li>  3:创建FutureTask类的对象<br>   把”自定义类的对象”作为构造方法的参数</li><li>  4:创建Thread类的对象<br>  把”FutureTask类的对象”作为构造方法的参数</li><li><div class="hljs code-wrapper"><pre><code>5:调用Thread类的对象start方法,启动线程</code></pre></div></li><li>  6:再调”FutureTask类的对象”的get方法<div class="hljs code-wrapper"><pre><code>      获取线程结束之后的结果。</code></pre></div></li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="1-创建实现类"><a href="#1-创建实现类" class="headerlink" title="1.创建实现类"></a>1.创建实现类</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-comment">//创建实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//把需要执行的代码写入call方法中.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行后的返回值&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-重写call方法-把需要执行的代码写入call方法中"><a href="#2-重写call方法-把需要执行的代码写入call方法中" class="headerlink" title="2.重写call方法,把需要执行的代码写入call方法中"></a>2.重写call方法,把需要执行的代码写入call方法中</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;跟女孩表白&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">//返回值就表示线程运行完毕之后的结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;答应&quot;</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-使用线程-获取返回值"><a href="#3-使用线程-获取返回值" class="headerlink" title="3.使用线程,获取返回值"></a>3.使用线程,获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">//使用线程</span><br>        MyCallable mc = <span class="hljs-keyword">new</span> MyCallable();<br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc);<br>        Thread t = <span class="hljs-keyword">new</span> Thread(ft);<br>        t.start();<br>        <span class="hljs-comment">//获取返回值</span><br>        String str = ft.get();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程API"><a href="#线程API" class="headerlink" title="线程API"></a>线程API</h2><h4 id="线程对象-setName-quot-线程的名字-quot"><a href="#线程对象-setName-quot-线程的名字-quot" class="headerlink" title="线程对象.setName(&quot;线程的名字&quot;)"></a><code>线程对象.setName(&quot;线程的名字&quot;)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public void setName(String name);</td><td align="center">//设置线程的名字</td></tr></tbody></table><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;@@@&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1,线程是有默认名字的,格式:Thread-编号</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       MyThread t1 = <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">&quot;小蔡&quot;</span>);<br>       MyThread t2 = <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">&quot;小强&quot;</span>);<br><br>       <span class="hljs-comment">//t1.setName(&quot;小蔡&quot;);</span><br>       <span class="hljs-comment">//t2.setName(&quot;小强&quot;);</span><br><br>       t1.start();<br>       t2.start();<br>   &#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-getName"><a href="#线程对象-getName" class="headerlink" title="线程对象.getName()"></a><code>线程对象.getName()</code></h4><h4 id="Thread-currentThread"><a href="#Thread-currentThread" class="headerlink" title="Thread.currentThread()"></a>Thread.currentThread()</h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public String getName();</td><td align="center">//获取线程的名字</td></tr><tr><td align="center">public static Thread currentThread();</td><td align="center">//获取当前线程对象</td></tr></tbody></table><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String name = Thread.currentThread().getName();<br>        <span class="hljs-comment">//获取当前线程对象,获取线程的名字</span><br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Thread-sleep-long-times"><a href="#Thread-sleep-long-times" class="headerlink" title="Thread.sleep(long times)"></a><code>Thread.sleep(long times)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public static void sleep(long times);</td><td align="center">//让当前线程休息times毫秒.</td></tr></tbody></table><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">/*System.out.println(&quot;睡觉前&quot;);</span><br><span class="hljs-comment">        Thread.sleep(3000);</span><br><span class="hljs-comment">        System.out.println(&quot;睡醒了&quot;);*/</span><br><br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-setPriority-1-10"><a href="#线程对象-setPriority-1-10" class="headerlink" title="线程对象.setPriority(1-10)"></a><code>线程对象.setPriority(1-10)</code></h4><p>设定线程优先级</p><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//优先级: 1 - 10 默认值:5</span><br>        MyCallable mc = <span class="hljs-keyword">new</span> MyCallable();<br><br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc);<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ft);<br>        t1.setName(<span class="hljs-string">&quot;飞机&quot;</span>);<br>        t1.setPriority(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//System.out.println(t1.getPriority());//5</span><br>        t1.start();<br><br>        MyCallable mc2 = <span class="hljs-keyword">new</span> MyCallable();<br><br>        FutureTask&lt;String&gt; ft2 = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc2);<br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ft2);<br>        t2.setName(<span class="hljs-string">&quot;坦克&quot;</span>);<br>        t2.setPriority(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//System.out.println(t2.getPriority());//5</span><br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现类MyCallable</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行完毕了&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="线程对象-setDaemon-boolean-b"><a href="#线程对象-setDaemon-boolean-b" class="headerlink" title="线程对象.setDaemon(boolean b)"></a><code>线程对象.setDaemon(boolean b)</code></h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public final void setDaemon(boolean b);</td><td align="center">//让当前线程变为守护线程.</td></tr></tbody></table><p><code>线程类MyThread1</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>线程类MyThread2</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>        MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br><br>        t1.setName(<span class="hljs-string">&quot;女神&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;备胎&quot;</span>);<br><br>        <span class="hljs-comment">//把第二个线程设置为守护线程</span><br>        <span class="hljs-comment">//当普通线程执行完之后,那么守护线程也没有继续运行下去的必要了.</span><br>        t2.setDaemon(<span class="hljs-keyword">true</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述:"></a>概述:</h3><p>​        多个线程之间,共同操作同一个数据(数据共享), 从而可能引发的数据信息不精确的现象, 这种现象被称之为:”线程安全问题”.</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><ul><li><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4></li><li><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4></li><li><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4></li></ul><p>​    提示:<br>​        所谓解决方案, 其实就是给操作数据的代码加上限定, 要求同一时间只允许一个线程操作. </p><h4 id="1-同步代码块"><a href="#1-同步代码块" class="headerlink" title="1.同步代码块"></a>1.同步代码块</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">格式:<br><span class="hljs-keyword">synchronized</span>(锁对象) &#123; <br>    <span class="hljs-comment">//需要限定的代码 </span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:&quot;锁&quot;可以是任意对象.    2:多个线程之间必须共用同一把&quot;锁&quot;    3:一般可以使用&quot;类名.class&quot;作为&quot;锁&quot;</code></pre></div><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><p><code>实现类Ticket</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//票的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object obj = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123;<span class="hljs-comment">//多个线程必须使用同一把锁.</span><br>                <span class="hljs-keyword">if</span>(ticket &lt;= <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticket--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*Ticket ticket1 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket2 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket3 = new Ticket();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Thread t1 = new Thread(ticket1);</span><br><span class="hljs-comment">        Thread t2 = new Thread(ticket2);</span><br><span class="hljs-comment">        Thread t3 = new Thread(ticket3);*/</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(ticket);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><p><code>线程类MyThread</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticketCount = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object obj = <span class="hljs-keyword">new</span> Object();<br><span class="hljs-comment">//为了保证一把锁加 static关键字</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (obj)&#123; <span class="hljs-comment">//就是当前的线程对象.</span><br>                <span class="hljs-keyword">if</span>(ticketCount &lt;= <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticketCount--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        MyThread t2 = <span class="hljs-keyword">new</span> MyThread();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-同步方法"><a href="#2-同步方法" class="headerlink" title="2.同步方法"></a>2.同步方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">格式:<br>访问修饰符 <span class="hljs-keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; <br>    <span class="hljs-comment">//需要限定的代码 (方法体)</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:同步方法也有锁对象.    2:普通同步方法锁对象是&quot;this&quot;    3:静态同步方法锁对象是&quot;类名.class&quot;</code></pre></div><p><code>实现类MyRunnable</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticketCount = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口一&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步方法</span><br>                <span class="hljs-keyword">boolean</span> result = synchronizedMthod();<br>                <span class="hljs-keyword">if</span>(result)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口二&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步代码块</span><br>                <span class="hljs-keyword">synchronized</span> (MyRunnable.class)&#123;<br>                    <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>                       <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">10</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        ticketCount--;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">synchronizedMthod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            ticketCount--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mr);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mr);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-Lock锁-了解"><a href="#3-Lock锁-了解" class="headerlink" title="3.Lock锁(了解)"></a>3.Lock锁(了解)</h4><p>​    格式:<br>​        </p><div class="hljs code-wrapper"><pre><code>注意:    1:Lock对象本身,可以看作是当前同步块的&quot;锁对象&quot;.所以也需要保证唯一    2:如果在unlock方法执行之前,停止了代码的运行,则有可能&quot;锁对象&quot;不会被释放    3:unlock一般需要放在finally模块中</code></pre></div><p><code>实现类Ticket</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//票的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">private</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//synchronized (obj)&#123;//多个线程必须使用同一把锁.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br>                <span class="hljs-keyword">if</span> (ticket &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                    ticket--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>            <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*Ticket ticket1 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket2 = new Ticket();</span><br><span class="hljs-comment">        Ticket ticket3 = new Ticket();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Thread t1 = new Thread(ticket1);</span><br><span class="hljs-comment">        Thread t2 = new Thread(ticket2);</span><br><span class="hljs-comment">        Thread t3 = new Thread(ticket3);*/</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(ticket);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(ticket);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="死锁-了解"><a href="#死锁-了解" class="headerlink" title="死锁(了解)"></a>死锁(了解)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​        多线程之间,相互占有对方资源,并且不释放,从而导致的”线程卡死”这种现象,就称之为”死锁”.</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h3><p>​        1:多线程之间<br>​        2:有两把以上的锁.<br>​        3:锁之间交叉嵌套.</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决:"></a>解决:</h3><p>​        以后写代码,尽量不要让锁交叉嵌套.</p><h5 id="死锁代码案例"><a href="#死锁代码案例" class="headerlink" title="死锁代码案例"></a><code>死锁代码案例</code></h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object objA = <span class="hljs-keyword">new</span> Object();<br>        Object objB = <span class="hljs-keyword">new</span> Object();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                    <span class="hljs-comment">//线程一</span><br>                    <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小康同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                    <span class="hljs-comment">//线程二</span><br>                    <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小薇同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="生产者消费者案例-线程唤醒等待机制"><a href="#生产者消费者案例-线程唤醒等待机制" class="headerlink" title="生产者消费者案例(线程唤醒等待机制)"></a>生产者消费者案例(线程唤醒等待机制)</h5><h6 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h6><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie();<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker();<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>桌子类Desk</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desk</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object lock = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(Desk.flag)&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-keyword">false</span>;<br>                        Desk.lock.notifyAll();<br>                        Desk.count--;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(!Desk.flag)&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-keyword">true</span>;<br>                        Desk.lock.notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2优化"><a href="#test2优化" class="headerlink" title="test2优化"></a>test2优化</h6><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        Desk desk = <span class="hljs-keyword">new</span> Desk();<br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie(desk);<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker(desk);<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>桌子类Desk</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desk</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-comment">//public static boolean flag = false;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-comment">//public static int count = 10;</span><br>    <span class="hljs-comment">//以后我们在使用这种必须有默认值的变量</span><br>   <span class="hljs-comment">// private int count = 10;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-comment">//public static final Object lock = new Object();</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object lock = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Desk</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-keyword">false</span>,<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Desk</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, <span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFlag</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlag</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getLock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Desk&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;flag=&quot;</span> + flag +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, lock=&quot;</span> + lock +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foodie</span><span class="hljs-params">(Desk desk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.desk = desk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(desk.isFlag())&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-keyword">false</span>);<br>                        desk.getLock().notifyAll();<br>                        desk.setCount(desk.getCount() - <span class="hljs-number">1</span>);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cooker</span><span class="hljs-params">(Desk desk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.desk = desk;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(!desk.isFlag())&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-keyword">true</span>);<br>                        desk.getLock().notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="阻塞队列实现等待唤醒机制"><a href="#阻塞队列实现等待唤醒机制" class="headerlink" title="阻塞队列实现等待唤醒机制"></a><code>阻塞队列实现等待唤醒机制</code></h5><p><code>测试类Demo</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        // 创建阻塞队列的对象,容量为 1</span><br><span class="hljs-comment">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = new ArrayBlockingQueue&lt;&gt;(1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 存储元素</span><br><span class="hljs-comment">        arrayBlockingQueue.put(&quot;汉堡包&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 取元素</span><br><span class="hljs-comment">        System.out.println(arrayBlockingQueue.take());</span><br><span class="hljs-comment">        System.out.println(arrayBlockingQueue.take()); // 取不到会阻塞</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;程序结束了&quot;);</span><br><span class="hljs-comment">        */</span><br>        ArrayBlockingQueue&lt;String&gt; bd = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">1</span>);<br><br><br>        Foodie f = <span class="hljs-keyword">new</span> Foodie(bd);<br>        Cooker c = <span class="hljs-keyword">new</span> Cooker(bd);<br><br>        f.start();<br>        c.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>消费者Foodie线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.threaddemo015.Desk;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Foodie</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bd = bd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>        <span class="hljs-comment">//1. while(true)死循环</span><br>        <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>        <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>        <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String take = bd.take();<br>                System.out.println(<span class="hljs-string">&quot;吃货将&quot;</span> + take + <span class="hljs-string">&quot;拿出来吃了&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>生产者Cooker线程类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.threaddemo015.Desk;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cooker</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bd = bd;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bd.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;厨师放入一个汉堡包&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day12其他流</title>
    <link href="/2017/04/02/SAd12/"/>
    <url>/2017/04/02/SAd12/</url>
    
    <content type="html"><![CDATA[<h1 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h1><span id="more"></span><h2 id="基本字符流"><a href="#基本字符流" class="headerlink" title="基本字符流"></a>基本字符流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><div class="hljs code-wrapper"><pre><code>字符流在读写时, 操作的都是字符基本字符流  =  基本字节流 + 默认编码表</code></pre></div><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法:"></a><code>构造方法:</code></h5><table><thead><tr><th align="center">构造方法:</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public FileReader(String fileName);</td><td align="center"></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><code>常用方法</code></h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">一次读取一个字符,返回值为读取字符的编码,读到-1时结束</td></tr><tr><td align="center">int read( char[] chs )</td><td align="center">一次读取一个字符数组,返回值为读取到的字符个数,读到-1时结束</td></tr></tbody></table><h6 id="test1"><a href="#test1" class="headerlink" title="test1"></a><code>test1</code></h6><p><code>测试类CharStreamDemo1</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//使用构造方法创建字符输入流</span><br>        <span class="hljs-keyword">int</span> b ;<br>        <span class="hljs-keyword">while</span>((b = fis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br>        <span class="hljs-comment">//调用read()方法判断是否读完</span><br>        fis.close();<br>        <span class="hljs-comment">//关闭字符输入流</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2"><a href="#test2" class="headerlink" title="test2"></a><code>test2</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建字符输入流的对象</span><br>       <span class="hljs-comment">// FileReader fr = new FileReader(new File(&quot;charstream\\a.txt&quot;));</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br><br>        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-comment">//一次读取一个字符</span><br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test3"><a href="#test3" class="headerlink" title="test3"></a><code>test3</code></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//一次读取多个字符。</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//创建一个数组</span><br>        <span class="hljs-keyword">char</span> [] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br><br>        <span class="hljs-comment">//read方法还是读取，但是是一次读取多个字符</span><br>        <span class="hljs-comment">//他把读到的字符都存入到chars数组。</span><br>        <span class="hljs-comment">//返回值：表示本次读到了多少个字符。</span><br>        <span class="hljs-keyword">while</span>((len = fr.read(chars))!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(chars,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>String类</code></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">byte[] getBytes()</td><td align="center">字符串转字节数组,返回一个字节数组</td></tr><tr><td align="center">byte[] getBytes(String charsetName)</td><td align="center">使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</td></tr></tbody></table><p><code>Arrays</code></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Arrays.toString(byte[ ] b)</td><td align="center">字节数组转字符串</td></tr></tbody></table><p><code>测试类CharStreamDemo2</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">// String(byte[] bytes)：</span><br>                <span class="hljs-comment">//通过使用平台的默认字符集解码指定的字节数组来构造新的 String</span><br>       <span class="hljs-comment">// String(byte[] bytes, String charsetName)：</span><br>                <span class="hljs-comment">//通过指定的字符集解码指定的字节数组来构造新的 String</span><br><br>        <span class="hljs-comment">//UTF-8</span><br>        <span class="hljs-keyword">byte</span> [] bytes1 = &#123;-<span class="hljs-number">23</span>, -<span class="hljs-number">69</span>, -<span class="hljs-number">111</span>, -<span class="hljs-number">23</span>, -<span class="hljs-number">87</span>, -<span class="hljs-number">84</span>, -<span class="hljs-number">25</span>, -<span class="hljs-number">88</span>, -<span class="hljs-number">117</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">113</span>, -<span class="hljs-number">27</span>, -<span class="hljs-number">111</span>, -<span class="hljs-number">104</span>&#125;;<br>        <span class="hljs-comment">//gbk</span><br>        <span class="hljs-keyword">byte</span> [] bytes2 = &#123;-<span class="hljs-number">70</span>, -<span class="hljs-number">38</span>, -<span class="hljs-number">62</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">77</span>, -<span class="hljs-number">52</span>, -<span class="hljs-number">48</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">44</span>, -<span class="hljs-number">79</span>&#125;;<br><br>        <span class="hljs-comment">//利用默认的UTF-8进行解码</span><br>        String s1 = <span class="hljs-keyword">new</span> String(bytes1);<br>        System.out.println(s1);<span class="hljs-comment">//黑马程序员</span><br><br>        <span class="hljs-comment">//利用指定的GBK进行解码</span><br>        String s2 = <span class="hljs-keyword">new</span> String(bytes2,<span class="hljs-string">&quot;gbk&quot;</span>);<br>        System.out.println(s2);<span class="hljs-comment">//黑马程序员</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        <span class="hljs-comment">// byte[] getBytes()方法</span><br>        <span class="hljs-comment">//使用平台的默认字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</span><br>        <span class="hljs-comment">// byte[] getBytes(String charsetName)方法</span><br>        <span class="hljs-comment">//使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</span><br><br>        String s = <span class="hljs-string">&quot;黑马程序员&quot;</span>;<br>        <span class="hljs-comment">//利用idea默认的UTF-8将中文编码为一系列的字节</span><br>        <span class="hljs-keyword">byte</span>[] bytes1 = s.getBytes();<br>        System.out.println(Arrays.toString(bytes1));<br><br>        <span class="hljs-comment">//byte[] bytes2 = s.getBytes(&quot;UTF-8&quot;);</span><br>        <span class="hljs-keyword">byte</span>[] bytes2 = s.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        System.out.println(Arrays.toString(bytes2));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法:"></a><code>构造方法:</code></h5><table><thead><tr><th align="center">构造方法:</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public FileWriter(String fileName)</td><td align="center">创建字符输出流的对象</td></tr><tr><td align="center">FileWriter(String fileName, boolean append)</td><td align="center"></td></tr></tbody></table><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a><code>常用方法</code></h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void write( char c )</td><td align="center">写出一个字符</td></tr><tr><td align="center">void write( char[] chs )</td><td align="center">写出一个字符组中的所有字符</td></tr><tr><td align="center">void write( char[] chs ,int off,int len )</td><td align="center">写出字符数组的一部分,从off开始,写len个字符</td></tr><tr><td align="center">void write( String str )</td><td align="center">写出一个字符串</td></tr><tr><td align="center">void write( String str ,int offset,int len )</td><td align="center">写出字符串的一部分,从offset开始,写len个字符</td></tr><tr><td align="center">void flush( )</td><td align="center">清空缓冲区(全部写到硬盘里)</td></tr><tr><td align="center">void close( )</td><td align="center">清空缓冲区并且关闭流</td></tr></tbody></table><h6 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a><code>test1</code></h6><p><code>测试类CharStreamDemo3</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建字符输出流的对象</span><br>        <span class="hljs-comment">//FileWriter fw = new FileWriter(new File(&quot;charstream\\a.txt&quot;));</span><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br><br>        <span class="hljs-comment">/*//写出数据</span><br><span class="hljs-comment">        //void write(int c)            写一个字符</span><br><span class="hljs-comment">        fw.write(97);</span><br><span class="hljs-comment">        fw.write(98);</span><br><span class="hljs-comment">        fw.write(99);*/</span><br><br><br>        <span class="hljs-comment">//void write(char[] cbuf)      写出一个字符数组</span><br>       <span class="hljs-comment">/* char [] chars = &#123;97,98,99,100,101&#125;;</span><br><span class="hljs-comment">        fw.write(chars);*/</span><br><br><br>        <span class="hljs-comment">//void write(char[] cbuf, int off, int len)    写出字符数组的一部分</span><br>        <span class="hljs-comment">/*char [] chars = &#123;97,98,99,100,101&#125;;</span><br><span class="hljs-comment">        fw.write(chars,0,3);*/</span><br><br><br>        <span class="hljs-comment">//void write(String str)       写一个字符串</span><br>       <span class="hljs-comment">/* String line = &quot;黑马程序员abc&quot;;</span><br><span class="hljs-comment">        fw.write(line);*/</span><br><br><br>        <span class="hljs-comment">//void write(String str, int off, int len)     写一个字符串的一部分</span><br>        String line = <span class="hljs-string">&quot;黑马程序员abc&quot;</span>;<br>        fw.write(line,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//释放资源</span><br>        fw.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a><code>test2</code></h6><p><code>测试类CharStreamDemo4</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//fw.write(&quot;黑马程序员&quot;);</span><br>        <span class="hljs-comment">//fw.write(97);</span><br>        fw.write(<span class="hljs-string">&quot;97&quot;</span>);<br><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a><code>test3</code></h6><p><code>测试类CharStreamDemo5</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//flush()刷新流。刷新完毕之后，还可以继续写数据</span><br>        <span class="hljs-comment">//close()关闭流。释放资源。一旦关闭，就不能写数据</span><br><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br><br>        fw.write(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>        <span class="hljs-comment">//fw.flush();</span><br>        fw.write(<span class="hljs-string">&quot;666&quot;</span>);<br>        <span class="hljs-comment">//fw.flush();</span><br><br>        fw.close();<br><br>        fw.write(<span class="hljs-string">&quot;aaa&quot;</span>);<span class="hljs-comment">//Stream closed</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="test4"><a href="#test4" class="headerlink" title="test4"></a><code>test4</code></h6><p>从控制台录入数据写入文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//将键盘录入的用户名和密码保存到本地实现永久化存储</span><br>        <span class="hljs-comment">//要求：用户名独占一行，密码独占一行</span><br><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1，实现键盘录入，把用户名和密码录入进来</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请录入用户名&quot;</span>);<br>        String username = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请录入密码&quot;</span>);<br>        String password = sc.next();<br><br>        <span class="hljs-comment">//2.分别把用户名和密码写到本地文件。</span><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//将用户名和密码写到文件中</span><br>        fw.write(username);<br>        <span class="hljs-comment">//表示写出一个回车换行符 windows \r\n  MacOS \r  Linux \n</span><br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        fw.write(password);<br>        <span class="hljs-comment">//刷新流</span><br>        fw.flush();<br>        <span class="hljs-comment">//释放资源</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        任何字符流都内置的有缓冲区</p><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        字符缓冲流  =  基本字符流 + 缓冲区(8K数组)</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a><code>BufferedWriter</code></h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">构造方法:</td><td align="left">public BufferedWriter(Writer w);</td></tr><tr><td align="center">特有方法:</td><td align="left">public void newLine();  //写出一个换行,该换行会根据操作系统自动变化.</td></tr></tbody></table><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲输出流</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br>        <span class="hljs-comment">//写出数据</span><br>        <span class="hljs-comment">//实际写出的是97对应的字符a</span><br>        bw.write(<span class="hljs-number">97</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//实际写出的是97 - 101 对应的字符 abcde</span><br>        <span class="hljs-keyword">char</span> [] chars = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>&#125;;<br>        bw.write(chars);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//实际写的是abc</span><br>        bw.write(chars,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//会把字符串的内容原样写出</span><br>        bw.write(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>        bw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        <span class="hljs-comment">//会把字符串的一部分写出 abcde</span><br>        String line = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>        bw.write(line,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br><br>        bw.flush();<br><br>        bw.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输出流BufferedWrite ： newLine  跨平台的换行符</span><br><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//写出数据</span><br>        bw.write(<span class="hljs-string">&quot;黑马程序员666&quot;</span>);<br>        <span class="hljs-comment">//跨平台的回车换行</span><br>        bw.newLine();<br>        bw.write(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        <span class="hljs-comment">//跨平台的回车换行</span><br>        bw.newLine();<br>        bw.write(<span class="hljs-string">&quot;-------------&quot;</span>);<br><br>        <span class="hljs-comment">//刷新流</span><br>        bw.flush();<br>        <span class="hljs-comment">//释放资源</span><br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​    </p><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a><code>BufferedReader</code></h3><table><thead><tr><th align="center">方法</th><th>说明</th></tr></thead><tbody><tr><td align="center">构造方法:</td><td>public BufferedReader(Reader r);</td></tr><tr><td align="center">特有方法:</td><td>public String readLine();  //一次读取一行数据,如果读取不到,则返回null</td></tr></tbody></table><h4 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲输入流</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br>        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-keyword">char</span> [] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = br.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(chars,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输入流BufferedReader： readLine 读一整行</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//读取数据</span><br>        String line1 = br.readLine();<br>        String line2 = br.readLine();<br>        String line3 = br.readLine();<br><br>        <span class="hljs-comment">//在之前，如果读不到数据，返回-1</span><br>        <span class="hljs-comment">//但是readLine如果读不到数据返回null</span><br>        String line4 = br.readLine();<br>        String line5 = br.readLine();<br><br><br>        System.out.println(line1);<br>        System.out.println(line2);<br>        System.out.println(line3);<br>        System.out.println(line4);<br>        System.out.println(line5);<br><br>        <span class="hljs-comment">// 释放资源</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-2"><a href="#test3-2" class="headerlink" title="test3"></a><code>test3</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo13</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//字符缓冲流的特有功能</span><br>        <span class="hljs-comment">//字符缓冲输入流BufferedReader： readLine 读一整行</span><br><br>        <span class="hljs-comment">//创建对象</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\a.txt&quot;</span>));<br><br><br>        <span class="hljs-comment">//使用循环来进行改进</span><br>        String line;<br>        <span class="hljs-comment">//可以读取一整行数据。一直读，读到回车换行为止。</span><br>        <span class="hljs-comment">//但是他不会读取回车换行符。</span><br>        <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        br.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="读取文件中的数据，排序后再次写到本地文件-应用场景"><a href="#读取文件中的数据，排序后再次写到本地文件-应用场景" class="headerlink" title="读取文件中的数据，排序后再次写到本地文件(应用场景)"></a>读取文件中的数据，排序后再次写到本地文件(应用场景)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharStreamDemo14</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//需求：读取文件中的数据，排序后再次写到本地文件</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.要把文件中的数据读取进来。</span><br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;charstream\\sort.txt&quot;</span>));<br>        <span class="hljs-comment">//输出流一定不能写在这里，因为会清空文件中的内容</span><br>        <span class="hljs-comment">//BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;charstream\\sort.txt&quot;));</span><br><br>        String line = br.readLine();<br>        System.out.println(<span class="hljs-string">&quot;读取到的数据为&quot;</span> + line);<br>        br.close();<br><br>        <span class="hljs-comment">//2.按照空格进行切换</span><br>        String[] split = line.split(<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//9 1 2 5 3 10 4 6 7 8</span><br>        <span class="hljs-comment">//3.把字符串类型的数组变成int类型</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[split.length];<br>        <span class="hljs-comment">//遍历split数组，可以进行类型转换。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>            String smallStr = split[i];<br>            <span class="hljs-comment">//类型转换</span><br>            <span class="hljs-keyword">int</span> number = Integer.parseInt(smallStr);<br>            <span class="hljs-comment">//把转换后的结果存入到arr中</span><br>            arr[i] = number;<br>        &#125;<br>        <span class="hljs-comment">//4.排序</span><br>        Arrays.sort(arr);<br>        System.out.println(Arrays.toString(arr));<br><br><br>        <span class="hljs-comment">//5.把排序之后结果写回到本地 1 2 3 4...</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;charstream\\sort.txt&quot;</span>));<br>        <span class="hljs-comment">//写出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            bw.write(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>            bw.flush();<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        bw.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        专门用于输出的IO流<br>​        该流中包含了一些用于输出的方法</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a><code>PrintStream</code></h4><p>​            构造方法: public  PrintStream(OutputStream os)</p><h4 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a><code>PrintWriter</code></h4><p>​            构造方法: public  PrintWriter(Writer w)</p><h3 id="特有方法："><a href="#特有方法：" class="headerlink" title="特有方法："></a>特有方法：</h3><h4 id="print"><a href="#print" class="headerlink" title="print();"></a><code>print();</code></h4><h4 id="println"><a href="#println" class="headerlink" title="println();"></a><code>println();</code></h4><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>​        转换流 = 基本字节流 + 指定编码表</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h4 id="可以按照指定的编码来读写文件"><a href="#可以按照指定的编码来读写文件" class="headerlink" title="可以按照指定的编码来读写文件"></a>可以按照指定的编码来读写文件</h4><p>​            JDK11之后,基本字符流中也有指定编码表的功能<br>​            public FileReader(String fileName, Charset charset)<br>​            public FileWriter(String fileName, Charset charset)</p><h4 id="把字节流转换为字符流"><a href="#把字节流转换为字符流" class="headerlink" title="把字节流转换为字符流"></a>把字节流转换为字符流</h4><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><h4 id="InputStreanReader"><a href="#InputStreanReader" class="headerlink" title="InputStreanReader"></a>InputStreanReader</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public InputStreanReader(InputStream in, String charsetName);</td><td align="center">注意:FileReader = InputStreamReader + 默认编码表;</td></tr></tbody></table><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public OutputStreamWriter(OutputStream os, String charsetName);</td><td align="center">FileWriter = OutputStreamWriter + 默认编码表;</td></tr></tbody></table><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//在JDK11之后,字符流新推出了一个构造,也可以指定编码表</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>, Charset.forName(<span class="hljs-string">&quot;gbk&quot;</span>));<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span> ((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        fr.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//如何解决乱码现象</span><br>        <span class="hljs-comment">//文件是什么码表,那么咱们就必须使用什么码表去读取.</span><br>        <span class="hljs-comment">//我们就要指定使用GBK码表去读取文件.</span><br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>),<span class="hljs-string">&quot;gbk&quot;</span>);<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch = isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        isr.close();<br><br><br>        OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\b.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        osw.write(<span class="hljs-string">&quot;我爱学习,谁也别打扰我&quot;</span>);<br>        osw.close();<br>    &#125;<br><br>    <span class="hljs-comment">//这个方法直接读取会产生乱码</span><br>    <span class="hljs-comment">//因为文件是GBK码表</span><br>    <span class="hljs-comment">//而idea默认的是UTF-8编码格式.</span><br>    <span class="hljs-comment">//所以两者不一致,导致乱码</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span> ((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) ch);<br>        &#125;<br>        fr.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​                </p><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>​        专门用来读写对象的IO流</p><h3 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h3><h4 id="对象输出流-序列化流"><a href="#对象输出流-序列化流" class="headerlink" title="对象输出流(序列化流):"></a>对象输出流(序列化流):</h4><h5 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h5><p>​                 <code>ObjectOutputStream</code></p><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><p>​                <code>public ObjectOutputStream(OutputStream os);</code></p><h5 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法:"></a>特有方法:</h5><p>​                <code>void writeObject(Object obj);</code></p><h4 id="对象输入流-反序列化流"><a href="#对象输入流-反序列化流" class="headerlink" title="对象输入流(反序列化流):"></a>对象输入流(反序列化流):</h4><h5 id="类名-1"><a href="#类名-1" class="headerlink" title="类名"></a>类名</h5><p>​                  <code>ObjectInputStream</code></p><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5><p>​                <code>public ObjectInputStream(InputStream is);</code></p><h5 id="特有方法-1"><a href="#特有方法-1" class="headerlink" title="特有方法:"></a>特有方法:</h5><p>​                <code>Object readObject();</code></p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​        1.被序列化的对象必须实现Serializable接口<br>​        2.被序列化的类的内部需要添加一个序列化号<br>​            private static final long serialVersionUID = 1L;<br>​            在类的后边选择”Alt + 回车”<br>​        3.如果某个成员变量不想参与序列化,则可以使用transient关键字修饰<br>​            private transient int age;<br>​        4.序列化对象的个数 == 反序列化对象个数</p><h3 id="应用与练习"><a href="#应用与练习" class="headerlink" title="应用与练习"></a>应用与练习</h3><h4 id="User"><a href="#User" class="headerlink" title="User"></a><code>User</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">//如果想要这个类的对象能被序列化,那么这个类必须要实现一个接口.Serializable</span><br><br><span class="hljs-comment">//Serializable 接口的意义</span><br><span class="hljs-comment">//称之为是一个标记性接口,里面没有任何的抽象方法</span><br><span class="hljs-comment">//只要一个类实现了这个Serializable接口,那么就表示这个类的对象可以被序列化.</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">//serialVersionUID 序列号</span><br>    <span class="hljs-comment">//如果我们自己没有定义,那么虚拟机会根据类中的信息会自动的计算出一个序列号.</span><br>    <span class="hljs-comment">//问题:如果我们修改了类中的信息.那么虚拟机会再次计算出一个序列号.</span><br><br>    <span class="hljs-comment">//第一步:把User对象序列化到本地. --- -5824992206458892149</span><br>    <span class="hljs-comment">//第二步:修改了javabean类. 导致 --- 类中的序列号 4900133124572371851</span><br>    <span class="hljs-comment">//第三步:把文件中的对象读到内存. 本地中的序列号和类中的序列号不一致了.</span><br><br>    <span class="hljs-comment">//解决?</span><br>    <span class="hljs-comment">//不让虚拟机帮我们自动计算,我们自己手动给出.而且这个值不要变.</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String username, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo2"><a href="#ConvertedDemo2" class="headerlink" title="ConvertedDemo2"></a><code>ConvertedDemo2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br>        <span class="hljs-comment">//需求:把这个用户信息保存到本地文件去.</span><br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        bw.write(user.getUsername());<br>        bw.newLine();<br>        bw.write(user.getPassword());<br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo3"><a href="#ConvertedDemo3" class="headerlink" title="ConvertedDemo3"></a><code>ConvertedDemo3</code></h4><h5 id="对象输入流"><a href="#对象输入流" class="headerlink" title="对象输入流"></a>对象输入流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(user);<br>        oos.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo4"><a href="#ConvertedDemo4" class="headerlink" title="ConvertedDemo4"></a><code>ConvertedDemo4</code></h4><h5 id="对象输出流"><a href="#对象输出流" class="headerlink" title="对象输出流"></a>对象输出流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        User o = (User) ois.readObject();<br>        System.out.println(o);<br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo5"><a href="#ConvertedDemo5" class="headerlink" title="ConvertedDemo5"></a><code>ConvertedDemo5</code></h4><h5 id="综合运用对象输出流和对象输入流"><a href="#综合运用对象输出流和对象输入流" class="headerlink" title="综合运用对象输出流和对象输入流"></a>综合运用对象输出流和对象输入流</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.写对象</span><br>        <span class="hljs-comment">//2.修改javabean类</span><br>        <span class="hljs-comment">//3.读对象</span><br><br>        <span class="hljs-comment">//写对象 --- 序列化</span><br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">//读对象 --- 反序列化</span><br>       method2();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        User o = (User) ois.readObject();<br>        System.out.println(o);<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;qwer&quot;</span>);<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(user);<br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Student"><a href="#Student" class="headerlink" title="Student"></a><code>Student</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">2L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo6"><a href="#ConvertedDemo6" class="headerlink" title="ConvertedDemo6"></a><code>ConvertedDemo6</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杜子腾&quot;</span>,<span class="hljs-number">16</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        oos.writeObject(s1);<br>        oos.writeObject(s2);<br>        oos.writeObject(s3);<br><br>        oos.close();<br><br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        Object obj;<br>      <span class="hljs-comment">/*  while((obj = ois.readObject()) != null)&#123;</span><br><span class="hljs-comment">            System.out.println(obj);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               Object o = ois.readObject();<br>               System.out.println(o);<br>           &#125; <span class="hljs-keyword">catch</span> (EOFException e) &#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ConvertedDemo7"><a href="#ConvertedDemo7" class="headerlink" title="ConvertedDemo7"></a><code>ConvertedDemo7</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertedDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;杜子腾&quot;</span>,<span class="hljs-number">16</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br><br>        <span class="hljs-comment">//我们往本地文件中写的就是一个集合</span><br>        oos.writeObject(list);<br><br>        oos.close();<br><br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;a.txt&quot;</span>));<br>        ArrayList&lt;Student&gt; list2 = (ArrayList&lt;Student&gt;) ois.readObject();<br>        <span class="hljs-keyword">for</span> (Student student : list2) &#123;<br>            System.out.println(student);<br>        &#125;<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述:"></a>概述:</h3><p>​        Properties本质上是一个Map集合.<br>​        专门用于读取配置文件(文件中只包含键值对)</p><h3 id="特有方法-2"><a href="#特有方法-2" class="headerlink" title="特有方法:"></a>特有方法:</h3><table><thead><tr><th align="center">特有方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void setProperty(String key,String value);</td><td align="center">就相当于map集合的put方法</td></tr><tr><td align="center">String getProperty(String key);</td><td align="center">就相当于map集合的get方法</td></tr><tr><td align="center">void load(Reader fr);</td><td align="center">把配置文件中的键值对,读取到Properties集合中.</td></tr><tr><td align="center">void store(Writer fw, String comments);</td><td align="center">把Properties集合中的键值对,同步到配置文件中.</td></tr></tbody></table><h4 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a><code>test1</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//增</span><br>        prop.put(<span class="hljs-string">&quot;小龙女&quot;</span>,<span class="hljs-string">&quot;尹志平&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;郭襄&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;黄蓉&quot;</span>,<span class="hljs-string">&quot;欧阳克&quot;</span>);<br>        System.out.println(prop);<br><br>        <span class="hljs-comment">//删</span><br>        <span class="hljs-comment">//prop.remove(&quot;郭襄&quot;);</span><br>        <span class="hljs-comment">//System.out.println(prop);</span><br><br>        <span class="hljs-comment">//改</span><br>        <span class="hljs-comment">//put --- 如果键不存在,那么就添加,如果键存在,那么就覆盖.</span><br>        prop.put(<span class="hljs-string">&quot;小龙女&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>);<br>        System.out.println(prop);<br>        <span class="hljs-comment">//查</span><br><br>        <span class="hljs-comment">//Object value = prop.get(&quot;黄蓉&quot;);</span><br>        <span class="hljs-comment">//System.out.println(value);</span><br><br>        <span class="hljs-comment">//遍历</span><br>        Set&lt;Object&gt; keys = prop.keySet();<br>        <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>            Object value = prop.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//装的是所有的键值对对象.</span><br>        Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = prop.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entries) &#123;<br>            Object key = entry.getKey();<br>            Object value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a><code>test2</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//Object setProperty(String key, String value) --- put</span><br>                    <span class="hljs-comment">//设置集合的键和值，都是String类型，底层调用 Hashtable方法 put</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.setProperty(<span class="hljs-string">&quot;江苏&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;安徽&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;山东&quot;</span>,<span class="hljs-string">&quot;济南&quot;</span>);<br><br>        System.out.println(prop);<br>        <span class="hljs-comment">//String getProperty(String key)  --- get</span><br>                    <span class="hljs-comment">//使用此属性列表中指定的键搜索属性</span><br><br>       <span class="hljs-comment">/* String value = prop.getProperty(&quot;江苏&quot;);</span><br><span class="hljs-comment">        System.out.println(value);*/</span><br><br><br>        <span class="hljs-comment">//Set&lt;String&gt; stringPropertyNames()  --- keySet</span><br>                    <span class="hljs-comment">//从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span><br><br>        Set&lt;String&gt; keys = prop.stringPropertyNames();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            String value = prop.getProperty(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-3"><a href="#test3-3" class="headerlink" title="test3"></a><code>test3</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//void load(Reader reader)                     将本地文件中的键值对数据读取到集合中</span><br>        <span class="hljs-comment">//void store(Writer writer, String comments)   将集合中的数据以键值对形式保存在本地</span><br><br><br>        <span class="hljs-comment">//读取</span><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        <span class="hljs-comment">//调用完了load方法之后,文件中的键值对数据已经在集合中了.</span><br>        prop.load(fr);<br>        fr.close();<br><br>        System.out.println(prop);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4-1"><a href="#test4-1" class="headerlink" title="test4"></a><code>test4</code></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//void load(Reader reader)                     将本地文件中的键值对数据读取到集合中</span><br>        <span class="hljs-comment">//void store(Writer writer, String comments)   将集合中的数据以键值对形式保存在本地</span><br><br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.put(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;456&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;789&quot;</span>);<br><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br>        prop.store(fw,<span class="hljs-keyword">null</span>);<br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="day12思维导图"><a href="#day12思维导图" class="headerlink" title="day12思维导图"></a><code>day12思维导图</code></h2><pre><code class=" mermaid">graph LRid0(JavaSE进阶)---id12(第十二天)        subgraph day12        id12(第十二天)---id121(01-字节流操作文本文件出现乱码的问题)        id12(第十二天)---id122(02-字符流-编码表)        id12(第十二天)---id123(03-字符流编码和解码的方法)        id12(第十二天)---id124(04-字节流读取中文出现乱码的原因)        id12(第十二天)---id125(05-字符流-读取中文的过程)        id12(第十二天)---id126(06-字符流-写出数据)        id12(第十二天)---id127(07-字符流-写出数据的注意事项)        id12(第十二天)---id128(08-字符流-flush和close方法)        id12(第十二天)---id129(09-字符流-读取数据)        id12(第十二天)---id1210(10-字符流-练习)        id12(第十二天)---id1211(11-字符缓冲输入流-读取数据)        id12(第十二天)---id1212(12-字符缓冲输出流-输出数据)        id12(第十二天)---id1213(13-缓冲流特有方法)        id12(第十二天)---id1214(14-缓冲流-练习)        id12(第十二天)---id1215(15-10流-小结)        id12(第十二天)---id1216(16-转换流一概念)        id12(第十二天)---id1217(17-转换流-指定编码读写)        id12(第十二天)---id1218(18-对象操作流-基本特点)        id12(第十二天)---id1219(19-对象操作流-序列化)        id12(第十二天)---id1220(20-对象操作流-反序列化)        id12(第十二天)---id1221(21-对象操作流两个注意点)        id12(第十二天)---id1222(22-对象操作流-两个注意点2)        id12(第十二天)---id1223(23-对象操作流-练习)        id12(第十二天)---id1224(24-Properties-概述)        id12(第十二天)---id1225(25-Properties-作为map集合的基本使用)        id12(第十二天)---id1226(26-Properties-特有方法)        id12(第十二天)---id1227(27-Properties-load)        id12(第十二天)---id1228(28-Properties-store)        end</code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他流</tag>
      
      <tag>Properties类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day11 IO流</title>
    <link href="/2017/04/02/SAd11/"/>
    <url>/2017/04/02/SAd11/</url>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><input disabled="" type="checkbox">  I: Input输入</p><div class="hljs code-wrapper"><pre><code>    把文件上的数据读取到内存中</code></pre></div></li><li><p><input disabled="" type="checkbox">  O: Output输出</p><div class="hljs code-wrapper"><pre><code>    把内存中的数据写出去的技术</code></pre></div></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="根据流向分类"><a href="#根据流向分类" class="headerlink" title="根据流向分类"></a>根据流向分类</h3><h4 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h4><p>​            就是把数据读取到内存中的流<br>​                所有输入流都有read方法</p><h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>​            就是把内存中的数据写出去的流<br>​                所有输出流都有write方法</p><h3 id="根据单位分类"><a href="#根据单位分类" class="headerlink" title="根据单位分类"></a>根据单位分类</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><p>​            不论读写,操作的都是字节<br>​                可以操作任何文件</p><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>​            不论读写,操作的都是字符<br>​                只能操作文本类文件</p><h2 id="基本字节流"><a href="#基本字节流" class="headerlink" title="基本字节流"></a>基本字节流</h2><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>​            <code>FileOutputStream</code></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileOutputStream(String path)</td><td align="center">直接指向一个文件,表示要向文件中输出内容</td></tr><tr><td align="center">public FileOutputStream(String path, boolean append)</td><td align="center">直接指向一个文件,表示要向文件中输出内容<br/>                append表示是否追加. true表示追加</td></tr></tbody></table><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>​            </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void write( int b)</td><td align="center">写出一个字节b到文件输出流</td></tr><tr><td align="center">void write( byte[ ]  b)</td><td align="center">写出一个字节数组中的所有字节</td></tr><tr><td align="center">void write( byte[ ]  b,int off,int len)</td><td align="center">写出字节数组的一部分,从off开始,写len个</td></tr></tbody></table><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建字节输出流的对象 --- 告诉虚拟机我要往哪个文件中写数据了</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//FileOutputStream fos = new FileOutputStream(new File(&quot;D:\\a.txt&quot;));</span><br><br>        <span class="hljs-comment">//2,写数据</span><br>        fos.write(<span class="hljs-number">97</span>);<br><br>        <span class="hljs-comment">//3,释放资源</span><br>        fos.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建字节输出流的对象</span><br>                        <span class="hljs-comment">//注意点:如果文件不存在,会帮我们自动创建出来.</span><br>                        <span class="hljs-comment">//       如果文件存在,会把文件清空.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//2,写数据     传递一个整数时,那么实际上写到文件中的,是这个整数在码表中对应的那个字符.</span><br>        fos.write(<span class="hljs-number">98</span>);<br><br>        <span class="hljs-comment">//3,释放资源</span><br>        fos.close(); <span class="hljs-comment">//告诉操作系统,我现在已经不要再用这个文件了.</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br>        fos.write(<span class="hljs-number">97</span>);<br>        fos.write(<span class="hljs-number">98</span>);<br>        fos.write(<span class="hljs-number">99</span>);<br><br>        fos.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">/*byte [] bys = &#123;97,98,99&#125;;</span><br><span class="hljs-comment">        fos.write(bys);*/</span><br><br>        <span class="hljs-keyword">byte</span> [] bys = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>,<span class="hljs-number">103</span>&#125;;<br>        fos.write(bys,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="tset5"><a href="#tset5" class="headerlink" title="tset5"></a>tset5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//第二个参数就是续写开关,如果没有传递,默认就是false,</span><br>        <span class="hljs-comment">//表示不打开续写功能,那么创建对象的这行代码会清空文件.</span><br><br>        <span class="hljs-comment">//如果第二个参数为true,表示打开续写功能</span><br>        <span class="hljs-comment">//那么创建对象的这行代码不会清空文件.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<br><br>        fos.write(<span class="hljs-number">97</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">98</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">99</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>        fos.write(<span class="hljs-number">101</span>);<br>        <span class="hljs-comment">//能加一个换行</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br><br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//System.out.println(2/0);</span><br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\a.txt&quot;</span>);<br>            fos.write(<span class="hljs-number">97</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>           e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//finally语句里面的代码,一定会被执行.</span><br>            <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><h4 id="类名-1"><a href="#类名-1" class="headerlink" title="类名"></a>类名</h4><p>​            <code>FileInputStream</code></p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileInputStream(String path)</td><td align="center">直接指向一个文件,表示要从文件中读取内容</td></tr></tbody></table><p>​<br>​                </p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">一次读取一个字节,返回值为读取字节的int值,读到-1时结束</td></tr><tr><td align="center">int read(byte [] b)</td><td align="center">一次读取一个字节数组,返回值为读取到的字节个数,读到-1时结束</td></tr></tbody></table><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//如果文件存在,那么就不会报错.</span><br>        <span class="hljs-comment">//如果文件不存在,那么就直接报错.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> read = fis.read();<br>        <span class="hljs-comment">//一次读取一个字节,返回值就是本次读到的那个字节数据.</span><br>        <span class="hljs-comment">//也就是字符在码表中对应的那个数字.</span><br>        <span class="hljs-comment">//如果我们想要看到的是字符数据,那么一定要强转成char</span><br><br><br>        System.out.println((<span class="hljs-keyword">char</span>)read);<br><br>        <span class="hljs-comment">//释放资源</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//1,文件中多个字节我怎么办?</span><br>        <span class="hljs-comment">/*while(true)&#123;</span><br><span class="hljs-comment">            int i1 = fis.read();</span><br><span class="hljs-comment">            System.out.println(i1);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><h3 id="单字节拷贝"><a href="#单字节拷贝" class="headerlink" title="单字节拷贝"></a>单字节拷贝</h3><h4 id="思路与格式"><a href="#思路与格式" class="headerlink" title="思路与格式"></a>思路与格式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">//创建输入流,表示要读取&quot;E:\itcast\mn.jpg&quot;</span><br>    FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:\\itcast\\mn.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输出流,表示要把读取到的数据写入&quot;myByteStream\\mn.jpg&quot;</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;myByteStream\\\\mn.jpg&quot;</span>);<br>    <span class="hljs-comment">//输入流读取数据,输出流写出数据(一次读取一个字节,一次写入一个字节)</span><br>    <span class="hljs-keyword">int</span> by;<br>    <span class="hljs-keyword">while</span> ((by = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>        fos.write(by);<br>    &#125;<br>    <span class="hljs-comment">//释放资源</span><br>    fos.close();<br>    fis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建了字节输入流,准备读数据.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\itheima\\a.avi&quot;</span>);<br>        <span class="hljs-comment">//创建了字节输出流,准备写数据.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            fos.write(b);<br>        &#125;<br><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字节数组拷贝"><a href="#字节数组拷贝" class="headerlink" title="字节数组拷贝"></a>字节数组拷贝</h3><h4 id="思路与格式-1"><a href="#思路与格式-1" class="headerlink" title="思路与格式"></a>思路与格式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建输入流,表示要读取&quot;E:\itcast\mn.jpg&quot;</span><br>       FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:\\itcast\\mn.jpg&quot;</span>);<br>       <span class="hljs-comment">//创建输出流,表示要把读取到的数据写入&quot;myByteStream\\mn.jpg&quot;</span><br>       FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;myByteStream\\\\mn.jpg&quot;</span>);<br>       <span class="hljs-comment">//输入流读取数据,输出流写出数据(一次读取一个字节数组,一次写入一个字节数组的一部分)</span><br>       <span class="hljs-keyword">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">int</span> len;<br>       <span class="hljs-keyword">while</span> ((len = fis.read(bys)) != -<span class="hljs-number">1</span>) &#123;<br>           fos.write(bys, <span class="hljs-number">0</span>, len);<br>       &#125;<br>       <span class="hljs-comment">//释放资源</span><br>       fos.close();<br>       fis.close();<br></code></pre></div></td></tr></table></figure><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\itheima\\a.avi&quot;</span>);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//本次读到的有效字节个数 --- 这次读了几个字节</span><br><br>        <span class="hljs-keyword">while</span>((len = fis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            fos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        缓冲流  =  基本流 + 缓冲区(数组)</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h4 id="缓冲输入流-BufferedInputStream"><a href="#缓冲输入流-BufferedInputStream" class="headerlink" title="缓冲输入流: BufferedInputStream"></a>缓冲输入流: BufferedInputStream</h4><h5 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h5><p>​                public BufferedInputStream(InputStream is);</p><h5 id="本质"><a href="#本质" class="headerlink" title="本质:"></a>本质:</h5><p>​                BufferedInputStream = InputStream + 8K数组;</p><h4 id="缓冲输出流-BufferedOutputStream"><a href="#缓冲输出流-BufferedOutputStream" class="headerlink" title="缓冲输出流: BufferedOutputStream"></a>缓冲输出流: BufferedOutputStream</h4><h5 id="构造-1"><a href="#构造-1" class="headerlink" title="构造:"></a>构造:</h5><p>​                public BufferedOutputStream(OutputStream os);</p><h5 id="本质-1"><a href="#本质-1" class="headerlink" title="本质:"></a>本质:</h5><p>​                BufferedOutputStream = OutputStream + 8K数组;</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//就要利用缓冲流去拷贝文件</span><br><br>        <span class="hljs-comment">//创建一个字节缓冲输入流</span><br>        <span class="hljs-comment">//在底层创建了一个默认长度为8192的字节数组。</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>));<br>        <span class="hljs-comment">//创建一个字节缓冲输出流</span><br>        <span class="hljs-comment">//在底层也创建了一个默认长度为8192的字节数组。</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\copy.avi&quot;</span>));<br><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(b);<br>        &#125;<br><br>        <span class="hljs-comment">//方法的底层会把字节流给关闭。</span><br>        bis.close();<br>        bos.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//缓冲流结合数组，进行文件拷贝</span><br><br>        <span class="hljs-comment">//创建一个字节缓冲输入流</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;bytestream\\a.avi&quot;</span>));<br><br>        <span class="hljs-comment">//创建一个字节缓冲输出流</span><br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;bytestream\\copy.avi&quot;</span>));<br><br>        <span class="hljs-keyword">byte</span> [] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        bis.close();<br>        bos.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        该编解码操作指的都是对String的操作</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码:"></a>编码:</h4><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">public byte[] getBytes();</td><td align="center">//按照”默认编码格式”进行编码.</td></tr><tr><td align="center">public byte[] getBytes(String charsetName)</td><td align="center">//按照”指定编码格式charsetName”编码</td></tr></tbody></table><p>​    </p><h3 id="解码"><a href="#解码" class="headerlink" title="解码:"></a>解码:</h3><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">public String(byte[] bys);</td><td align="center">//按照”默认编码格式”进行解码.</td></tr><tr><td align="center">public String(byte[] bys,String charsetName);</td><td align="center">//按照”指定编码格式charsetName”进行解码.</td></tr></tbody></table><p>​        </p><h2 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        就是字符和对应的数据组成的一张表。</p><h3 id="常见的编码表"><a href="#常见的编码表" class="headerlink" title="常见的编码表"></a>常见的编码表</h3><h4 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h4><p>​            最原始的编码表, 所有编码表都兼容<br>​            只包含英文字母,数字,和英文标点符号</p><h4 id="ISO-8859-1"><a href="#ISO-8859-1" class="headerlink" title="ISO-8859-1"></a>ISO-8859-1</h4><p>​            欧洲常用编码表</p><h4 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h4><p>​            简体中文编码表, 国内常用. </p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>​            万国码, 包含了世界上大多数国家的文字和符号</p><h2 id="Try-catah-finally"><a href="#Try-catah-finally" class="headerlink" title="Try-catah-finally"></a>Try-catah-finally</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//可能会出现异常的代码</span><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>   <span class="hljs-comment">// e.printStackTrace();</span><br>    <span class="hljs-comment">//如果出现异常则执行catch</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">//无论是否出现异常,最终都会执行finally</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建输出流对象,并给予初始化值</span><br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//2.关联文件</span><br>    fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;Mytest\\a.txt&quot;</span>);<br>    String s = <span class="hljs-string">&quot;我爱中国&quot;</span>;<br>    <span class="hljs-comment">//3.向文件输出内容</span><br>    fos.write(s.getBytes());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//4.判断输出流是否创建成功(如果没有创建成功,则就没有必要关闭了)</span><br>    <span class="hljs-keyword">if</span> (fos != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day10 Stream&amp;File</title>
    <link href="/2017/04/02/SAd10/"/>
    <url>/2017/04/02/SAd10/</url>
    
    <content type="html"><![CDATA[<h1 id="Stream-amp-File"><a href="#Stream-amp-File" class="headerlink" title="Stream&amp;File"></a>Stream&amp;File</h1><span id="more"></span><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        专门用来快速的处理集合或数组的一个工具.</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><p>​        </p><table><thead><tr><th align="center">数据类型</th><th align="center">如何转换为Stream流</th></tr></thead><tbody><tr><td align="center">Collection集合</td><td align="center">Stream s=集合.stream();</td></tr><tr><td align="center">Map集合-&gt;键</td><td align="center">Stream s=集合.keySet().stream();</td></tr><tr><td align="center">Map集合-&gt;值</td><td align="center">Stream s=集合.values().stream();</td></tr><tr><td align="center">Map集合-&gt;键值对</td><td align="center">Stream s=集合.entrySet().stream();</td></tr><tr><td align="center">数组</td><td align="center">Stream s=Stream.of(数组名)</td></tr><tr><td align="center">多个零散元素</td><td align="center">Stream s=Stream.of(数组元素1,数组元素2…)</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的获取</span><br><span class="hljs-comment"> 单列集合 : 集合对象.stream();</span><br><span class="hljs-comment"> 双列集合 : 不能直接获取,需要间接获取</span><br><span class="hljs-comment">            集合对象.keySet().stream();</span><br><span class="hljs-comment">            集合对象.entrySet().stream();</span><br><span class="hljs-comment"> 数组     :</span><br><span class="hljs-comment">            Arrays.stream(数组名);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 同种数据类型的多个数据:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            Stream.of(数据1,数据2,数据3......);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//单列集合</span><br>        <span class="hljs-comment">//method1();</span><br><br><br>        <span class="hljs-comment">//双列集合</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//数组</span><br>        <span class="hljs-comment">//method3();</span><br><br>        <span class="hljs-comment">//同种数据类型的多个数据</span><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;<br>        Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        Arrays.stream(arr).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        HashMap&lt;String,Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        hm.put(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">24</span>);<br>        hm.put(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">25</span>);<br>        hm.put(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">26</span>);<br>        hm.put(<span class="hljs-string">&quot;qianqi&quot;</span>,<span class="hljs-number">27</span>);<br><br>        <span class="hljs-comment">//双列集合不能直接获取Stream流</span><br>        <span class="hljs-comment">//keySet</span><br>        <span class="hljs-comment">//先获取到所有的键</span><br>        <span class="hljs-comment">//再把这个Set集合中所有的键放到Stream流中</span><br>        <span class="hljs-comment">//hm.keySet().stream().forEach(s-&gt; System.out.println(s));</span><br><br><br>        <span class="hljs-comment">//entrySet</span><br>        <span class="hljs-comment">//先获取到所有的键值对对象</span><br>        <span class="hljs-comment">//再把这个Set集合中所有的键值对对象放到Stream流中</span><br>        hm.entrySet().stream().forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br><span class="hljs-comment">//        Stream&lt;String&gt; stream = list.stream();</span><br><span class="hljs-comment">//        stream.forEach(s-&gt; System.out.println(s));</span><br>        list.stream().forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Stream<T> filter(Predicate predicate)</td><td align="center">按照指定的Predicate规则,对流中数据进行过滤</td></tr><tr><td align="center">public Stream<T>limit(long maxSize)</td><td align="center">获取前几个元素</td></tr><tr><td align="center">public Stream<T>skip(long n)</td><td align="center">跳过指定参数个元素</td></tr><tr><td align="center">public static  <T> Stream <T> concat(Stream a,Stream b)</td><td align="center">合并a和b两个流为一个流</td></tr><tr><td align="center">public Stream<T> distinct()</td><td align="center">移除流中重复的元素</td></tr><tr><td align="center">public void forEach( Consumer action )</td><td align="center">按照指定Consumer规则,遍历流中数据</td></tr><tr><td align="center">public long count()</td><td align="center">返回此流中的元素数</td></tr><tr><td align="center">public <R> Stream <R> map(Function mapper)</td><td align="center">把当前Stream流转换为其他类型的Stream流</td></tr></tbody></table><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的中间方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Stream&lt;T&gt; filter(Predicate predicate)：过滤</span><br><span class="hljs-comment">//                Predicate接口中的方法    boolean test(T t)：对给定的参数进行判断，返回一个布尔值</span><br><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//filter方法获取流中的 每一个数据.</span><br>        <span class="hljs-comment">//而test方法中的s,就依次表示流中的每一个数据.</span><br>        <span class="hljs-comment">//我们只要在test方法中对s进行判断就可以了.</span><br>        <span class="hljs-comment">//如果判断的结果为true,则当前的数据留下</span><br>        <span class="hljs-comment">//如果判断的结果为false,则当前数据就不要.</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                new Predicate&lt;String&gt;() &#123;</span><br><span class="hljs-comment">//                    @Override</span><br><span class="hljs-comment">//                    public boolean test(String s) &#123;</span><br><span class="hljs-comment">//                        boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br><br>        <span class="hljs-comment">//因为Predicate接口中只有一个抽象方法test</span><br>        <span class="hljs-comment">//所以我们可以使用lambda表达式来简化</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                (String s)-&gt;&#123;</span><br><span class="hljs-comment">//                    boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br>        list.stream().filter(s -&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 体验Stream流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 创建一个集合，存储多个字符串元素</span><br><span class="hljs-comment"> * &quot;张三丰&quot;,&quot;张无忌&quot;,&quot;张翠山&quot;,&quot;王二麻子&quot;,&quot;张良&quot;,&quot;谢广坤&quot;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 把集合中所有以&quot;张&quot;开头的元素存储到一个新的集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 把&quot;张&quot;开头的集合中的长度为3的元素存储到一个新的集合</span><br><span class="hljs-comment"> * 遍历上一步得到的集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//集合的批量添加</span><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(List.of(<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张翠山&quot;</span>,<span class="hljs-string">&quot;王二麻子&quot;</span>,<span class="hljs-string">&quot;张良&quot;</span>,<span class="hljs-string">&quot;谢广坤&quot;</span>));<br>        <span class="hljs-comment">//list.add()</span><br><br>        <span class="hljs-comment">//遍历list1把以张开头的元素添加到list2中。</span><br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list1) &#123;<br>            <span class="hljs-keyword">if</span>(s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))&#123;<br>                list2.add(s);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历list2集合，把其中长度为3的元素，再添加到list3中。</span><br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list2) &#123;<br>            <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">3</span>)&#123;<br>                list3.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String s : list3) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br>       <span class="hljs-comment">//Stream流</span><br>        list1.stream().filter(s-&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))<br>                .filter(s-&gt;s.length() == <span class="hljs-number">3</span>)<br>                .forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的中间方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3();</span><br>        <span class="hljs-comment">//method4(list);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; distinct()：去除流中重复的元素。依赖(hashCode和equals方法)</span><br>        list.stream().distinct().forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)：合并a和b两个流为一个流</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br><br><span class="hljs-comment">//        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="hljs-comment">//        Stream&lt;String&gt; stream2 = list2.stream();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Stream&lt;String&gt; stream3 = Stream.concat(stream1, stream2);</span><br><span class="hljs-comment">//        stream3.forEach(s-&gt; System.out.println(s));</span><br><br>        Stream.concat(list.stream(),list2.stream()).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; skip(long n)：跳过指定参数个数的数据</span><br>        list.stream().skip(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        Stream&lt;T&gt; limit(long maxSize)：截取指定参数个数的数据</span><br>        list.stream().limit(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的终结方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//method1(list);</span><br><br><br><span class="hljs-comment">//        long count()：返回此流中的元素数</span><br>        <span class="hljs-keyword">long</span> count = list.stream().count();<br>        System.out.println(count);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void forEach(Consumer action)：对此流的每个元素执行操作</span><br><span class="hljs-comment">//                      Consumer接口中的方法    void accept(T t)：对给定的参数执行此操作</span><br>        <span class="hljs-comment">//在forEach方法的底层,会循环获取到流中的每一个数据.</span><br>        <span class="hljs-comment">//并循环调用accept方法,并把每一个数据传递给accept方法</span><br>        <span class="hljs-comment">//s就依次表示了流中的每一个数据.</span><br>        <span class="hljs-comment">//所以,我们只要在accept方法中,写上处理的业务逻辑就可以了.</span><br>        list.stream().forEach(<br>                <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                        System.out.println(s);<br>                    &#125;<br>                &#125;<br>        );<br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//lambda表达式的简化格式</span><br>        <span class="hljs-comment">//是因为Consumer接口中,只有一个accept方法</span><br>        list.stream().forEach(<br>                (String s)-&gt;&#123;<br>                    System.out.println(s);<br>                &#125;<br>        );<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//lambda表达式还是可以进一步简化的.</span><br>        list.stream().forEach(s-&gt;System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="转换-收集"><a href="#转换-收集" class="headerlink" title="转换(收集):"></a>转换(收集):</h3><table><thead><tr><th align="center">转换目标</th><th align="center">操作方式</th></tr></thead><tbody><tr><td align="center">Stream流转换为List集合</td><td align="center">List list=Stream流.collect(Collectors.toList())</td></tr><tr><td align="center">Stream流转换为Set集合</td><td align="center">Set set=Stream流.collect(Collectors.toSet())</td></tr><tr><td align="center">Stream流转换为Map集合</td><td align="center">Map map=Stream流.collect(Collectors.toMap( Function keyMapper,Function valueMapper))</td></tr></tbody></table><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> * 练习:</span><br><span class="hljs-comment"> * 定义一个集合，并添加一些整数1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment"> * 将集合中的奇数删除，只保留偶数。</span><br><span class="hljs-comment"> * 遍历集合得到2，4，6，8，10。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                (Integer i)-&gt;&#123;</span><br><span class="hljs-comment">//                    return i % 2 == 0;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        )</span><br>        list.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).forEach(number -&gt; System.out.println(number));<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Integer integer : list) &#123;<br>            System.out.println(integer);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> * 练习:</span><br><span class="hljs-comment"> * 定义一个集合，并添加一些整数1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment"> * 将集合中的奇数删除，只保留偶数。</span><br><span class="hljs-comment"> * 遍历集合得到2，4，6，8，10。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            list1.add(i);<br>        &#125;<br><br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">//filter负责过滤数据的.</span><br>        <span class="hljs-comment">//collect负责收集数据.</span><br>                <span class="hljs-comment">//获取流中剩余的数据,但是他不负责创建容器,也不负责把数据添加到容器中.</span><br>        <span class="hljs-comment">//Collectors.toList() : 在底层会创建一个List集合.并把所有的数据添加到List集合中.</span><br>        List&lt;Integer&gt; list = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                .collect(Collectors.toList());<br><br>        System.out.println(list);<br><br><br>        Set&lt;Integer&gt; set = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                .collect(Collectors.toSet());<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream流的收集方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 创建一个ArrayList集合，并添加以下字符串。字符串中前面是姓名，后面是年龄</span><br><span class="hljs-comment"> * &quot;zhangsan,23&quot;</span><br><span class="hljs-comment"> * &quot;lisi,24&quot;</span><br><span class="hljs-comment"> * &quot;wangwu,25&quot;</span><br><span class="hljs-comment"> * 保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;zhangsan,23&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;lisi,24&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;wangwu,25&quot;</span>);<br><br>        Map&lt;String, Integer&gt; map = list.stream().filter(<br>                s -&gt; &#123;<br>                    String[] split = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                    <span class="hljs-keyword">int</span> age = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">return</span> age &gt;= <span class="hljs-number">24</span>;<br>                &#125;<br><br>         <span class="hljs-comment">//   collect方法只能获取到流中剩余的每一个数据.</span><br>         <span class="hljs-comment">//在底层不能创建容器,也不能把数据添加到容器当中</span><br><br>         <span class="hljs-comment">//Collectors.toMap 创建一个map集合并将数据添加到集合当中</span><br><br>          <span class="hljs-comment">// s 依次表示流中的每一个数据</span><br><br>          <span class="hljs-comment">//第一个lambda表达式就是如何获取到Map中的键</span><br>          <span class="hljs-comment">//第二个lambda表达式就是如何获取Map中的值</span><br>        ).collect(Collectors.toMap(<br>                s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>],<br>                s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]) ));<br><br>        System.out.println(map);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="JavaBean-标准类"><a href="#JavaBean-标准类" class="headerlink" title="JavaBean(标准类)"></a>JavaBean(标准类)</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Actor&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试类MyStream9"><a href="#测试类MyStream9" class="headerlink" title="测试类MyStream9"></a>测试类MyStream9</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</span><br><span class="hljs-comment"> * 1.男演员只要名字为3个字的前两人</span><br><span class="hljs-comment"> * 2.女演员只要姓杨的，并且不要第一个</span><br><span class="hljs-comment"> * 3.把过滤后的男演员姓名和女演员姓名合并到一起</span><br><span class="hljs-comment"> * 4.把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</span><br><span class="hljs-comment"> * 演员类Actor，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStream9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt;  manList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        manList.add(<span class="hljs-string">&quot;张国立&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;张晋&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;刘烨&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;郑伊健&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;徐峥&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;王宝强&quot;</span>);<br><br>        ArrayList&lt;String&gt;  womanList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        womanList.add(<span class="hljs-string">&quot;郑爽&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;杨紫&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;关晓彤&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;张天爱&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;杨幂&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;赵丽颖&quot;</span>);<br><br>        <span class="hljs-comment">//男演员只要名字为3个字的前两人</span><br>        Stream&lt;String&gt; stream1 = manList.stream().filter(name -&gt; name.length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//女演员只要姓杨的，并且不要第一个</span><br>        Stream&lt;String&gt; stream2 = womanList.stream().filter(name -&gt; name.startsWith(<span class="hljs-string">&quot;杨&quot;</span>)).skip(<span class="hljs-number">1</span>);<br><br><br>        Stream.concat(stream1,stream2).forEach(name -&gt; &#123;<br>            Actor actor = <span class="hljs-keyword">new</span> Actor(name);<br>            System.out.println(actor);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><div class="hljs code-wrapper"><pre><code>    在Java中用来表示&quot;文件或文件夹&quot;的类    File封装的文件或文件夹,也可以是不存在的路径</code></pre></div><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><p>​        </p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">File( String pathname )</td><td align="center">通过将给定的路径名字字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td align="center">File( String parent,String child)</td><td align="center">从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td align="center">File( File parent,String child )</td><td align="center">从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><h4 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>        <span class="hljs-comment">//method3();</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(File parent, String child)      从父抽象路径名和子路径名字符串创建新的File实例</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        String path = <span class="hljs-string">&quot;a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(file1,path);<br>        System.out.println(file);<span class="hljs-comment">//C:\itheima\a.txt</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(String parent, String child)    从父路径名字符串和子路径名字符串创建新的File实例</span><br>        String path1 = <span class="hljs-string">&quot;C:\\itheima&quot;</span>;<br>        String path2 = <span class="hljs-string">&quot;a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path1,path2);<span class="hljs-comment">//把两个路径拼接.</span><br>        System.out.println(file);<span class="hljs-comment">//C:\itheima\a.txt</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//File(String pathname)        通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</span><br>        String path = <span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-comment">//问题:为什么要把字符串表示形式的路径变成File对象?</span><br>        <span class="hljs-comment">//就是为了使用File类里面的方法.</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//这个路径固定不变了.</span><br>       File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\itheima\\a.txt&quot;</span>);<br>       <span class="hljs-comment">//当前项目下的a.txt</span><br>       File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>       <span class="hljs-comment">//当前项目下 --- 指定模块下的 a.txt</span><br>       File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule\\a.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean createNewFile();</td><td align="center">创建空文件</td></tr><tr><td align="center">public boolean mkdir();</td><td align="center">创建单级文件夹</td></tr><tr><td align="center">public boolean mkdirs();</td><td align="center">创建多级文件夹</td></tr></tbody></table><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//public boolean createNewFile()    创建一个新的空的文件</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.如果文件存在,那么创建失败,返回false</span><br>                    <span class="hljs-comment">//2.如果文件不存在,那么创建成功,返回true</span><br>                    <span class="hljs-comment">//3.createNewFile方法不管调用者有没有后缀名,只能创建文件.</span><br><br>        <span class="hljs-comment">//public boolean mkdir()            创建一个单级文件夹</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.只能创建单级文件夹,不能创建多级文件夹</span><br>                    <span class="hljs-comment">//2.不管调用者有没有后缀名,只能创建单级文件夹</span><br><br>        <span class="hljs-comment">//public boolean mkdirs()           创建一个多级文件夹</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1,可以创建单级文件夹,也可以创建多级文件夹</span><br>                    <span class="hljs-comment">//2.不管调用者有没有后缀名,只能创建文件夹</span><br><br>        <span class="hljs-comment">//疑问:</span><br>            <span class="hljs-comment">//既然mkdirs能创建单级,也能创建多级.那么mkdir还有什么用啊? 是的</span><br><br>        <span class="hljs-comment">//method1();</span><br><br>        <span class="hljs-comment">//method2();</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.mkdirs();<br>        System.out.println(result);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.mkdir();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file1.createNewFile();<br>        System.out.println(result1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//练习一：在当前模块下的aaa文件夹中创建一个a.txt文件</span><br>       <span class="hljs-comment">/* File file = new File(&quot;filemodule\\aaa\\a.txt&quot;);</span><br><span class="hljs-comment">        file.createNewFile();*/</span><br>        <span class="hljs-comment">//注意点:文件所在的文件夹必须要存在.</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule\\aaa&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>            <span class="hljs-comment">//如果文件夹不存在,就创建出来</span><br>            file.mkdirs();<br>        &#125;<br>        File newFile = <span class="hljs-keyword">new</span> File(file,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        newFile.createNewFile();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean delete();</td><td align="center">删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><h5 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo4</span> </span>&#123;<br>    <span class="hljs-comment">//注意点:</span><br>        <span class="hljs-comment">//1.不走回收站的.</span><br>        <span class="hljs-comment">//2.如果删除的是文件,那么直接删除.如果删除的是文件夹,那么能删除空文件夹</span><br>        <span class="hljs-comment">//3.如果要删除一个有内容的文件夹,只能先进入到这个文件夹,把里面的内容全部删除完毕,才能再次删除这个文件夹</span><br>    <span class="hljs-comment">//简单来说:</span><br>        <span class="hljs-comment">//只能删除文件和空文件夹.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.delete();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.delete();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//练习二：删除一个多级文件夹</span><br>        <span class="hljs-comment">//delete方法</span><br>        <span class="hljs-comment">//只能删除文件和空文件夹.</span><br>        <span class="hljs-comment">//如果现在要删除一个有内容的文件夹?</span><br>        <span class="hljs-comment">//先删掉这个文件夹里面所有的内容.</span><br>        <span class="hljs-comment">//最后再删除这个文件夹</span><br><br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\apple\\Desktop\\src&quot;</span>);<br>        deleteDir(src);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteDir</span><span class="hljs-params">(File src)</span> </span>&#123;<br>        <span class="hljs-comment">//先删掉这个文件夹里面所有的内容.</span><br>        <span class="hljs-comment">//递归 方法在方法体中自己调用自己.</span><br>        <span class="hljs-comment">//注意: 可以解决所有文件夹和递归相结合的题目</span><br>        <span class="hljs-comment">//1.进入 --- 得到src文件夹里面所有内容的File对象.</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//2.遍历 --- 因为我想得到src文件夹里面每一个文件和文件夹的File对象.</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                <span class="hljs-comment">//3.判断 --- 如果遍历到的File对象是一个文件,那么直接删除</span><br>                file.delete();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//4.判断</span><br>                <span class="hljs-comment">//递归</span><br>                deleteDir(file);<span class="hljs-comment">//参数一定要是src文件夹里面的文件夹File对象</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//最后再删除这个文件夹</span><br>        src.delete();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getAbsolutePath()</td><td align="center">获取绝对路径</td></tr><tr><td align="center">public String getParent()</td><td align="center">获取父级路径</td></tr><tr><td align="center">public String getName()</td><td align="center">获取文件或文件夹的名字</td></tr></tbody></table><h4 id="高级获取"><a href="#高级获取" class="headerlink" title="高级获取"></a>高级获取</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public File[] listFiles()</td><td align="center">获取一个文件夹中的所有文件和文件夹</td></tr><tr><td align="center">public static File[] listRoots()</td><td align="center">获取硬盘上的所有盘符</td></tr></tbody></table><h4 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean isDirectory();</td><td align="center">判断此抽象路径名表示的file是否是目录</td></tr><tr><td align="center">public boolean isFile();</td><td align="center">判断此抽象路径名表示的file是否是文件</td></tr><tr><td align="center">public boolean exists();</td><td align="center">判断此抽象路径名表示的file是否存在</td></tr></tbody></table><h5 id="test1-5"><a href="#test1-5" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo5</span> </span>&#123;<br>    <span class="hljs-comment">//public boolean isDirectory()  测试此抽象路径名表示的File是否为目录</span><br>    <span class="hljs-comment">//public boolean isFile()       测试此抽象路径名表示的File是否为文件</span><br>    <span class="hljs-comment">//public boolean exists()       测试此抽象路径名表示的File是否存在</span><br>    <span class="hljs-comment">//public String getName()       返回由此抽象路径名表示的文件或目录的名称</span><br>                <span class="hljs-comment">//注意点:</span><br>                    <span class="hljs-comment">//1.如果调用者是文件,那么获取的是文件名和后缀名</span><br>                    <span class="hljs-comment">//2.如果调用者是一个文件夹,那么获取的是文件夹的名字</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//method3();</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        String name = file.getName();<br>        System.out.println(name);<br><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        String name2 = file1.getName();<br>        System.out.println(name2);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result = file.exists();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file.isFile();<br>        <span class="hljs-keyword">boolean</span> result2 = file.isDirectory();<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\itheima\\a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result1 = file.isFile();<br>        <span class="hljs-keyword">boolean</span> result2 = file.isDirectory();<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-5"><a href="#test2-5" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo6</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>       File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\aaa&quot;</span>);<br>        File[] files = file.listFiles();<span class="hljs-comment">//返回值是一个File类型的数组</span><br>        System.out.println(files.length);<br>        <span class="hljs-keyword">for</span> (File path : files) &#123;<br>            System.out.println(path);<br>        &#125;<br><br>        <span class="hljs-comment">//进入文件夹,获取这个文件夹里面所有的文件和文件夹的File对象,并把这些File对象都放在一个数组中返回.</span><br>        <span class="hljs-comment">//包括隐藏文件和隐藏文件夹都可以获取.</span><br><br>        <span class="hljs-comment">//注意事项:</span><br>            <span class="hljs-comment">//1.当调用者是一个文件时</span><br>            <span class="hljs-comment">//2,当调用者是一个空文件夹时</span><br>            <span class="hljs-comment">//3.当调用者是一个有内容的文件夹时</span><br>            <span class="hljs-comment">//4.当调用者是一个有权限才能进入的文件夹时</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//统计一个文件夹中,每种文件出现的次数.</span><br>        <span class="hljs-comment">//统计 --- 定义一个变量用来统计. ---- 弊端:同时只能统计一种文件</span><br>        <span class="hljs-comment">//利用map集合进行数据统计,键 --- 文件后缀名  值 ----  次数</span><br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;filemodule&quot;</span>);<br>        HashMap&lt;String, Integer&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        getCount(hm, file);<br>        System.out.println(hm);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCount</span><span class="hljs-params">(HashMap&lt;String, Integer&gt; hm, File file)</span> </span>&#123;<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (File f : files) &#123;<br>            <span class="hljs-keyword">if</span>(f.isFile())&#123;<br>                String fileName = f.getName();<br>                String[] fileNameArr = fileName.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>                <span class="hljs-keyword">if</span>(fileNameArr.length == <span class="hljs-number">2</span>)&#123;<br>                    String fileEndName = fileNameArr[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(hm.containsKey(fileEndName))&#123;<br>                        <span class="hljs-comment">//已经存在</span><br>                        <span class="hljs-comment">//将已经出现的次数获取出来</span><br>                        Integer count = hm.get(fileEndName);<br>                        <span class="hljs-comment">//这种文件又出现了一次.</span><br>                        count++;<br>                        <span class="hljs-comment">//把已经出现的次数给覆盖掉.</span><br>                        hm.put(fileEndName,count);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//不存在</span><br>                        <span class="hljs-comment">//表示当前文件是第一次出现</span><br>                        hm.put(fileEndName,<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                getCount(hm,f);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径:"></a>绝对路径:</h3><p>​        是绝对不会发生变化的路径.<br>​        一般是从盘符开始.</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径:"></a>相对路径:</h3><p>​        是根据某个固定参照物,对比出来的路径.<br>​        在Java程序中,默认参照物是”当前项目”</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        当前所说的路径, 指的是Java项目的路径<br>​        Web项目中的相对和绝对路径会有少许差别</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stream</tag>
      
      <tag>File</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day09 Map集合</title>
    <link href="/2017/04/02/SAd09/"/>
    <url>/2017/04/02/SAd09/</url>
    
    <content type="html"><![CDATA[<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><span id="more"></span><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        HashSet是Set集合的子类<br>​        HashSet也是”无序,无索引,元素不可以重复”</p><h3 id="原理-元素不重复原理"><a href="#原理-元素不重复原理" class="headerlink" title="原理(元素不重复原理)"></a>原理(元素不重复原理)</h3><p>​        HashSet会自动对比元素的equals方法和hashCode方法<br>​        如果一样就不存储<br>​        HashSet的底层是Hash表</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>​        HashSet中存储的元素,必须重写hashCode和equals方法</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>​            是HashSet的子类<br>​            Set体系里边唯一有序的set集合</p><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><h5 id="单列集合的工具类"><a href="#单列集合的工具类" class="headerlink" title="单列集合的工具类"></a>单列集合的工具类</h5><h5 id="里边包含了很多操作集合的方法"><a href="#里边包含了很多操作集合的方法" class="headerlink" title="里边包含了很多操作集合的方法"></a>里边包含了很多操作集合的方法</h5><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static void sort(List<T> list)</td><td align="center">对list集合进行排序,顺序是自然顺序</td></tr><tr><td align="center">public static void sort(List<T> list,Comper<T> c)</td><td align="center">按照指定排序规则,对list集合进行排序</td></tr><tr><td align="center">public static void reverse(List&lt;?&gt; list)</td><td align="center">让list集合中的元素反转</td></tr><tr><td align="center">public static void shuffle(List&lt;?&gt; list)</td><td align="center">随机打乱list集合中元素的顺序</td></tr></tbody></table><p>​    </p><h2 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h2><h3 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h3><p>​        数组 + 链表</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​            默认创建一个长度为16, 加载因子0.75的数组<br>​                当数组中存储的元素超过16*0.75时<br>​                数组的长度扩容为原来的2倍<br>​            数组中的每个位置都维护一个链表</p><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="https://cdn.jsdelivr.net/gh/Zfqwb/pic//img/image-20210412194254422.png" alt="image-20210412194254422">            </p><h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><p>​        数组 + 链表 + 红黑树</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>​            默认创建一个长度为16, 加载因子0.75的数组<br>​                当数组中存储的元素超过16*0.75时<br>​                数组的长度扩容为原来的2倍<br>​            数组中的每个位置都维护一个链表<br>​            链表的长度超过8时, 该链表会自动转换为红黑树</p><h4 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h4><p><img src="https://cdn.jsdelivr.net/gh/Zfqwb/pic//img/image-20210412194327875.png" alt="image-20210412194327875"></p><h2 id="Map集合-1"><a href="#Map集合-1" class="headerlink" title="Map集合"></a>Map集合</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        是一个双列集合.也叫”键值对”集合.</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>​        1.”键”和”值”必须成对出现.<br>​        2.”键”不允许重复,”值”可以重复.<br>​        3.”键”和”值”结合在一块,称之为一个”键值对”, 是集合的一个元素.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">V put( K key,V val)</td><td align="center">添加元素,如果键不存在则添加,如果键存在则覆盖</td></tr><tr><td align="center">V remove(K key)</td><td align="center">根据键,删除键值对元素</td></tr><tr><td align="center">void clear()</td><td align="center">清空集合</td></tr><tr><td align="center">boolean containsKey(K key)</td><td align="center">判断集合中是否包含指定的键</td></tr><tr><td align="center">boolean containsValue(V val)</td><td align="center">判断集合中是否包含指定的值</td></tr><tr><td align="center">boolean isEmpty()</td><td align="center">判断集合是否为空</td></tr><tr><td align="center">int size()</td><td align="center">获取集合的长度</td></tr><tr><td align="center">V get(Object key)</td><td align="center">根据键获取值</td></tr><tr><td align="center">Set<K>keySet()</td><td align="center">获取所有键的集合</td></tr><tr><td align="center">Collection<V>values()</td><td align="center">获取所有值的集合</td></tr><tr><td align="center">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td align="center">获取所有键值对对象的集合</td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br>  <span class="hljs-keyword">import</span> java.util.Map;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * Map的基本使用</span><br><span class="hljs-comment">     */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap1</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>         Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>      <span class="hljs-comment">//map.add();</span><br>      map.put(<span class="hljs-string">&quot;itheima001&quot;</span>,<span class="hljs-string">&quot;小智&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;itheima002&quot;</span>,<span class="hljs-string">&quot;小美&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;大胖&quot;</span>);<br><br>      System.out.println(map);<br><br>  &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的基本方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;itheima001&quot;</span>,<span class="hljs-string">&quot;小智&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima002&quot;</span>,<span class="hljs-string">&quot;小美&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;大胖&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima004&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima005&quot;</span>,<span class="hljs-string">&quot;大师&quot;</span>);<br><br>        <span class="hljs-comment">//method1(map);</span><br>        <span class="hljs-comment">//method2(map);</span><br>        <span class="hljs-comment">//method3(map);</span><br>        <span class="hljs-comment">//method4(map);</span><br>        <span class="hljs-comment">//method5(map);</span><br>        <span class="hljs-comment">//method6(map);</span><br>        <span class="hljs-comment">//method7(map);</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method7</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        int size()              集合的长度，也就是集合中键值对的个数</span><br>        <span class="hljs-keyword">int</span> size = map.size();<br>        System.out.println(size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method6</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean isEmpty()       判断集合是否为空</span><br>        <span class="hljs-keyword">boolean</span> empty1 = map.isEmpty();<br>        System.out.println(empty1);<span class="hljs-comment">//false</span><br><br>        map.clear();<br>        <span class="hljs-keyword">boolean</span> empty2 = map.isEmpty();<br>        System.out.println(empty2);<span class="hljs-comment">//true</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean containsValue(Object value) 判断集合是否包含指定的值</span><br>        <span class="hljs-keyword">boolean</span> result1 = map.containsValue(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = map.containsValue(<span class="hljs-string">&quot;小智&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean containsKey(Object key) 判断集合是否包含指定的键</span><br>        <span class="hljs-keyword">boolean</span> result1 = map.containsKey(<span class="hljs-string">&quot;itheima001&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = map.containsKey(<span class="hljs-string">&quot;itheima006&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        void clear()            移除所有的键值对元素</span><br>        map.clear();<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        V remove(Object key)    根据键删除键值对元素</span><br>        String s = map.remove(<span class="hljs-string">&quot;itheima001&quot;</span>);<br>        System.out.println(s);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-comment">//        V put(K key,V value)    添加元素</span><br>        <span class="hljs-comment">//如果要添加的键不存在，那么会把键值对都添加到集合中</span><br>        <span class="hljs-comment">//如果要添加的键是存在的，那么会覆盖原先的值，把原先值当做返回值进行返回。</span><br>        String s = map.put(<span class="hljs-string">&quot;itheima001&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        System.out.println(s);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历:"></a>遍历:</h3><h4 id="根据键-获取值"><a href="#根据键-获取值" class="headerlink" title="根据键,获取值"></a>根据键,获取值</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h5><ul><li><p>获取所有键的集合。用keySet()方法实现</p></li><li><p>遍历键的集合，获取到每一个键。</p></li><li><p>根据键去找值。用get(Object key)方法实现</p></li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>       Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>       <span class="hljs-comment">//添加元素</span><br>       map.put(<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>       map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>       map.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>       <span class="hljs-comment">//读取所有键的集合.用keySet()方法实现</span><br>       Set&lt;String&gt; keySet = map.keySet();<br>       <span class="hljs-comment">//遍历键的集合,获取到每一个键.用增强for实现</span><br>       <span class="hljs-keyword">for</span> (String s : keySet) &#123;<br>           <span class="hljs-comment">//根据键去找值.用get(Object key)方法实现</span><br>           String value = map.get(s);<br>           System.out.println(s+<span class="hljs-string">&quot;,&quot;</span>+value);<br>       &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的第一种遍历方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建集合并添加元素</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;1号丈夫&quot;</span>,<span class="hljs-string">&quot;1号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;2号丈夫&quot;</span>,<span class="hljs-string">&quot;2号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;3号丈夫&quot;</span>,<span class="hljs-string">&quot;3号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;4号丈夫&quot;</span>,<span class="hljs-string">&quot;4号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;5号丈夫&quot;</span>,<span class="hljs-string">&quot;5号妻子&quot;</span>);<br><br>        <span class="hljs-comment">//获取到所有的键</span><br>        Set&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-comment">//遍历Set集合得到每一个键</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">//通过每一个键key，来获取到对应的值</span><br>            String value = map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="根据键值对-获取键和值"><a href="#根据键值对-获取键和值" class="headerlink" title="根据键值对,获取键和值"></a>根据键值对,获取键和值</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h5><p>1- 获取所有键值对对象的集合<br> entrySet()<br>2- 遍历键值对对象的集合<br>3- 获取键和值</p><ul><li><p>用getKey()得到键</p></li><li><p>用getValue()得到值</p></li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>      Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>      <span class="hljs-comment">//添加元素</span><br>      map.put(<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>      <span class="hljs-comment">//获取所有键值对对象的集合</span><br>      Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br>      <span class="hljs-comment">//遍历键值对对象的集合,得到每一个键值对对象</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;<br>          <span class="hljs-comment">//根据键值对对象获取键和值</span><br>          String key = me.getKey();<br>          String value = me.getValue();<br>          System.out.println(key+<span class="hljs-string">&quot;,&quot;</span>+value);<br>      &#125;<br></code></pre></div></td></tr></table></figure><h5 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的第二种遍历方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建集合并添加元素</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;1号丈夫&quot;</span>,<span class="hljs-string">&quot;1号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;2号丈夫&quot;</span>,<span class="hljs-string">&quot;2号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;3号丈夫&quot;</span>,<span class="hljs-string">&quot;3号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;4号丈夫&quot;</span>,<span class="hljs-string">&quot;4号妻子&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;5号丈夫&quot;</span>,<span class="hljs-string">&quot;5号妻子&quot;</span>);<br><br>        <span class="hljs-comment">//首先要获取到所有的键值对对象。</span><br>        <span class="hljs-comment">//Set集合中装的是键值对对象（Entry对象）</span><br>        <span class="hljs-comment">//而Entry里面装的是键和值</span><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>            <span class="hljs-comment">//得到每一个键值对对象</span><br>            String key = entry.getKey();<br>            String value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Map集合子类"><a href="#Map集合子类" class="headerlink" title="Map集合子类"></a>Map集合子类</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h3><h4 id="HashMap的键-本质上就是HashSet"><a href="#HashMap的键-本质上就是HashSet" class="headerlink" title="HashMap的键,本质上就是HashSet."></a>HashMap的键,本质上就是HashSet.</h4><h4 id="HashMap的键要求不允许重复-也要重写hashCode和equals方法"><a href="#HashMap的键要求不允许重复-也要重写hashCode和equals方法" class="headerlink" title="HashMap的键要求不允许重复,也要重写hashCode和equals方法."></a>HashMap的键要求不允许重复,也要重写hashCode和equals方法.</h4><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap:"></a>TreeMap:</h3><h4 id="TreeMap的键-本质上就是TreeSet"><a href="#TreeMap的键-本质上就是TreeSet" class="headerlink" title="TreeMap的键,本质上就是TreeSet."></a>TreeMap的键,本质上就是TreeSet.</h4><h4 id="TreeMap的键-不允许重复-需要让键实现Comparable接口-或者提供一个Comparator比较器对象"><a href="#TreeMap的键-不允许重复-需要让键实现Comparable接口-或者提供一个Comparator比较器对象" class="headerlink" title="TreeMap的键,不允许重复,需要让键实现Comparable接口,或者提供一个Comparator比较器对象."></a>TreeMap的键,不允许重复,需要让键实现Comparable接口,或者提供一个Comparator比较器对象.</h4><h3 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h3><h4 id="test1排序"><a href="#test1排序" class="headerlink" title="test1排序"></a>test1排序</h4><h5 id="测试类Test1"><a href="#测试类Test1" class="headerlink" title="测试类Test1"></a>测试类Test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：创建一个TreeMap集合，键是学生对象(Student)，值是籍贯(String)。</span><br><span class="hljs-comment"> *           学生属性姓名和年龄，按照年龄进行排序并遍历。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeMap&lt;Student,String&gt; tm = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> result = o1.getAge() - o2.getAge();<br>                result = result== <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : result;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dapang&quot;</span>,<span class="hljs-number">22</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        tm.put(s1,<span class="hljs-string">&quot;江苏&quot;</span>);<br>        tm.put(s2,<span class="hljs-string">&quot;北京&quot;</span>);<br>        tm.put(s3,<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        tm.forEach(<br>                (Student key, String value)-&gt;&#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>/* <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;*/</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>   <span class="hljs-comment">/* @Override</span><br><span class="hljs-comment">    public int compareTo(Student o) &#123;</span><br><span class="hljs-comment">        //按照年龄进行排序</span><br><span class="hljs-comment">        int result = o.getAge() - this.getAge();</span><br><span class="hljs-comment">        //次要条件，按照姓名排序。</span><br><span class="hljs-comment">        result = result == 0 ? o.getName().compareTo(this.getName()) : result;</span><br><span class="hljs-comment">        return result;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2遍历"><a href="#test2遍历" class="headerlink" title="test2遍历"></a>test2遍历</h4><h5 id="测试类-MyMap5"><a href="#测试类-MyMap5" class="headerlink" title="测试类 MyMap5"></a>测试类 MyMap5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Map的练习</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMap5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashMap&lt;Student,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dapang&quot;</span>,<span class="hljs-number">22</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        hm.put(s1,<span class="hljs-string">&quot;江苏&quot;</span>);<br>        hm.put(s2,<span class="hljs-string">&quot;北京&quot;</span>);<br>        hm.put(s3,<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        <span class="hljs-comment">//第一种：先获取到所有的键，再通过每一个键来找对应的值</span><br>        Set&lt;Student&gt; keys = hm.keySet();<br>        <span class="hljs-keyword">for</span> (Student key : keys) &#123;<br>            String value = hm.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br><br>        <span class="hljs-comment">//第二种：先获取到所有的键值对对象。再获取到里面的每一个键和每一个值</span><br>        Set&lt;Map.Entry&lt;Student, String&gt;&gt; entries = hm.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : entries) &#123;<br>            Student key = entry.getKey();<br>            String value = entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===&quot;</span>);<br>        <span class="hljs-comment">//第三种：</span><br>        hm.forEach(<br>                (Student key, String value)-&gt;&#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>                &#125;<br>        );<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student-1"><a href="#Student-1" class="headerlink" title="Student"></a>Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>​        用于方法的形参上,当参数类型确定,参数个数不确定的时候使用.</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><p>​        修饰符 返回值类型 方法名(数据类型… 变量名) {  }</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><h4 id="1-可变参数本质上是一个数组"><a href="#1-可变参数本质上是一个数组" class="headerlink" title="1.可变参数本质上是一个数组."></a>1.可变参数本质上是一个数组.</h4><h4 id="2-一个方法中最多只有一个可变参数"><a href="#2-一个方法中最多只有一个可变参数" class="headerlink" title="2.一个方法中最多只有一个可变参数"></a>2.一个方法中最多只有一个可变参数</h4><h4 id="3-可变参数必须放在方法参数的最后"><a href="#3-可变参数必须放在方法参数的最后" class="headerlink" title="3.可变参数必须放在方法参数的最后"></a>3.可变参数必须放在方法参数的最后</h4><h3 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求两个数的和</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 需求：定义一个方法求三个数的和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">int</span> sum1 = getSum(a, b);<br>        System.out.println(sum1);<br><br>        <span class="hljs-keyword">int</span> sum2 = getSum(a, b, c);<br>        System.out.println(sum2);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b + c;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求N个数的和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//在JDK5之前，会把所有的数据都先放到一个数组中</span><br>        <span class="hljs-comment">//我们自己定义的方法，形参只要写一个数组就可以了。</span><br><br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">int</span> sum1 = getSum(arr);<br>        System.out.println(sum1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sum = sum + arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3可变参数实现"><a href="#test3可变参数实现" class="headerlink" title="test3可变参数实现"></a>test3可变参数实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求：定义一个方法求N个数的和</span><br><span class="hljs-comment"> * 可变参数实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        int [] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="hljs-comment">//        System.out.println(arr);</span><br>        <span class="hljs-keyword">int</span> sum1 = getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>        System.out.println(sum1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number,<span class="hljs-keyword">int</span>... arr)</span> </span>&#123;<br>        <span class="hljs-comment">//System.out.println(arr);</span><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sum = sum + arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVariableParameter4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// static &lt;E&gt;  List&lt;E&gt;  of(E…elements)  创建一个具有指定元素的List集合对象</span><br>        <span class="hljs-comment">//static &lt;E&gt;  Set&lt;E&gt;  of(E…elements)    创建一个具有指定元素的Set集合对象</span><br>        <span class="hljs-comment">//static &lt;K , V&gt;   Map&lt;K，V&gt;  of(E…elements)</span><br>        <span class="hljs-comment">//                                      创建一个具有指定元素的Map集合对象</span><br><br><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>        <span class="hljs-comment">//method3();</span><br><br>        <span class="hljs-comment">//method4();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = Map.ofEntries(<br>                Map.entry(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;江苏&quot;</span>),<br>                Map.entry(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>));<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = Map.of(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;江苏&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;天津&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//传递的参数当中，不能存在重复的元素。</span><br>        Set&lt;String&gt; set = Set.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(set);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//list.add(&quot;Q&quot;);</span><br>        <span class="hljs-comment">//list.remove(&quot;a&quot;);</span><br>        <span class="hljs-comment">//list.set(0,&quot;A&quot;);</span><br>        <span class="hljs-comment">//System.out.println(list);</span><br><br><span class="hljs-comment">//        ArrayList&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><span class="hljs-comment">//        list2.add(&quot;aaa&quot;);</span><br><br>        <span class="hljs-comment">//集合的批量添加。</span><br>        <span class="hljs-comment">//首先是通过调用List.of方法来创建一个不可变的集合，of方法的形参就是一个可变参数。</span><br>        <span class="hljs-comment">//再创建一个ArrayList集合，并把这个不可变的集合中所有的数据，都添加到ArrayList中。</span><br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(List.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>));<br>        System.out.println(list3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数组转换为集合"><a href="#数组转换为集合" class="headerlink" title="数组转换为集合"></a>数组转换为集合</h2><h3 id="JDK9之前"><a href="#JDK9之前" class="headerlink" title="JDK9之前:"></a>JDK9之前:</h3><p>​        List<T> list = Arrays.asList(T… t);<br>​            //把数组转换为集合.该集合不允许添加和删除,但可以修改</p><h3 id="JDK9之后"><a href="#JDK9之后" class="headerlink" title="JDK9之后:"></a>JDK9之后:</h3><h4 id="List-list-List-of-T…-t"><a href="#List-list-List-of-T…-t" class="headerlink" title="List list = List.of(T… t);"></a>List<T> list = List.of(T… t);</h4><p>​             //把数组转换为集合.该集合不允许添加,删除和修改</p><h4 id="Set-set-Set-of-T…-t"><a href="#Set-set-Set-of-T…-t" class="headerlink" title="Set set = Set.of(T… t);"></a>Set<T> set = Set.of(T… t);</h4><p>​             //把数组转换为集合.该集合不允许添加,删除和修改</p><h4 id="Map-lt-K-V-gt-map-Map-ofEntries-Map-Entry-lt-K-V-gt-…-entries"><a href="#Map-lt-K-V-gt-map-Map-ofEntries-Map-Entry-lt-K-V-gt-…-entries" class="headerlink" title="Map&lt;K,V&gt; map = Map.ofEntries(Map.Entry&lt;K,V&gt;… entries);"></a>Map&lt;K,V&gt; map = Map.ofEntries(Map.Entry&lt;K,V&gt;… entries);</h4><p>​            //把数组转换为集合.该集合不允许添加,删除和修改</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        数组转换的集合,长度都不允许发生变化.<br>​        如果想让集合再次发生变化,可以利用集合的构造方法,重新创建新的集合.<br>​        ArrayList<Integer> arrayList = new ArrayList&lt;&gt;(数组转换后的集合);</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day08 Set集合</title>
    <link href="/2017/04/02/SAd08/"/>
    <url>/2017/04/02/SAd08/</url>
    
    <content type="html"><![CDATA[<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><span id="more"></span><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​            可以变化的数据类型.<br>​            可以理解为”一个存储了数据类型的变量”</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>​            泛型可以定义在类上,方法上,接口上.<br>​            创建有泛型的类的对象时,需要给泛型指定数据类型<br>​            当泛型被指定数据类型时, 类中所有该泛型均被替换为对应的数据类型</p><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类:"></a>泛型类:</h4><p>​            public class 类名&lt;泛型&gt;{}</p><h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><h6 id="测试类MyGenericityClass"><a href="#测试类MyGenericityClass" class="headerlink" title="测试类MyGenericityClass"></a>测试类MyGenericityClass</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义泛型类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyGenericityClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Box&lt;String&gt; box1 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box1.setElement(<span class="hljs-string">&quot;给小丽的土味情话&quot;</span>);<br><br>        String element1 = box1.getElement();<br>        System.out.println(element1);<br><br><br>        Box&lt;Integer&gt; box2 = <span class="hljs-keyword">new</span> Box&lt;&gt;();<br>        box2.setElement(<span class="hljs-number">19</span>);<br><br>        Integer element2 = box2.getElement();<br>        System.out.println(element2);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="自定义泛型类class-Box"><a href="#自定义泛型类class-Box" class="headerlink" title="自定义泛型类class Box"></a>自定义泛型类class Box<E></h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//就是一个泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> E element;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getElement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setElement</span><span class="hljs-params">(E element)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.element = element;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><h6 id="泛型类GenericityClass"><a href="#泛型类GenericityClass" class="headerlink" title="泛型类GenericityClass"></a>泛型类GenericityClass</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="不写泛型的弊端-不能同时存字符串和数字"><a href="#不写泛型的弊端-不能同时存字符串和数字" class="headerlink" title="不写泛型的弊端,不能同时存字符串和数字"></a>不写泛型的弊端,不能同时存字符串和数字</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  不写泛型的弊端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericitySummarize</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br><br>        Iterator it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String next = (String) it.next();<br>            <span class="hljs-keyword">int</span> len = next.length();<br>            System.out.println(len);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法:"></a>泛型方法:</h4><p>​            public &lt;泛型&gt; 返回值类型 方法名(参数){}</p><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">使用Java中的泛型方法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityMethod1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ArrayList list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <br>list.add(<span class="hljs-string">&quot;给小花同学的土味情话&quot;</span>); <br>    list.add(<span class="hljs-string">&quot;给小丽同学的土味情话&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;给小路同学的土味情话&quot;</span>); <br> <span class="hljs-comment">//将list集合转成一个数组并返回 </span><br> <span class="hljs-comment">//如果是空参的,那么返回的数组类型为Object类型的. Object[] objects = list.toArray();   System.out.println(Arrays.toString(objects));</span><br>    String[] strings = list.toArray(<span class="hljs-keyword">new</span> String[list.size()]);<br>    System.out.println(Arrays.toString(strings));<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义泛型方法</span><br><span class="hljs-comment"> * 定义一个泛型方法，传递一个集合和四个元素，将元素添加到集合中并返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityMethod2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list1 = addElement(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(), <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(list1);<br><br>        ArrayList&lt;Integer&gt; list2 = addElement(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>        System.out.println(list2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ArrayList&lt;T&gt; <span class="hljs-title">addElement</span><span class="hljs-params">(ArrayList&lt;T&gt; list , T t1 ,T t2 ,T t3 ,T t4)</span></span>&#123;<br>        list.add(t1);<br>        list.add(t2);<br>        list.add(t3);<br>        list.add(t4);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口:"></a>泛型接口:</h4><p>​            public interface 接口名&lt;泛型&gt;{}</p><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        GenericityImpl1&lt;String&gt; genericity = <span class="hljs-keyword">new</span> GenericityImpl1&lt;&gt;();<br>        genericity.method(<span class="hljs-string">&quot;小丽给我的土味情话&quot;</span>);<br><br>        GenericityImpl2 genericityImpl2 = <span class="hljs-keyword">new</span> GenericityImpl2();<br>        genericityImpl2.method(<span class="hljs-number">19</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(E e)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityImpl2</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(Integer integer)</span> </span>&#123;<br>        System.out.println(integer);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericityImpl1</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Genericity</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符:"></a>泛型通配符:</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h4><p>​            一般使用”方法的参数上”</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><table><thead><tr><th align="center">格式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&lt;?&gt;</td><td align="center">//可以赋值为任意类型</td></tr><tr><td align="center">&lt;? extends A&gt;</td><td align="center">//可以赋值为A以及A的子类</td></tr><tr><td align="center">&lt;? super A&gt;</td><td align="center">//可以赋值为A以及A的父类.</td></tr></tbody></table><h4 id="test-​"><a href="#test-​" class="headerlink" title="test    ​"></a>test    ​</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类型通配符：&lt;?&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;?&gt;：表示元素类型未知的ArrayList，它的元素可以匹配任何的类型</span><br><span class="hljs-comment"> *      但是并不能把元素添加到ArrayListList中了，获取出来的也是Object类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 类型通配符上限：&lt;? extends 类型&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 类型通配符下限：&lt;? super 类型&gt;</span><br><span class="hljs-comment"> *      ArrayList&lt;? super Number&gt;：它表示的类型是Number或者其父类型</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">genericityglobbing1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Set集合-1"><a href="#Set集合-1" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>​        无序(存储和遍历的顺序不一致)<br>​        无索引<br>​        元素不可以重复</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set集合的基本使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySet1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><br><span class="hljs-comment">//        for (int i = 0; i &lt; set.size(); i++) &#123;</span><br><span class="hljs-comment">//            //Set集合是没有索引的，所以不能使用通过索引获取元素的方法</span><br><span class="hljs-comment">//        &#125;</span><br>        Iterator&lt;String&gt; it = set.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : set) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="子类"><a href="#子类" class="headerlink" title="子类:"></a>子类:</h3><h4 id="TreeSet-元素不重复原理"><a href="#TreeSet-元素不重复原理" class="headerlink" title="TreeSet(元素不重复原理):"></a>TreeSet(元素不重复原理):</h4><p>​             TreeSet中的元素会自动排序<br>​            小的在前,大的在后,如果一样就不存</p><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TreeSet集合来存储Integer类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        ts.add(<span class="hljs-number">5</span>);<br>        ts.add(<span class="hljs-number">3</span>);<br>        ts.add(<span class="hljs-number">4</span>);<br>        ts.add(<span class="hljs-number">1</span>);<br>        ts.add(<span class="hljs-number">2</span>);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TreeSet集合来存储Student类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">28</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">27</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">29</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">28</span>);<br>        Student s5 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;qianqi&quot;</span>,<span class="hljs-number">30</span>);<br><br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        ts.add(s5);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Student-自然排序-实现接口-重写方法"><a href="#Student-自然排序-实现接口-重写方法" class="headerlink" title="Student(自然排序,实现接口,重写方法)"></a>Student(自然排序,实现接口,重写方法)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//按照对象的年龄进行排序</span><br>        <span class="hljs-comment">//主要判断条件</span><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-keyword">this</span>.age - o.age;<br>        <span class="hljs-comment">//次要判断条件</span><br>        result = result == <span class="hljs-number">0</span> ? <span class="hljs-keyword">this</span>.name.compareTo(o.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;aaa&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;ab&quot;</span>;<br><br>        System.out.println(s1.compareTo(s2));<br>        <span class="hljs-comment">//首先比较第一个字母，如果第一个字母是一样的，那么继续比较后面的字母</span><br>        <span class="hljs-comment">//当不一样的时候，就拿着对应的码表值97，减去 b的码表值 98</span><br>        <span class="hljs-comment">//认为a是比b要小的。</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4-比较器排序-指定排序规则"><a href="#test4-比较器排序-指定排序规则" class="headerlink" title="test4(比较器排序,指定排序规则)"></a>test4(比较器排序,指定排序规则)</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Teacher&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Teacher&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Teacher o1, Teacher o2)</span> </span>&#123;<br>                <span class="hljs-comment">//o1表示现在要存入的那个元素</span><br>                <span class="hljs-comment">//o2表示已经存入到集合中的元素</span><br><br>                <span class="hljs-comment">//主要条件</span><br>                <span class="hljs-keyword">int</span> result = o1.getAge() - o2.getAge();<br>                <span class="hljs-comment">//次要条件</span><br>                result = result == <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : result;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><br>        Teacher t1 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        Teacher t2 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">22</span>);<br>        Teacher t3 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">24</span>);<br>        Teacher t4 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">24</span>);<br><br>        ts.add(t1);<br>        ts.add(t2);<br>        ts.add(t3);<br>        ts.add(t4);<br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Teacher"><a href="#Teacher" class="headerlink" title="Teacher"></a>Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTreeSet5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;(new Comparator&lt;String&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public int compare(String o1, String o2) &#123;</span><br><span class="hljs-comment">//                int result = o1.length() - o2.length();</span><br><span class="hljs-comment">//                result = result == 0 ? o1.compareTo(o2) : result;</span><br><span class="hljs-comment">//                return result;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<br>                (String o1, String o2) -&gt; &#123;<br>                    <span class="hljs-keyword">int</span> result = o1.length() - o2.length();<br>                    result = result == <span class="hljs-number">0</span> ? o1.compareTo(o2) : result;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>        );<br><br>        ts.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;ab&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;df&quot;</span>);<br>        ts.add(<span class="hljs-string">&quot;qwer&quot;</span>);<br><br><br>        System.out.println(ts);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet:"></a>HashSet:</h4><p>​            HashSet会自动对比元素的equals方法和hashCode方法<br>​            如果一样就不存储</p><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><h6 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetTest1"><a href="#测试类HashSetTest1" class="headerlink" title="测试类HashSetTest1"></a>测试类HashSetTest1</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</span><br><span class="hljs-comment"> * 要求：学生对象的成员变量值相同，我们就认为是同一个对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 结论：</span><br><span class="hljs-comment"> *  如果HashSet集合要存储自定义对象，那么必须重写hashCode和equals方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashSet&lt;Student&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        hs.add(s1);<br>        hs.add(s2);<br>        hs.add(s3);<br><br>        <span class="hljs-keyword">for</span> (Student student : hs) &#123;<br>            System.out.println(student);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><h6 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//我们可以对Object类中的hashCode方法进行重写</span><br>    <span class="hljs-comment">//在重写之后，就一般是根据对象的属性值来计算哈希值的。</span><br>    <span class="hljs-comment">//此时跟对象的地址值就没有任何关系了。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetDemo1"><a href="#测试类HashSetDemo1" class="headerlink" title="测试类HashSetDemo1"></a>测试类HashSetDemo1</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加字符串并进行遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>        hs.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        hs.add(<span class="hljs-string">&quot;java&quot;</span>);<br><br>        Iterator&lt;String&gt; it = hs.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : hs) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="测试类HashSetDemo2"><a href="#测试类HashSetDemo2" class="headerlink" title="测试类HashSetDemo2"></a>测试类HashSetDemo2</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算哈希值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaozhi&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br><br>        <span class="hljs-comment">//因为在Object类中，是根据对象的地址值计算出来的哈希值。</span><br>        System.out.println(s1.hashCode());<span class="hljs-comment">//1060830840</span><br>        System.out.println(s1.hashCode());<span class="hljs-comment">//1060830840</span><br><br><br>        System.out.println(s2.hashCode());<span class="hljs-comment">//2137211482</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="集合元素排序"><a href="#集合元素排序" class="headerlink" title="集合元素排序"></a>集合元素排序</h2><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序:"></a>自然排序:</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>​            让元素本身具有排序规则<br>​            元素本身自己排序</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="1-让”集合元素所在的类”实现”Comparable接口”"><a href="#1-让”集合元素所在的类”实现”Comparable接口”" class="headerlink" title="1.让”集合元素所在的类”实现”Comparable接口”"></a>1.让”集合元素所在的类”实现”Comparable接口”</h5><h5 id="2-重写compareTo方法"><a href="#2-重写compareTo方法" class="headerlink" title="2.重写compareTo方法."></a>2.重写compareTo方法.</h5><h6 id="如果方法返回0-表示”新添加的元素”和”集合中已经存在的对象元素”重复-则不允许添加"><a href="#如果方法返回0-表示”新添加的元素”和”集合中已经存在的对象元素”重复-则不允许添加" class="headerlink" title="如果方法返回0: 表示”新添加的元素”和”集合中已经存在的对象元素”重复. 则不允许添加"></a>如果方法返回0: 表示”新添加的元素”和”集合中已经存在的对象元素”重复. 则不允许添加</h6><h6 id="如果方法返回正数-表示”新添加的元素”比”集合中已经存在的对象元素”大-则添加集合的后边"><a href="#如果方法返回正数-表示”新添加的元素”比”集合中已经存在的对象元素”大-则添加集合的后边" class="headerlink" title="如果方法返回正数: 表示”新添加的元素”比”集合中已经存在的对象元素”大. 则添加集合的后边"></a>如果方法返回正数: 表示”新添加的元素”比”集合中已经存在的对象元素”大. 则添加集合的后边</h6><h6 id="如果方法返回负数-表示”新添加的元素”比”集合中已经存在的对象元素”小-则添加集合的前边"><a href="#如果方法返回负数-表示”新添加的元素”比”集合中已经存在的对象元素”小-则添加集合的前边" class="headerlink" title="如果方法返回负数: 表示”新添加的元素”比”集合中已经存在的对象元素”小. 则添加集合的前边"></a>如果方法返回负数: 表示”新添加的元素”比”集合中已经存在的对象元素”小. 则添加集合的前边</h6><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> chinese;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> math;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> english;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> chinese, <span class="hljs-keyword">int</span> math, <span class="hljs-keyword">int</span> english)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.chinese = chinese;<br>        <span class="hljs-keyword">this</span>.math = math;<br>        <span class="hljs-keyword">this</span>.english = english;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getChinese</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> chinese;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChinese</span><span class="hljs-params">(<span class="hljs-keyword">int</span> chinese)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.chinese = chinese;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMath</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> math;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> math)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.math = math;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEnglish</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> english;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEnglish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> english)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.english = english;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, chinese=&quot;</span> + chinese +<br>                <span class="hljs-string">&quot;, math=&quot;</span> + math +<br>                <span class="hljs-string">&quot;, english=&quot;</span> + english +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span> + <span class="hljs-string">&quot;总分为&quot;</span> + getSum();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> chinese + math + english;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//按照总分进行排序</span><br>        <span class="hljs-comment">//int result = this.getChinese() + this.getMath() + this.getEnglish()</span><br>        <span class="hljs-keyword">int</span> result = o.getSum() - <span class="hljs-keyword">this</span>.getSum();<br>        <span class="hljs-comment">//次要条件</span><br>        <span class="hljs-comment">//总分一样，就比较语文成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getChinese() - <span class="hljs-keyword">this</span>.getChinese() : result;<br>        <span class="hljs-comment">//语文成绩一样，就比较数学成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getMath() - <span class="hljs-keyword">this</span>.getMath() : result;<br>        <span class="hljs-comment">//如果数学成绩一样，就比较英文成绩</span><br>        result = result == <span class="hljs-number">0</span> ? o.getEnglish() - <span class="hljs-keyword">this</span>.getEnglish() : result;<br>        <span class="hljs-comment">//如果成绩都一样，则按照姓名进行排序</span><br>        result = result == <span class="hljs-number">0</span> ? o.getName().compareTo(<span class="hljs-keyword">this</span>.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试类TreeSetTest </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 键盘录入3个学生信息，属性为(姓名,语文成绩,数学成绩,英语成绩),按照总分从低到高输出到控制台</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt;  ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;dahei&quot;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;erhei&quot;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">90</span>,<span class="hljs-number">90</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br><br><br>        <span class="hljs-keyword">for</span> (Student student : ts) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="比较器排序"><a href="#比较器排序" class="headerlink" title="比较器排序:"></a>比较器排序:</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>​            给元素指定一个排序规则<br>​            由排序规则指导元素排序</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-在创建TreeSet时-构造方法需要指定一个Comparator比较器对象"><a href="#1-在创建TreeSet时-构造方法需要指定一个Comparator比较器对象" class="headerlink" title="1.在创建TreeSet时,构造方法需要指定一个Comparator比较器对象"></a>1.在创建TreeSet时,构造方法需要指定一个Comparator比较器对象</h5><h5 id="2-TreeSet中的元素就会根据整个比较器对象的规则来进行排序"><a href="#2-TreeSet中的元素就会根据整个比较器对象的规则来进行排序" class="headerlink" title="2.TreeSet中的元素就会根据整个比较器对象的规则来进行排序"></a>2.TreeSet中的元素就会根据整个比较器对象的规则来进行排序</h5><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        如果自然排序和比较器排序同时存在时,则比较器排序优先</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Set集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day07 Collection集合</title>
    <link href="/2017/04/02/SAd07/"/>
    <url>/2017/04/02/SAd07/</url>
    
    <content type="html"><![CDATA[<h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><span id="more"></span><h2 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​            单列集合顶层接口<br>​            就是集合中一次只能存取一个元素</p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p>​                    有序(存储和遍历的顺序一致)<br>​                    有索引<br>​                    元素可以重复</p><h6 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h6><h6 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><code>ArrayList</code></h6><p>​                        底层结构是数组,查询快,增删慢<br>​                        线程不安全,效率高.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//数组可以存储基本数据类型也可以存储引用数据类型</span><br>        <span class="hljs-keyword">int</span> [] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        String [] arr2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>        System.out.println(Arrays.toString(arr1));<br>        System.out.println(Arrays.toString(arr2));<br><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list1.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        System.out.println(list1);<br><br>        <span class="hljs-comment">//如果集合要存储基本数据类型,那么实际存储的是他们的包装类</span><br>        <span class="hljs-comment">//ArrayList&lt;int&gt; list2 = new ArrayList&lt;int&gt;();</span><br>        ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-number">1</span>);<br>        list2.add(<span class="hljs-number">2</span>);<br>        list2.add(<span class="hljs-number">3</span>);<br>        System.out.println(list2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><code>LinkedList</code></h6><p>​                        底层数据结构是链表, 查询慢,增删快<br>​                        线程不安全,效率高.</p><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p>​                    无序(存储和遍历的顺序不一致)<br>​                    无索引<br>​                    元素不可以重复</p><h6 id="分支-2"><a href="#分支-2" class="headerlink" title="分支"></a>分支</h6><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><code>HashSet</code></h6><h6 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a><code>LinkedHashSet</code></h6><h6 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><code>TreeSet</code></h6><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>​            双列集合顶层接口<br>​            就是集合中一次存取一对元素<br>​            元素必须成对出现</p><h4 id="分支-3"><a href="#分支-3" class="headerlink" title="分支"></a>分支</h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><h5 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h5><h2 id="Collection集合-1"><a href="#Collection集合-1" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>​        是单例集合的顶层接口</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean add(E e)</td><td align="center">添加元素</td></tr><tr><td align="center">boolean remove(Object o)</td><td align="center">从集合中移除指定元素</td></tr><tr><td align="center">boolean removeif(Object o)</td><td align="center">根据条件进行移除</td></tr><tr><td align="center">void clear()</td><td align="center">清空集合中的元素</td></tr><tr><td align="center">boolean contains(Object o)</td><td align="center">判断集合中是否存在指定元素</td></tr><tr><td align="center">boolean isEmpty( )</td><td align="center">判断集合是否为空</td></tr><tr><td align="center">int size()</td><td align="center">集合的长度,也就是集合中元素的个数</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; collection = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//        boolean add(E e)        添加元素</span><br>        collection.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;dddd&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(collection);</span><br>        <span class="hljs-comment">//method1(collection);</span><br>        <span class="hljs-comment">//method2(collection);</span><br>        <span class="hljs-comment">//method3(collection);</span><br>        <span class="hljs-comment">//method4(collection);</span><br>        <span class="hljs-comment">//method5(collection);</span><br>        <span class="hljs-comment">//method6(collection);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method6</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        int size()            集合的长度，也就是集合中元素的个数</span><br>        <span class="hljs-keyword">int</span> size = collection.size();<br>        System.out.println(size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean isEmpty()        判断集合是否为空</span><br>        collection.clear();<br>        <span class="hljs-keyword">boolean</span> result = collection.isEmpty();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean contains(Object o)    判断集合中是否存在指定的元素</span><br>        <span class="hljs-keyword">boolean</span> result = collection.contains(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br><br><br>        <span class="hljs-keyword">boolean</span> result2 = collection.contains(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        System.out.println(result2);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        void clear()            清空集合</span><br>        <span class="hljs-comment">//就是将集合中所有的元素全部删除.</span><br>        collection.clear();<br>        System.out.println(collection);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean removeif(Object o)    根据条件进行删除</span><br>        <span class="hljs-comment">//removeif底层会遍历集合,得到集合中的每一个元素</span><br>        <span class="hljs-comment">//s依次表示集合中的每一个元素</span><br>        <span class="hljs-comment">//就会把这每一个元素都到lambda表达式中去判断一下</span><br>        <span class="hljs-comment">//如果返回的是true,则删除</span><br>        <span class="hljs-comment">//如果返回的是false,则保留不删除.</span><br><br><br>        <span class="hljs-comment">//boolean test(String t);</span><br>        collection.removeIf(<br>                (String s)-&gt;&#123;<br>                    <span class="hljs-keyword">return</span> s.length() == <span class="hljs-number">3</span>;<br>                &#125;<br><br>        );<br>        System.out.println(collection);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(Collection&lt;String&gt; collection)</span> </span>&#123;<br>        <span class="hljs-comment">//        boolean remove(Object o)        从集合中移除指定的元素</span><br>        <span class="hljs-comment">//如果删除成功了,则返回true</span><br>        <span class="hljs-comment">//如果删除失败了,则返回false</span><br>        <span class="hljs-keyword">boolean</span> result1 = collection.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> result2 = collection.remove(<span class="hljs-string">&quot;ddd&quot;</span>);<br>        System.out.println(result1);<br>        System.out.println(result2);<br>        System.out.println(collection);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>​        迭代器又名遍历器, 专门用于集合的遍历</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h3><p>​           Iterator<E> iterator():<br>​            返回此集合中元素的迭代器<br>​            通过”集合对象.iterator()”方法得到</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>​        boolean hasNext():<br>​             判断集合中是否还有更多元素可以被取出<br>​        E next():<br>​            从集合中获取下一个元素<br>​        void remove()<br>​            删除正在遍历的当前元素</p><h4 id="test1遍历"><a href="#test1遍历" class="headerlink" title="test1遍历"></a>test1遍历</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;e&quot;</span>);<br><br><br>        <span class="hljs-comment">//1,获得迭代器的对象</span><br>        <span class="hljs-comment">//迭代器对象一旦被创建出来,默认指向集合的0索引处</span><br>        Iterator&lt;String&gt; it = list.iterator();<br><br><br>        <span class="hljs-comment">//利用迭代器里面的方法进行遍历</span><br>        <span class="hljs-comment">//当前位置是否有元素可以被取出</span><br><span class="hljs-comment">//        System.out.println(it.hasNext());</span><br><span class="hljs-comment">//        //取出当前位置的元素  + 将迭代器往后移动一个索引的位置</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><span class="hljs-comment">//        System.out.println(it.next());</span><br><br><br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            System.out.println(it.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2删除"><a href="#test2删除" class="headerlink" title="test2删除"></a>test2删除</h4><h6 id="for循环删除"><a href="#for循环删除" class="headerlink" title="for循环删除"></a>for循环删除</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            String s = list.get(i);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;b&quot;</span>.equals(s))&#123;<br>                list.remove(i);<br>                i--;<br>            &#125;<br>        &#125;<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="迭代器删除"><a href="#迭代器删除" class="headerlink" title="迭代器删除"></a>迭代器删除</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;b&quot;</span>.equals(s))&#123;<br>                <span class="hljs-comment">//指向谁,那么此时就删除谁.</span><br>                it.remove();<br>            &#125;<br>        &#125;<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>​        当使用迭代器进行遍历的时候<br>​            不允许对原始集合进行了添加或删除<br>​            如果非要删除,只能通过迭代器进行删除</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//添加元素</span><br>c.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>c.add(<span class="hljs-string">&quot;javaee&quot;</span>);<br><span class="hljs-comment">//Iterator&lt;E&gt; iterator(): 返回此集合元素的迭代器,通过集合的iterator()方法得到</span><br>Iterator&lt;String&gt; it = c.iterator();<br><span class="hljs-comment">//用while循环进行元素的判断和获取</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    String s = it.next();<br>    System.out.println(s);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​            </p><h4 id="删除集合元素"><a href="#删除集合元素" class="headerlink" title="删除集合元素"></a>删除集合元素</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>ArrayList&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">//添加元素</span><br>c.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>c.add(<span class="hljs-string">&quot;javaee&quot;</span>);<br><span class="hljs-comment">//Iterator&lt;E&gt; iterator(): 返回此集合元素的迭代器,通过集合的iterator()方法得到</span><br>Iterator&lt;String&gt; it = c.iterator();<br><span class="hljs-comment">//用while循环进行元素的判断和获取</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    String s = it.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;java&quot;</span>.equals(s))&#123;<br>        it.remove();<br>        <span class="hljs-comment">//指向谁,那此时就删除谁</span><br>    &#125;<br>    System.out.println(s);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述:"></a>概述:</h3><p>​         专门用来遍历集合或数组.</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (元素数据类型 变量名 : 集合或数组) &#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>(引入第三方变量)</p><ul><li><code>快捷键:  数组或集合后打 .iter</code></li></ul><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list =  <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;f&quot;</span>);<br><br>        <span class="hljs-comment">//1,数据类型一定是集合或者数组中元素的类型</span><br>        <span class="hljs-comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素</span><br>        <span class="hljs-comment">//3,list就是要遍历的集合或者数组.</span><br>        <span class="hljs-keyword">for</span>(String str : list)&#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list =  <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        for(String str : list)&#123;</span><br><span class="hljs-comment">//            str = &quot;q&quot;;</span><br><span class="hljs-comment">//            System.out.println(str);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//以上代码输出结果</span><br>        <span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><span class="hljs-comment">//q</span><br><br>        <br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        <span class="hljs-comment">//System.out.println(list);</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​        JDK5之后出现的<br>​        增强for的底层其实是迭代器.<br>​        增强for中的变量, 存储的就是集合中的元素. </p><h3 id="增强for和迭代器遍历test"><a href="#增强for和迭代器遍历test" class="headerlink" title="增强for和迭代器遍历test"></a>增强for和迭代器遍历test</h3><h4 id="JavaBean-类Student"><a href="#JavaBean-类Student" class="headerlink" title="JavaBean 类Student"></a>JavaBean 类Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试类MyCollectonDemo8"><a href="#测试类MyCollectonDemo8" class="headerlink" title="测试类MyCollectonDemo8"></a>测试类MyCollectonDemo8</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollectonDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小皮同学&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小路同学&quot;</span>,<span class="hljs-number">31</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小贾同学&quot;</span>,<span class="hljs-number">33</span>);<br><br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br><br><br>        <span class="hljs-comment">//迭代器的方式进行遍历</span><br>        Iterator&lt;Student&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            Student s = it.next();<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br>        <span class="hljs-comment">//增强for</span><br>        <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>​        有序(存储和遍历的顺序一致)<br>​        有索引<br>​        元素可以重复</p><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法:"></a>特有方法:</h3><p>​        </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void add(int index,E element)</td><td align="center">在此集合中的指定位置插入指定的元素</td></tr><tr><td align="center">E remove(int index)</td><td align="center">删除指定索引处的元素,返回被删除的元素</td></tr><tr><td align="center">E set(int index,E element)</td><td align="center">修改指定索引处的元素,返回被修改的元素</td></tr><tr><td align="center">E get(int index,E element)</td><td align="center">返回指定索引处的元素</td></tr></tbody></table><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h5 id="test1基础"><a href="#test1基础" class="headerlink" title="test1基础"></a>test1基础</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.Iterator; <span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo1</span> </span>&#123; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; List list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>    Iterator&lt;String&gt; it = list.iterator();<br>    <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>        String s = it.next();<br>        System.out.println(s);<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String s : list) &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2特有方法"><a href="#test2特有方法" class="headerlink" title="test2特有方法"></a>test2特有方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3(list);</span><br>        <span class="hljs-comment">//method4(list);</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E get(int index)        返回指定索引处的元素</span><br>        String s = list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E set(int index,E element)    修改指定索引处的元素，返回被修改的元素</span><br>        <span class="hljs-comment">//被替换的那个元素,在集合中就不存在了.</span><br>        String result = list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(result);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E remove(int index)        删除指定索引处的元素，返回被删除的元素</span><br>        <span class="hljs-comment">//在List集合中有两个删除的方法</span><br>        <span class="hljs-comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span><br>        <span class="hljs-comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span><br>        String s = list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void add(int index,E element)    在此集合中的指定位置插入指定的元素</span><br>        <span class="hljs-comment">//原来位置上的元素往后挪一个索引.</span><br>        list.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3特有方法"><a href="#test3特有方法" class="headerlink" title="test3特有方法"></a>test3特有方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3(list);</span><br>        <span class="hljs-comment">//method4(list);</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E get(int index)        返回指定索引处的元素</span><br>        String s = list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E set(int index,E element)    修改指定索引处的元素，返回被修改的元素</span><br>        <span class="hljs-comment">//被替换的那个元素,在集合中就不存在了.</span><br>        String result = list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(result);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        E remove(int index)        删除指定索引处的元素，返回被删除的元素</span><br>        <span class="hljs-comment">//在List集合中有两个删除的方法</span><br>        <span class="hljs-comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span><br>        <span class="hljs-comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span><br>        String s = list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-comment">//        void add(int index,E element)    在此集合中的指定位置插入指定的元素</span><br>        <span class="hljs-comment">//原来位置上的元素往后挪一个索引.</span><br>        list.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="栈结构"><a href="#栈结构" class="headerlink" title="- 栈结构"></a>- 栈结构</h3><p>​        先进后出</p><h3 id="队列结构"><a href="#队列结构" class="headerlink" title="- 队列结构"></a>- 队列结构</h3><p>​        先进先出</p><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="- 数组结构"></a>- 数组结构</h3><p>​        查询快、增删慢</p><h3 id="链表结构"><a href="#链表结构" class="headerlink" title="- 链表结构"></a>- 链表结构</h3><p>​        查询慢、增删快</p><h2 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍:"></a>介绍:</h3><p>​        底层是链表结构实现，查询慢、增删快</p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法:"></a>常用方法:</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void addFirst(E e)</td><td align="center">在该链表开头插入的指定元素</td></tr><tr><td align="center">public void addLast(E e)</td><td align="center">将指定的元素追加到此链表的结尾</td></tr><tr><td align="center">public E getFirst()</td><td align="center">返回链表中的第一个元素</td></tr><tr><td align="center">public E getLast()</td><td align="center">返回链表中的最后一个元素</td></tr><tr><td align="center">public void removeFirst( )</td><td align="center">从此链表中删除并返回第一个元素</td></tr><tr><td align="center">public void remove( )</td><td align="center">从此链表中删除并返回最后一个元素</td></tr></tbody></table><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedListDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList&lt;String&gt;  list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedListDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-comment">//        public void addFirst(E e)    在该列表开头插入指定的元素</span><br>        <span class="hljs-comment">//method1(list);</span><br><br><span class="hljs-comment">//        public void addLast(E e)    将指定的元素追加到此列表的末尾</span><br>        <span class="hljs-comment">//method2(list);</span><br><br><br><span class="hljs-comment">//        public E getFirst()        返回此列表中的第一个元素</span><br><span class="hljs-comment">//        public E getLast()        返回此列表中的最后一个元素</span><br>        <span class="hljs-comment">//method3(list);</span><br><br><br><span class="hljs-comment">//        public E removeFirst()        从此列表中删除并返回第一个元素</span><br><span class="hljs-comment">//        public E removeLast()        从此列表中删除并返回最后一个元素</span><br>        <span class="hljs-comment">//method4(list);</span><br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        String first = list.removeFirst();<br>        System.out.println(first);<br><br>        String last = list.removeLast();<br>        System.out.println(last);<br><br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        String first = list.getFirst();<br>        String last = list.getLast();<br>        System.out.println(first);<br>        System.out.println(last);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        list.addLast(<span class="hljs-string">&quot;www&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> </span>&#123;<br>        list.addFirst(<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Collection集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day06 时间&amp;异常</title>
    <link href="/2017/04/02/SAd06/"/>
    <url>/2017/04/02/SAd06/</url>
    
    <content type="html"><![CDATA[<h1 id="时间-amp-异常"><a href="#时间-amp-异常" class="headerlink" title="时间&amp;异常"></a>时间&amp;异常</h1><span id="more"></span><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>​        在Java中用来表示时间的类<br>​        他仅仅只能”表示时间”,别的操作都没有</p><h3 id="构造-jdk7"><a href="#构造-jdk7" class="headerlink" title="构造:(jdk7)"></a>构造:(jdk7)</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Date();</td><td align="center">//获取当前系统时间</td></tr><tr><td align="center">public Date(long date)</td><td align="center">//根据一个毫秒值获取一个时间</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public Date()        创建一个Date对象，表示默认时间</span><br><span class="hljs-comment">//public Date(long date)    创建一个Date对象，表示指定时间</span><br><br>        <span class="hljs-comment">//那么这个时间就表示电脑中的当前时间。</span><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(date1);<br><br>        <span class="hljs-comment">//从计算机的时间原点开始，过了指定毫秒的那个时间。</span><br>        Date date2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">0L</span>);<br>        System.out.println(date2);<span class="hljs-comment">//Thu Jan 01 08:00:00 CST 1970</span><br>        <span class="hljs-comment">//从时间原点开始，过了0毫秒。</span><br>        <span class="hljs-comment">//因为我们是在中国，我们是在东八区需要+8小时。</span><br><br>        <span class="hljs-comment">//1970年1月1日 上午的9点</span><br>        Date date3 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">3600L</span> * <span class="hljs-number">1000</span>);<br>        System.out.println(date3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="转换-jdk7"><a href="#转换-jdk7" class="headerlink" title="转换:(jdk7)"></a>转换:(jdk7)</h3><h4 id="时间对象-–-gt-毫秒值"><a href="#时间对象-–-gt-毫秒值" class="headerlink" title="时间对象 –&gt; 毫秒值"></a>时间对象 –&gt; 毫秒值</h4><p>​            long 毫秒值 = 时间对象.getTime();</p><h4 id="毫秒值-–-gt-时间对象"><a href="#毫秒值-–-gt-时间对象" class="headerlink" title="毫秒值 –&gt; 时间对象"></a>毫秒值 –&gt; 时间对象</h4><p>​            Date 时间对象 = new Date(毫秒值);</p><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public long getTime()            获取时间对象的毫秒值</span><br><span class="hljs-comment">//        public void setTime(long time)        设置时间，传递毫秒值</span><br><br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        date1.setTime(<span class="hljs-number">0L</span>);<br>        System.out.println(date1);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把当前时间封装成一个date对象</span><br><br>Date date1 = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-comment">//获取这个date对象的毫秒值 --- 获取当前时间的毫秒值</span><br>        <span class="hljs-keyword">long</span> time = date1.getTime();<br>        System.out.println(time);<br><br>        <span class="hljs-keyword">long</span> time2 = System.currentTimeMillis();<br>        System.out.println(time2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="SimpleDateFormat-jdk7"><a href="#SimpleDateFormat-jdk7" class="headerlink" title="SimpleDateFormat(jdk7)"></a>SimpleDateFormat(jdk7)</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        用来格式化/解析时间<br>​        让时间的显示,更加适合我们的习惯.</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造:"></a>构造:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public   SimpleDateFormat()</td><td align="center">使用默认模式和日期格式public</td></tr><tr><td align="center">public SimpleDateFormat(“时间格式”);</td><td align="center">使用指定时间格式,<br/>             格式:  y:年,M:月,d:日,H:时,m:分,s:秒</td></tr></tbody></table><h3 id="应用"><a href="#应用" class="headerlink" title="应用:"></a>应用:</h3><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化:"></a>格式化:</h4><h5 id="public-String-format-Date-date"><a href="#public-String-format-Date-date" class="headerlink" title="public String format(Date date);"></a>public String format(Date date);</h5><p>​            把一个Date时间,按照指定时间格式,转换为字符串</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><h5 id="public-Date-parse-String-source"><a href="#public-Date-parse-String-source" class="headerlink" title="public Date parse(String source);"></a>public Date parse(String source);</h5><p>​             把一个时间字符串,按照指定时间格式,转换为Date时间</p><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//当前时间的Date对象</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br><br>        <span class="hljs-comment">//创建了一个日期格式。</span><br>        <span class="hljs-comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br><span class="hljs-comment">//        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>        String result1 = sdf.format(date);<br>        System.out.println(result1);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        String s = <span class="hljs-string">&quot;2048-01-01&quot;</span>;<br><br>        <span class="hljs-comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>        Date date = sdf.parse(s);<br><br>        System.out.println(date);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        <span class="hljs-comment">//开始时间：2020年11月11日 0:0:0</span><br>        <span class="hljs-comment">//结束时间：2020年11月11日 0:10:0</span><br><br>        <span class="hljs-comment">//小贾2020年11月11日 0:03:47</span><br>        <span class="hljs-comment">//小皮2020年11月11日 0:10:11</span><br><br><br>        <span class="hljs-comment">//1.判断两位同学的下单时间是否在范围之内就可以了。</span><br><br>        <span class="hljs-comment">//2.要把每一个时间都换算成毫秒值。</span><br><br>        String start = <span class="hljs-string">&quot;2020年11月11日 0:0:0&quot;</span>;<br>        String end = <span class="hljs-string">&quot;2020年11月11日 0:10:0&quot;</span>;<br><br>        String jia = <span class="hljs-string">&quot;2020年11月11日 0:03:47&quot;</span>;<br>        String pi = <span class="hljs-string">&quot;2020年11月11日 0:10:11&quot;</span>;<br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">long</span> startTime = sdf.parse(start).getTime();<br>        <span class="hljs-keyword">long</span> endTime = sdf.parse(end).getTime();<br><br><span class="hljs-comment">//        System.out.println(startTime);</span><br><span class="hljs-comment">//        System.out.println(endTime);</span><br>        <span class="hljs-keyword">long</span> jiaTime = sdf.parse(jia).getTime();<br>        <span class="hljs-keyword">long</span> piTime = sdf.parse(pi).getTime();<br><br>        <span class="hljs-keyword">if</span>(jiaTime &gt;= startTime &amp;&amp; jiaTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾同学参加上了秒杀活动&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾同学没有参加上秒杀活动&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(piTime &gt;= startTime &amp;&amp; piTime &lt;= endTime)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮同学参加上了秒杀活动&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮同学没有参加上秒杀活动&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="LocalDateTime-jdk8"><a href="#LocalDateTime-jdk8" class="headerlink" title="LocalDateTime(jdk8)"></a>LocalDateTime(jdk8)</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        LocalDate<br>​            仅仅封装了日期的对象<br>​        LocalTime<br>​            仅仅封装了时间的对象<br>​        LocalDateTime<br>​            既有日期, 又有时间</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象:"></a>创建对象:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static LocalDateTime now()</td><td align="center">//获取当前系统时间</td></tr><tr><td align="center">public static LocalDateTime of(年,月,日,时,分,秒)</td><td align="center">//使用指定年月日和时分秒初始化一个LocalDateTime对象</td></tr></tbody></table><h3 id="转换时间"><a href="#转换时间" class="headerlink" title="转换时间:"></a>转换时间:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDate toLocalDate()</td><td align="center">//转换成为一个LocalDate对象</td></tr><tr><td align="center">public LocalTime toLocalTime()</td><td align="center">//转换成为一个LocalTime对象</td></tr><tr><td align="center">public String format(DateTimeFormatter formatter)</td><td align="center">//按照指定格式格式化日期<br/>//LocalDateTime  -&gt;  String</td></tr><tr><td align="center">public static LocalDateTime parse(String source, DateTimeFormatter formatter)</td><td align="center">//按照指定格式解析字符串<br/>            //String  -&gt;  LocalDateTime</td></tr></tbody></table><h3 id="操作时间"><a href="#操作时间" class="headerlink" title="操作时间"></a>操作时间</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取:"></a>获取:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public int getYear()</td><td align="center">//获取年</td></tr><tr><td align="center">public int getMonthValue()</td><td align="center">//获取月份（1-12）</td></tr><tr><td align="center">public int getDayOfMonth()</td><td align="center">//获取月份中的第几天（1-31）</td></tr></tbody></table><h4 id="增加"><a href="#增加" class="headerlink" title="增加:"></a>增加:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime plusYears(long years)</td><td align="center">//添加或者减去年(正数增加,负数减少)</td></tr><tr><td align="center">public LocalDateTime plusMonths(long months)</td><td align="center">//添加或者减去月</td></tr><tr><td align="center">public LocalDateTime plusDays(long days)</td><td align="center">//添加或者减去日</td></tr></tbody></table><p>​        </p><h4 id="减少"><a href="#减少" class="headerlink" title="减少:"></a>减少:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime minusYears(long years)</td><td align="center">//减去或者添加年(正数减少,负数增加)</td></tr><tr><td align="center">public LocalDateTime minusMonths(long months)</td><td align="center">//减去或者添加月</td></tr><tr><td align="center">public LocalDateTime minusDays(long days)</td><td align="center">//减去或者添加日</td></tr></tbody></table><h4 id="修改"><a href="#修改" class="headerlink" title="修改:"></a>修改:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public LocalDateTime withYear(int year)</td><td align="center">//直接修改年</td></tr><tr><td align="center">public LocalDateTime withMonth(int month)</td><td align="center">//直接修改月</td></tr></tbody></table><p>​    </p><h3 id="计算间隔"><a href="#计算间隔" class="headerlink" title="计算间隔:"></a>计算间隔:</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public long until(LocalDateTime ldt, ChronoUnit.时间单位);</td><td align="center">//计算当前时间和ldt之间的时间间隔,<br/>        loaclDate和LocalTime均可以使用该方法</td></tr></tbody></table><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        <span class="hljs-comment">//JDKMethod();</span><br><br>        String s = <span class="hljs-string">&quot;2020年11月11日 00:00:00&quot;</span>;<br><br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        LocalDateTime localDateTime = LocalDateTime.parse(s, pattern);<br>        LocalDateTime newLocalDateTime = localDateTime.plusDays(<span class="hljs-number">1</span>);<br>        String result = newLocalDateTime.format(pattern);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JDKMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        String s = <span class="hljs-string">&quot;2020年11月11日 00:00:00&quot;</span>;<br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        Date date = sdf.parse(s);<br>        <span class="hljs-keyword">long</span> time = date.getTime();<br>        time = time + (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>        Date newDate = <span class="hljs-keyword">new</span> Date(time);<br>        String result = sdf.format(newDate);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime now = LocalDateTime.now();<br>        System.out.println(now);<br><br><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<br>        System.out.println(localDateTime);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.DayOfWeek;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.Month;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//public int getYear()           获取年</span><br>        <span class="hljs-keyword">int</span> year = localDateTime.getYear();<br>        System.out.println(<span class="hljs-string">&quot;年为&quot;</span> +year);<br>        <span class="hljs-comment">//public int getMonthValue()     获取月份（1-12）</span><br>        <span class="hljs-keyword">int</span> month = localDateTime.getMonthValue();<br>        System.out.println(<span class="hljs-string">&quot;月份为&quot;</span> + month);<br><br>        Month month1 = localDateTime.getMonth();<br><span class="hljs-comment">//        System.out.println(month1);</span><br><br>        <span class="hljs-comment">//public int getDayOfMonth()     获取月份中的第几天（1-31）</span><br>        <span class="hljs-keyword">int</span> day = localDateTime.getDayOfMonth();<br>        System.out.println(<span class="hljs-string">&quot;日期为&quot;</span> + day);<br><br><br>        <span class="hljs-comment">//public int getDayOfYear()      获取一年中的第几天（1-366）</span><br>        <span class="hljs-keyword">int</span> dayOfYear = localDateTime.getDayOfYear();<br>        System.out.println(<span class="hljs-string">&quot;这是一年中的第&quot;</span> + dayOfYear + <span class="hljs-string">&quot;天&quot;</span>);<br><br><br>        <span class="hljs-comment">//public DayOfWeek getDayOfWeek()获取星期</span><br>        DayOfWeek dayOfWeek = localDateTime.getDayOfWeek();<br>        System.out.println(<span class="hljs-string">&quot;星期为&quot;</span> + dayOfWeek);<br><br><br>        <span class="hljs-comment">//public int getMinute()        获取分钟</span><br>        <span class="hljs-keyword">int</span> minute = localDateTime.getMinute();<br>        System.out.println(<span class="hljs-string">&quot;分钟为&quot;</span> + minute);<br>        <span class="hljs-comment">//public int getHour()           获取小时</span><br><br>        <span class="hljs-keyword">int</span> hour = localDateTime.getHour();<br>        System.out.println(<span class="hljs-string">&quot;小时为&quot;</span> + hour);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//public LocalDate toLocalDate ()    转换成为一个LocalDate对象</span><br>        LocalDate localDate = localDateTime.toLocalDate();<br>        System.out.println(localDate);<br><br>        <span class="hljs-comment">//public LocalTime toLocalTime ()    转换成为一个LocalTime对象</span><br>        LocalTime localTime = localDateTime.toLocalTime();<br>        System.out.println(localTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//method1();</span><br>        <span class="hljs-comment">//method2();</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//public static LocalDateTime parse (准备解析的字符串, 解析格式) 把一个日期字符串解析成为一个LocalDateTime对象</span><br>        String s = <span class="hljs-string">&quot;2020年11月12日 13:14:15&quot;</span>;<br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        LocalDateTime parse = LocalDateTime.parse(s, pattern);<br>        System.out.println(parse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        System.out.println(localDateTime);<br>        <span class="hljs-comment">//public String format (指定格式)   把一个LocalDateTime格式化成为一个字符串</span><br>        DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        String s = localDateTime.format(pattern);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类添加或者减去时间的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime plusYears (long years)   添加或者减去年</span><br><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-comment">//LocalDateTime newLocalDateTime = localDateTime.plusYears(1);</span><br>        <span class="hljs-comment">//System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.plusYears(-<span class="hljs-number">1</span>);<br>        System.out.println(newLocalDateTime);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test7"><a href="#test7" class="headerlink" title="test7"></a>test7</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类减少或者添加时间的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime minusYears (long years)  减去或者添加年</span><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-comment">//LocalDateTime newLocalDateTime = localDateTime.minusYears(1);</span><br>        <span class="hljs-comment">//System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.minusYears(-<span class="hljs-number">1</span>);<br>        System.out.println(newLocalDateTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test8"><a href="#test8" class="headerlink" title="test8"></a>test8</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK8 时间类修改时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public LocalDateTime withYear(int year)   修改年</span><br>        LocalDateTime localDateTime = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>       <span class="hljs-comment">// LocalDateTime newLocalDateTime = localDateTime.withYear(2048);</span><br>       <span class="hljs-comment">// System.out.println(newLocalDateTime);</span><br><br>        LocalDateTime newLocalDateTime = localDateTime.withMonth(<span class="hljs-number">20</span>);<br>        System.out.println(newLocalDateTime);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test9"><a href="#test9" class="headerlink" title="test9"></a>test9</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.Period;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  计算两个时间的间隔</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public static Period between(开始时间,结束时间)  计算两个&quot;时间&quot;的间隔</span><br><br>        LocalDate localDate1 = LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        LocalDate localDate2 = LocalDate.of(<span class="hljs-number">2048</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>);<br>        Period period = Period.between(localDate1, localDate2);<br>        System.out.println(period);<span class="hljs-comment">//P28Y11M11D</span><br><br>        <span class="hljs-comment">//public int getYears()         获得这段时间的年数</span><br>        System.out.println(period.getYears());<span class="hljs-comment">//28</span><br>        <span class="hljs-comment">//public int getMonths()        获得此期间的月数</span><br>        System.out.println(period.getMonths());<span class="hljs-comment">//11</span><br>        <span class="hljs-comment">//public int getDays()          获得此期间的天数</span><br>        System.out.println(period.getDays());<span class="hljs-comment">//11</span><br><br>        <span class="hljs-comment">//public long toTotalMonths()   获取此期间的总月数</span><br>        System.out.println(period.toTotalMonths());<span class="hljs-comment">//347</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test10"><a href="#test10" class="headerlink" title="test10"></a>test10</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  计算两个时间的间隔</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//public static Duration between(开始时间,结束时间)  计算两个“时间&quot;的间隔</span><br><br>        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>        LocalDateTime localDateTime2 = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>);<br>        Duration duration = Duration.between(localDateTime1, localDateTime2);<br>        System.out.println(duration);<span class="hljs-comment">//PT21H57M58S</span><br>        <span class="hljs-comment">//public long toSeconds()           获得此时间间隔的秒</span><br>        System.out.println(duration.toSeconds());<span class="hljs-comment">//79078</span><br>        <span class="hljs-comment">//public int toMillis()               获得此时间间隔的毫秒</span><br>        System.out.println(duration.toMillis());<span class="hljs-comment">//79078000</span><br>        <span class="hljs-comment">//public int toNanos()             获得此时间间隔的纳秒</span><br>        System.out.println(duration.toNanos());<span class="hljs-comment">//79078000000000</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="DateTimeFormatter-jdk8"><a href="#DateTimeFormatter-jdk8" class="headerlink" title="DateTimeFormatter(jdk8)"></a>DateTimeFormatter(jdk8)</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述:"></a>概述:</h3><p>​        用来表示日期/时间格式的类.<br>​         和SimpleDateFormat类似.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><p>​        public static DateTimeFormatter ofPattern(String pattern);<br>​        //根据字符串格式获取一个日期格式化对象</p><h2 id="时间间隔-了解"><a href="#时间间隔-了解" class="headerlink" title="时间间隔(了解)"></a>时间间隔(了解)</h2><h3 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述:"></a>概述:</h4><p>​            计算两个日期之间的间隔<br>​            JDK8之后</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static Period between(日期对象,日期对象);</td><td align="center">//计算两个日期之间的间隔.日期对象可以为: LocalDate</td></tr><tr><td align="center">public int getDays()</td><td align="center">//获得此期间的天数。</td></tr><tr><td align="center">public int getMonths()</td><td align="center">//获得此期间的月数。</td></tr><tr><td align="center">public int getYears()</td><td align="center">//获得此期间的年数。</td></tr><tr><td align="center">public long toTotalMonths()</td><td align="center">//获取此期间的总月数</td></tr></tbody></table><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述:"></a>概述:</h4><p>​            计算两个时间之间的间隔<br>​            JDK8之后</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static Duration between(时间对象,时间对象);</td><td align="center">//计算两个时间之间的间隔.<br/>                 时间对象可以为: LocalTime,LocalDateTime</td></tr><tr><td align="center">public int toHours()</td><td align="center">//获得此期间的小时数。</td></tr><tr><td align="center">public int toMinutes()</td><td align="center">//获得此期间的分钟数。</td></tr><tr><td align="center">public int toSeconds()</td><td align="center">//获得此期间的秒数。</td></tr></tbody></table><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>​         程序发生的不正常现象(报错),就称之为”异常”.<br>​        注意, 这里的错误指的不是”语法性错误”</p><h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4><p>​            Error:  错误.一般是硬件问题,是没法解决的问题.<br>​            Exception异常.<br>​                运行时异常:<br>​                    1.运行代码的时候报的错就是运行时异常.<br>​                    2.运行时异常一般指的是RuntimeException及其子类.<br>​                编译时异常:<br>​                    1.写代码的时候报的错(排除语法错误),就是编译时异常.<br>​                    2.除了RuntimeException及其子类,其他类都是编译时异常.</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>​            通常所说的异常, 指的就是Exception</p><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><h5 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br><span class="hljs-comment">//        int [] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="hljs-comment">//        System.out.println(arr[10]);//ArrayIndexOutOfBoundsException</span><br><br><br><span class="hljs-comment">//        String s = null;</span><br><span class="hljs-comment">//        System.out.println(s.equals(&quot;嘿嘿&quot;));//NullPointerException</span><br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>        sdf.parse(<span class="hljs-string">&quot;2048-1月1日&quot;</span>);<span class="hljs-comment">//ParseException</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//思考:控制台为什么会有这样的红色字体呢? 是谁打印的?</span><br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(arr[<span class="hljs-number">10</span>]);<span class="hljs-comment">//当代码出现了异常,那么就在这里创建了一个异常对象.</span><br>                                    <span class="hljs-comment">//new ArrayIndexOutOfBoundsException();</span><br>                                    <span class="hljs-comment">//首先会看,程序中有没有自己处理异常的代码.</span><br>                                    <span class="hljs-comment">//如果没有,交给本方法的调用者处理.</span><br>                                    <span class="hljs-comment">//最终这个异常会交给虚拟机默认处理.</span><br>                                    <span class="hljs-comment">//JVM默认处理异常做了哪几件事情:</span><br>                                    <span class="hljs-comment">//1,将异常信息以红色字体展示在控制台上.</span><br>                                    <span class="hljs-comment">//2,停止程序运行. --- 哪里出现了异常,那么程序就在哪里停止,下面的代码不执行了.</span><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿,我最帅&quot;</span>);<br><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-2"><a href="#test3-2" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo3</span> </span>&#123;<br>    <span class="hljs-comment">//创建一个ArrayList集合,添加一些元素 &quot;aaa&quot; &quot;bbb&quot; &quot;bbb&quot; &quot;ccc&quot; &quot;bbb&quot; null</span><br>    <span class="hljs-comment">//遍历集合,并统计集合中有多少个&quot;bbb&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;bbb&quot;</span>.equals(it.next()))&#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;在集合中一共出现bbb有&quot;</span> + count+ <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test4-1"><a href="#test4-1" class="headerlink" title="test4"></a>test4</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo4</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个方法,用来遍历数组.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int [] arr = &#123;1,2,3,4,5&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        printArr(arr);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>       <span class="hljs-comment">// if(arr != null)&#123;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>       <span class="hljs-comment">// &#125;</span><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test5-1"><a href="#test5-1" class="headerlink" title="test5"></a>test5</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo5</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个猫类, 成员变量:姓名,年龄. 成员方法:睡觉,抓老鼠.</span><br>    <span class="hljs-comment">//定义一个狗类, 成员变量:姓名,年龄. 成员方法:睡觉,看家.</span><br>    <span class="hljs-comment">//定义一个饲养员类,成员方法:饲养动物,要求该方法既能养猫,又能养狗.</span><br>    <span class="hljs-comment">//并在方法中调用猫狗的睡觉方法和特有方法.</span><br>    <span class="hljs-comment">//在测试类中创建饲养员的对象,并调用饲养动物的方法.</span><br><br><br>    <span class="hljs-comment">//分析:</span><br>        <span class="hljs-comment">//1.本题涉及多少类?   猫  狗  饲养员  测试类</span><br>        <span class="hljs-comment">//2.有没有共性内容可以抽取? 猫 和 狗 中有共性内容.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Feeder feeder = <span class="hljs-keyword">new</span> Feeder();<br>        feeder.feedAnimal(<span class="hljs-keyword">new</span> Cat());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Feeder"><a href="#Feeder" class="headerlink" title="Feeder"></a>Feeder</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Feeder</span> </span>&#123;<br>    <span class="hljs-comment">//定义一个饲养员类,成员方法:饲养动物,要求该方法既能养猫,又能养狗.</span><br>     <span class="hljs-comment">//并在方法中调用猫狗的睡觉方法和特有方法.</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">feedAnimal</span><span class="hljs-params">(Animal animal)</span></span>&#123;<br>        animal.sleep();<br>        <span class="hljs-comment">//向下转型</span><br>        <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>            Dog d = (Dog) animal;<br>            d.lookHome();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>            Cat c = (Cat) animal;<br>            c.catchMouse();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有这样的数据类型&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">//因为构造方法不能被继承只能被子类使用super关键字去调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Dog"><a href="#Dog" class="headerlink" title="Dog"></a>Dog</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookHome</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗看家&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Animal"><a href="#Animal" class="headerlink" title="Animal"></a>Animal</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Animal&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="JVM处理异常"><a href="#JVM处理异常" class="headerlink" title="JVM处理异常"></a>JVM处理异常</h4><p>​            1.把”异常类型,异常位置,异常原因”打印到控制台.<br>​            2.终止当前程序的运行.</p><h4 id="自己处理异常"><a href="#自己处理异常" class="headerlink" title="自己处理异常"></a>自己处理异常</h4><h5 id="方式"><a href="#方式" class="headerlink" title="方式:"></a>方式:</h5><p>​                异常声明: throws<br>​                异常捕获: try-catch</p><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h5><p>​                自己处理异常,目的并不是要把异常干掉<br>​                1.把异常信息获取到(类型,原因,位置等)<br>​                2.让这个异常不影响其他的代码的正常运行.</p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>​            throw叫做异常抛出<br>​            可以理解为”故意制造一个异常”</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>​            throw  new 异常类型(“异常信息”);</p><h4 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h4><h5 id="test1-3"><a href="#test1-3" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        method1(); <span class="hljs-comment">//此时调用者也没有处理.还是会交给虚拟机处理.</span><br>        method2(); <span class="hljs-comment">//还是继续交给调用者处理.而main方法的调用者是虚拟机还是会采取虚拟机默认处理异常的方法.</span><br>    &#125;<br><br>    <span class="hljs-comment">//告诉调用者,你调用我,有可能会出现这样的异常哦.</span><br>    <span class="hljs-comment">//如果方法中没有出现异常,那么正常执行</span><br>    <span class="hljs-comment">//如果方法中真的出现了异常,其实也是将这个异常交给了调用者处理.</span><br>    <span class="hljs-comment">//如果声明的异常是一个运行时异常,那么声明的代码可以省略</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-comment">/*throws NullPointerException*/</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">//出现的空指针异常,还是由虚拟机创建出来的.</span><br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//告诉调用者,你调用我,有可能会出现这样的异常哦.</span><br>    <span class="hljs-comment">//如果方法中没有出现异常,那么正常执行</span><br>    <span class="hljs-comment">//如果方法中真的出现了异常,其实也是将这个异常交给了调用者处理.</span><br>    <span class="hljs-comment">//如果声明的异常是一个编译时异常,那么声明的代码必须要手动写出.</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>        sdf.parse(<span class="hljs-string">&quot;2048-10月10日&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-3"><a href="#test2-3" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;家里有一个貌美如花的老婆&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;还有一个当官的兄弟&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;自己还有一个买卖&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;这样的生活你要不要?&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(); <span class="hljs-comment">//当代码执行到这里,就创建一个异常对象</span><br>                                    <span class="hljs-comment">//该异常创建之后,暂时没有手动处理.抛给了调用者处理</span><br>                                    <span class="hljs-comment">//下面的代码不会再执行了.</span><br>        <span class="hljs-comment">//System.out.println(&quot;武大郎的标准生活&quot;);</span><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-3"><a href="#test3-3" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int [] arr = &#123;1,2,3,4,5&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        printArr(arr);<span class="hljs-comment">//就会 接收到一个异常.</span><br>                        <span class="hljs-comment">//我们还需要自己处理一下异常.</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//调用者知道成功打印了吗?</span><br>            <span class="hljs-comment">//System.out.println(&quot;参数不能为null&quot;);</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(); <span class="hljs-comment">//当参数为null的时候</span><br>                                                <span class="hljs-comment">//手动创建了一个异常对象,抛给了调用者.</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常声明-throws"><a href="#异常声明-throws" class="headerlink" title="异常声明 throws"></a>异常声明 throws</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>​            public void 方法名() throws 异常类型{   …   }</p><h4 id="位置"><a href="#位置" class="headerlink" title="位置:"></a>位置:</h4><p>​             方法参数后边.</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义:"></a>意义:</h4><p>​            告诉方法的调用者,我很危险.<br>​            一般”编译时异常”都使用该方式处理.</p><h3 id="异常捕获-try-catch"><a href="#异常捕获-try-catch" class="headerlink" title="异常捕获 try-catch"></a>异常捕获 try-catch</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法:"></a>语法:</h4><p>​            </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//可能出现异常的代码</span><br>       &#125; <span class="hljs-keyword">catch</span> (异常类型 e) &#123;<br>    <span class="hljs-comment">//当try中发生异常时,会执行这里</span><br>    <span class="hljs-comment">//把&quot;异常类型&quot;,异常原因,异常位置打印到控制台</span><br>           e.printStackTrace();<br>       &#125;<br></code></pre></div></td></tr></table></figure><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>​            1.如果try中不出现异常,则执行完try之后,整个try-catch结束, catch中的代码不执行<br>​            2.如果try中出现异常,则立即跳转到catch中执行,catch执行完毕后,整个try-catch结束<br>​            3.当try中出现异常的时候, JVM会把异常捕获,并做成一个异常对象, 交给catch()中的异常变量</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>​            1.catch()中的异常类型,必须和捕捉到的异常类型一致.<br>​            2.catch可以有多个.<br>​            3.catch()中的异常类型一般直接写为Exception</p><h4 id="意义-1"><a href="#意义-1" class="headerlink" title="意义:"></a>意义:</h4><p>​            对于可能出现异常的代码进行封装,让其不影响其他代码的执行.</p><h4 id="test-5"><a href="#test-5" class="headerlink" title="test"></a>test</h4><h5 id="test1-4"><a href="#test1-4" class="headerlink" title="test1"></a>test1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//好处:为了能让代码继续往下运行.</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//有肯能发现异常的代码</span><br>            printArr(arr);<br>        &#125;<span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>            <span class="hljs-comment">//如果出现了这样的异常,那么我们进行的操作</span><br>            System.out.println(<span class="hljs-string">&quot;参数不能为null&quot;</span>);<br>        &#125;<br><br><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿,我最帅!!!&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.println(arr[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-4"><a href="#test2-4" class="headerlink" title="test2"></a>test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.如果 try 中没有遇到问题，怎么执行？ --- 会把try中所有的代码全部执行完毕,不会执行catch里面的代码</span><br>        <span class="hljs-comment">//2.如果 try 中遇到了问题，那么 try 下面的代码还会执行吗？</span><br>                            <span class="hljs-comment">//那么直接跳转到对应的catch语句中,try下面的代码就不会再执行了</span><br>                            <span class="hljs-comment">//当catch里面的语句全部执行完毕,表示整个体系全部执行完全,继续执行下面的代码</span><br>        <span class="hljs-comment">//3.如果出现的问题没有被捕获，那么程序如何运行？</span><br>                             <span class="hljs-comment">//那么try...catch就相当于没有写.那么也就是自己没有处理.</span><br>                             <span class="hljs-comment">//默认交给虚拟机处理.</span><br>        <span class="hljs-comment">//4.同时有可能出现多个异常怎么处理？</span><br>                            <span class="hljs-comment">//出现多个异常,那么就写多个catch就可以了.</span><br>                            <span class="hljs-comment">//注意点:如果多个异常之间存在子父类关系.那么父类一定要写在下面</span><br><br>       <span class="hljs-comment">// method1();</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>);<br>            String line = sc.nextLine();<br>            <span class="hljs-keyword">int</span> age = Integer.parseInt(line);<span class="hljs-comment">//格式化异常</span><br>            System.out.println(age);<br>            System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>); <span class="hljs-comment">//数学异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//以后我们针对于每种不同的异常,有可能会有不同的处理结果.</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;测试456&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>);<br>            String line = sc.nextLine();<br>            <span class="hljs-keyword">int</span> age = Integer.parseInt(line);<span class="hljs-comment">//格式化异常</span><br>            System.out.println(age);<br>            System.out.println(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>); <span class="hljs-comment">//数学异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;格式化异常出现了&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数学运算异常出现了&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;测试456&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test3-4"><a href="#test3-4" class="headerlink" title="test3"></a>test3</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo11</span> </span>&#123;<br>    <span class="hljs-comment">//public String getMessage()    返回此 throwable 的详细消息字符串</span><br>    <span class="hljs-comment">//public String toString()      返回此可抛出的简短描述</span><br>    <span class="hljs-comment">//public void printStackTrace() 把异常的错误信息输出在控制台(字体为红色的)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>            System.out.println(arr[<span class="hljs-number">10</span>]);<span class="hljs-comment">//虚拟机帮我们创建了一个异常对象 new ArrayIndexOutOfBoundsException();</span><br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            <span class="hljs-comment">/*String message = e.getMessage();</span><br><span class="hljs-comment">            System.out.println(message);*/</span><br>           <span class="hljs-comment">/* String s = e.toString();</span><br><span class="hljs-comment">            System.out.println(s);*/</span><br>           e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;嘿嘿嘿&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>​        1.自定义一个类, 类名一般为”XxxxException”<br>​        2.继承任意一个异常父类<br>​        3.提供两个构造方法<br>​            空参构造方法<br>​            字符串参数构造方</p><h3 id="意义-2"><a href="#意义-2" class="headerlink" title="意义:"></a>意义:</h3><p>​        通过”异常类名”直接表现出异常的原因.</p><h3 id="test-6"><a href="#test-6" class="headerlink" title="test"></a>test</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionDemo12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 键盘录入学生的姓名和年龄,其中年龄为 18 - 25岁,</span><br>        <span class="hljs-comment">// 超出这个范围是异常数据不能赋值.需要重新录入,一直录到正确为止。</span><br><br>        Student s = <span class="hljs-keyword">new</span> Student();<br><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入姓名&quot;</span>);<br>        String name = sc.nextLine();<br>        s.setName(name);<br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;请输入年龄&quot;</span>);<br>           String ageStr = sc.nextLine();<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">int</span> age = Integer.parseInt(ageStr);<br>               s.setAge(age);<br>               <span class="hljs-keyword">break</span>;<br>           &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>               System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br>               <span class="hljs-keyword">continue</span>;<br>           &#125; <span class="hljs-keyword">catch</span> (AgeOutOfBoundsException e) &#123;<br>               System.out.println(e.toString());<br>               System.out.println(<span class="hljs-string">&quot;请输入一个符合范围的年龄&quot;</span>);<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-comment">/*if(age &gt;= 18 &amp;&amp; age &lt;=25)&#123;</span><br><span class="hljs-comment">               s.setAge(age);</span><br><span class="hljs-comment">               break;</span><br><span class="hljs-comment">           &#125;else&#123;</span><br><span class="hljs-comment">               System.out.println(&quot;请输入符合要求的年龄&quot;);</span><br><span class="hljs-comment">               continue;</span><br><span class="hljs-comment">           &#125;*/</span><br>       &#125;<br>        System.out.println(s);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeOutOfBoundsException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeOutOfBoundsException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeOutOfBoundsException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day05 常用API</title>
    <link href="/2017/04/02/SAd05/"/>
    <url>/2017/04/02/SAd05/</url>
    
    <content type="html"><![CDATA[<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><span id="more"></span><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        Object是类层次结构的根类, 是一切类的祖宗.<br>​        所有的类都直接或者间接的继承自Object类.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        public String toString();<br>​            返回对象的字符串表示形式<br>​            子类重写后,控制台直接打印会比较方便<br>​        public boolean equals(对象);<br>​            比较两个对象是否相等.默认比地址值<br>​            子类重写后,重写后比内容.</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><h5 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h5><h6 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> /*<span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span>*/</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-Demo"><a href="#class-Demo" class="headerlink" title="class Demo"></a>class Demo</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        System.out.println(s);<span class="hljs-comment">//com.itheima.demo1.Student@3f3afe78</span><br>        System.out.println(s.toString());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h5><h6 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        Student student = (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(student.name) : student.name == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-Demo-1"><a href="#class-Demo-1" class="headerlink" title="class Demo"></a>class Demo</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br><br>        System.out.println(s1 == s2);<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//Object类中的equals方法,底层也是用==号比较地址值.</span><br>        System.out.println(s1.equals(s2));<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h5><h6 id="class-InterviewTest"><a href="#class-InterviewTest" class="headerlink" title="class InterviewTest"></a>class InterviewTest</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterviewTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">//1.此时调用的是String类中的equals方法.</span><br>        <span class="hljs-comment">//保证参数也是字符串,否则不会比较属性值而直接返回false</span><br>        <span class="hljs-comment">//System.out.println(s1.equals(sb));</span><br><br>        <span class="hljs-comment">//StringBuilder类中是没有重写equals方法,用的就是Object类中的.</span><br>        System.out.println(sb.equals(s1));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        是Object的工具类, 包含了操作对象的一些方法</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>​        public static boolean isNull(Object obj);<br>​            判断对象是否为null<br>​        public static boolean nonNull(Object obj);<br>​            判断对象是否不为null</p><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><h5 id="class-MyObjectsDemo"><a href="#class-MyObjectsDemo" class="headerlink" title="class MyObjectsDemo"></a>class MyObjectsDemo</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObjectsDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public static String toString(对象)           返回参数中对象的字符串表示形式。</span><br><span class="hljs-comment">//        Student s = new Student(&quot;小罗同学&quot;,50);</span><br><span class="hljs-comment">//        String result = Objects.toString(s);</span><br><span class="hljs-comment">//        System.out.println(result);</span><br><span class="hljs-comment">//        System.out.println(s);</span><br><br><br><span class="hljs-comment">//        public static String toString(对象, 默认字符串)  返回对象的字符串表示形式。如果对象为空,那么返回第二个参数.</span><br>        <span class="hljs-comment">//Student s = new Student(&quot;小花同学&quot;,23);</span><br><span class="hljs-comment">//        Student s = null;</span><br><span class="hljs-comment">//        String result = Objects.toString(s, &quot;随便写一个&quot;);</span><br><span class="hljs-comment">//        System.out.println(result);</span><br><br><span class="hljs-comment">//        public static Boolean isNull(对象)         判断对象是否为空</span><br>        <span class="hljs-comment">//Student s = null;</span><br><span class="hljs-comment">//        Student s = new Student();</span><br><span class="hljs-comment">//        boolean result = Objects.isNull(s);</span><br><span class="hljs-comment">//        System.out.println(result);</span><br><br><br><span class="hljs-comment">//        public static Boolean nonNull(对象)         判断对象是否不为空</span><br>        <span class="hljs-comment">//Student s = new Student();</span><br>        Student s = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">boolean</span> result = Objects.nonNull(s);<br>        System.out.println(result);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//System.out.println(&quot;看看我执行了吗?&quot;);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        是一个比double类型更大的小数<br>​        该类的精度比double更加的精确</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>​        public BigDecimal(double d);<br>​        public BigDecimal(String d);<br>​            //推荐使用,因为更加精确</p><h4 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h4><h5 id="demo1-1"><a href="#demo1-1" class="headerlink" title="demo1"></a>demo1</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBigDecimalDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3.0</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="demo2-1"><a href="#demo2-1" class="headerlink" title="demo2"></a>demo2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBigDecimalDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BigDecimal bd1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">10.0</span>);<br>        BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.3&quot;</span>);<br><br>        System.out.println(bd1);<br>        System.out.println(bd2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><p>​            public BigDecimal add(另一个BigDecimal对象)<br>​                //加法<br>​            public BigDecimal subtract(另一个BigDecimal对象)<br>​                //减法<br>​            public BigDecimal multiply(另一个BigDecimal对象)<br>​                //乘法<br>​            public BigDecimal divide(另一个BigDecimal对象)<br>​                     //除法</p><h4 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h4><p>​            public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)<br>​                //除法<br>​            public BigDecimal setScale(精确几位，舍入模式)<br>​                //保留几位精度</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量:"></a>常量:</h3><p>​        BigDecimal.ROUND_UP<br>​            //舍入模式 -&gt; 进一法<br>​        BigDecimal.ROUND_FLOOR<br>​            //舍入模式 -&gt; 去尾法<br>​        BigDecimal.ROUND_HALF_UP<br>​            //舍入模式 -&gt; 四舍五入</p><h3 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h3><h4 id="demo1-2"><a href="#demo1-2" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBigDecimalDemo3</span> </span>&#123;<br>    <span class="hljs-comment">//如果想要进行精确运算,那么请使用字符串的构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        BigDecimal bd1 = new BigDecimal(0.1);</span><br><span class="hljs-comment">//        BigDecimal bd2 = new BigDecimal(0.2);</span><br>        BigDecimal bd1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.1&quot;</span>);<br>        BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.2&quot;</span>);<br><span class="hljs-comment">//        public BigDecimal add(另一个BigDecimal对象)     加法</span><br>        BigDecimal add = bd1.add(bd2);<br>        System.out.println(<span class="hljs-string">&quot;和为&quot;</span> + add);<br>        <span class="hljs-comment">//System.out.println(0.1 + 0.2);</span><br><br><br><br><span class="hljs-comment">//        public BigDecimal subtract (另一个BigDecimal对象)  减法</span><br>        BigDecimal subtract = bd1.subtract(bd2);<br>        System.out.println(<span class="hljs-string">&quot;差为&quot;</span> + subtract);<br><br><span class="hljs-comment">//        public BigDecimal multiply (另一个BigDecimal对象)  乘法</span><br>        BigDecimal multiply = bd1.multiply(bd2);<br>        System.out.println(<span class="hljs-string">&quot;积为&quot;</span> + multiply);<br><span class="hljs-comment">//        public BigDecimal divide (另一个BigDecimal对象)    除法</span><br>        BigDecimal divide = bd1.divide(bd2);<br>        System.out.println(<span class="hljs-string">&quot;商为&quot;</span>+divide);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2-2"><a href="#demo2-2" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBigDecimalDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BigDecimal bd1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.3&quot;</span>);<br>        BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;4&quot;</span>); <span class="hljs-comment">//0.075</span><br><br>       <span class="hljs-comment">/* BigDecimal divide = bd1.divide(bd2);</span><br><span class="hljs-comment">        System.out.println(divide);*/</span><br><br>       <span class="hljs-comment">//参数一:表示参数运算的另一个对象</span><br>       <span class="hljs-comment">//参数二:表示小数点后精确到多少位</span><br>       <span class="hljs-comment">//参数三:舍入模式</span><br>                <span class="hljs-comment">//进一法  BigDecimal.ROUND_UP</span><br>                <span class="hljs-comment">//去尾法  BigDecimal.ROUND_FLOOR</span><br>                <span class="hljs-comment">//四舍五入 BigDecimal.ROUND_HALF_UP</span><br>        BigDecimal divide = bd1.divide(bd2, <span class="hljs-number">2</span>, BigDecimal.ROUND_HALF_UP);<br>        System.out.println(divide);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>​        就是基本数据类型对应的”引用数据类型形式”</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​        基本数据类型和String之间的相互转换</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>​        </p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h4><p>​            把”基本数据类型”变为”与之对应的包装类”<br>​            自动装箱: 指的就是自动发生的装箱操作<br>​                JDK5</p><h4 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h4><p>​            把”包装类”变为”与之对应的基本数据类型”<br>​            自动拆箱: 指的就是自动发生的拆箱现象<br>​                JDK5</p><h4 id="demo-4"><a href="#demo-4" class="headerlink" title="demo"></a>demo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntegerDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer i1 = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//   对象      = 默认是一个基本数据类型</span><br><br>        <span class="hljs-comment">//jdk1.5的特性 --- 自动装箱</span><br><br>        <span class="hljs-comment">//装箱: 把一个基本数据类型 变量对应的包装类.</span><br>        <span class="hljs-comment">//自动: Java底层会帮我们自动的调用valueof方法.</span><br>        System.out.println(i1);<br><br>        <span class="hljs-comment">//jdk1.5的特性 --- 自动拆箱</span><br>        <span class="hljs-comment">//拆箱: 把一个包装类型 变成对应的基本数据类型</span><br>        <span class="hljs-keyword">int</span> i2 = i1;<br>        System.out.println(i2);<br><br>        Integer i3 = <span class="hljs-number">100</span>; <span class="hljs-comment">//自动装箱机制</span><br>        i3 += <span class="hljs-number">200</span>;<span class="hljs-comment">//i3 = i3 + 200;</span><br>                   <span class="hljs-comment">//会把i3这个对象变成基本数据类型100.</span><br>                    <span class="hljs-comment">//100 + 200 = 300</span><br>                <span class="hljs-comment">//把基本数据类型300再次自动装箱变成Integer对象赋值给i3</span><br>        System.out.println(i3);<br><br><br>        <span class="hljs-comment">//细节:</span><br>        Integer i4 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(i4 != <span class="hljs-keyword">null</span>)&#123;<br>            i4 += <span class="hljs-number">200</span>;<br>            System.out.println(i4);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>​        Integer是int类型的包装类</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>​        String   -&gt;    int<br>​            int num = Integer.parseInt(“数字类型字符串”);<br>​        int   -&gt;    String<br>​            String s = 数字 + “”;<br>​            String s = String.valueOf(数字);</p><h3 id="demo-5"><a href="#demo-5" class="headerlink" title="demo"></a>demo</h3><h4 id="demo1-3"><a href="#demo1-3" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntegerDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//需求：我要判断一个整数是否在 int 范围内?</span><br>        <span class="hljs-comment">//Integer</span><br>        System.out.println(Integer.MAX_VALUE);<br>        System.out.println(Integer.MIN_VALUE);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2-3"><a href="#demo2-3" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntegerDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public Integer(int value)           根据int创建Integer对象(过时)</span><br><span class="hljs-comment">//public Integer(String s)            根据String值创建Integer对象(过时)</span><br>        Integer i1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">100</span>);<br>        Integer i2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;100&quot;</span>);<br>        System.out.println(i1);<br>        System.out.println(i2);<br><br><br><span class="hljs-comment">//        public static Integer valueOf(int i)    返回表示指定的int值的Integer实例</span><br><span class="hljs-comment">//        public static Integer valueOf(String s) 返回一个保存指定值的Integer对象String</span><br><br>        Integer i3 = Integer.valueOf(<span class="hljs-number">200</span>);<br>        Integer i4 = Integer.valueOf(<span class="hljs-string">&quot;200&quot;</span>);<br>        System.out.println(i3);<br>        System.out.println(i4);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo4"><a href="#demo4" class="headerlink" title="demo4"></a>demo4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntegerDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;100&quot;</span>;<br>        <span class="hljs-keyword">int</span> i1 = <span class="hljs-number">200</span>;<br>        System.out.println(s1 + i1);<span class="hljs-comment">//100200 --- 字符串+任意的数据类型 结果都是一个字符串</span><br><br>        <span class="hljs-keyword">int</span> i2 = Integer.parseInt(s1);<span class="hljs-comment">//可以将字符串类型的整数变成int类型的整数</span><br>        System.out.println(i2 + i1);<br><br><br>        <span class="hljs-comment">//int  ---&gt; String</span><br>        <span class="hljs-comment">//方式一: +&quot;&quot;</span><br>        <span class="hljs-keyword">int</span> i3 = <span class="hljs-number">100</span>;<br>        String s2 = i3 + <span class="hljs-string">&quot;&quot;</span>;<br>        System.out.println(s2 + <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//方式二: 可以调用String类中valueof方法</span><br>        String s3 = String.valueOf(i3);<br>        System.out.println(s3 + <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo5"><a href="#demo5" class="headerlink" title="demo5"></a>demo5</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntegerDemo5</span> </span>&#123;<br>    <span class="hljs-comment">//需求：有一个字符串：“91 27 46 38 50”，把其中的每一个数存到int类型的数组中</span><br>    <span class="hljs-comment">//步骤:</span><br>    <span class="hljs-comment">//定义一个字符串</span><br>    <span class="hljs-comment">//把字符串中的数字数据存储到一个int类型的数组中</span><br>    <span class="hljs-comment">//遍历数组输出结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;91 27 46 38 50&quot;</span>;<br>        <span class="hljs-comment">//获取字符串中的每一个数字.</span><br>        String[] strArr = s.split(<span class="hljs-string">&quot; &quot;</span>);<br><br>        <span class="hljs-comment">//创建一个int类型的数组.</span><br>        <span class="hljs-keyword">int</span> [] numberArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[strArr.length];<br><br>        <span class="hljs-comment">//把strArr中的数据进行类型转换并存入到int数组中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strArr.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> number = Integer.parseInt(strArr[i]);<br>            numberArr[i] = number;<br>        &#125;<br>        <span class="hljs-comment">//遍历int类型的数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numberArr.length; i++) &#123;<br>            System.out.println(numberArr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>​        专门用来操作数组的工具类.</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h3><p>​        public static void sort(int[] arr);<br>​            //对数组进行升序排列<br>​        public static int binarySearch(int[] arr, int key);<br>​            //二分查找数组arr中的key元素所在的索引位置.<br>​            //二分查找时,要求数组必须是有序的, 而且是从小到大的顺序<br>​        public static String toString(int[] arr);<br>​            //返回数组的字符串形式.(“[1,2,3]”)</p><h4 id="demo-6"><a href="#demo-6" class="headerlink" title="demo"></a>demo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyArraysDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public static String toString(int[] a)    返回指定数组的内容的字符串表示形式</span><br><span class="hljs-comment">//        int [] arr = &#123;3,2,4,6,7&#125;;</span><br><span class="hljs-comment">//        System.out.println(Arrays.toString(arr));</span><br><br><br><span class="hljs-comment">//        public static void sort(int[] a)      按照数字顺序排列指定的数组</span><br><span class="hljs-comment">//        int [] arr = &#123;3,2,4,6,7&#125;;</span><br><span class="hljs-comment">//        Arrays.sort(arr);</span><br><span class="hljs-comment">//        System.out.println(Arrays.toString(arr));</span><br><br><span class="hljs-comment">//        public static int binarySearch(int[] a, int key) 利用二分查找返回指定元素的索引</span><br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-keyword">int</span> index = Arrays.binarySearch(arr, <span class="hljs-number">0</span>);<br>        System.out.println(index);<br>        <span class="hljs-comment">//1,数组必须有序</span><br>        <span class="hljs-comment">//2.如果要查找的元素存在,那么返回的是这个元素实际的索引</span><br>        <span class="hljs-comment">//3.如果要查找的元素不存在,那么返回的是 (-插入点-1)</span><br>            <span class="hljs-comment">//插入点:如果这个元素在数组中,他应该在哪个索引上.</span><br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>​        其实就是方法自己调用自己.</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h3><h4 id="1-方法一定要有出口-一定要有结束的时候"><a href="#1-方法一定要有出口-一定要有结束的时候" class="headerlink" title="1.方法一定要有出口(一定要有结束的时候)"></a>1.方法一定要有出口(一定要有结束的时候)</h4><h4 id="2-方法一定要有规律"><a href="#2-方法一定要有规律" class="headerlink" title="2.方法一定要有规律."></a>2.方法一定要有规律.</h4><h4 id="3-递归次数不能太多-否则会”栈内存溢出”"><a href="#3-递归次数不能太多-否则会”栈内存溢出”" class="headerlink" title="3.递归次数不能太多,否则会”栈内存溢出”"></a>3.递归次数不能太多,否则会”栈内存溢出”</h4><h3 id="demo-7"><a href="#demo-7" class="headerlink" title="demo"></a>demo</h3><h4 id="demo1-4"><a href="#demo1-4" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFactorialDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            sum = sum + i;<br>        &#125;<br>        System.out.println(sum);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2-4"><a href="#demo2-4" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFactorialDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = getSum(<span class="hljs-number">100</span>);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-comment">//1- 100之间的和</span><br>            <span class="hljs-comment">//100 + (1-99之间的和)</span><br>                    <span class="hljs-comment">// 99 + (1- 98之间的和)</span><br>                        <span class="hljs-comment">//....</span><br>                            <span class="hljs-comment">//1</span><br>        <span class="hljs-comment">//方法的作用: 求 1- i 之间和</span><br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> i + getSum(i -<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo3-1"><a href="#demo3-1" class="headerlink" title="demo3"></a>demo3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFactorialDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = getJc(<span class="hljs-number">5</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getJc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-comment">//1,就是一定要找到出口.</span><br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//2.就是递归的规则</span><br>            <span class="hljs-keyword">return</span> i * getJc(i - <span class="hljs-number">1</span>);<br>       &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBinarySearchDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-keyword">int</span> number = <span class="hljs-number">11</span>;<br><br>        <span class="hljs-comment">//1,我现在要干嘛? --- 二分查找</span><br>        <span class="hljs-comment">//2.我干这件事情需要什么? --- 数组 元素</span><br>        <span class="hljs-comment">//3,我干完了,要不要把结果返回调用者 --- 把索引返回给调用者</span><br>        <span class="hljs-keyword">int</span> index = binarySearchForIndex(arr,number);<br>        System.out.println(index);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearchForIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">//1,定义查找的范围</span><br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> max = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//2.循环查找 min &lt;= max</span><br>        <span class="hljs-keyword">while</span>(min &lt;= max)&#123;<br>            <span class="hljs-comment">//3.计算出中间位置 mid</span><br>            <span class="hljs-keyword">int</span> mid = (min + max) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//mid指向的元素 &gt; number</span><br>            <span class="hljs-keyword">if</span>(arr[mid] &gt; number)&#123;<br>                <span class="hljs-comment">//表示要查找的元素在左边.</span><br>                max = mid -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &lt; number)&#123;<br>                <span class="hljs-comment">//mid指向的元素 &lt; number</span><br>                <span class="hljs-comment">//表示要查找的元素在右边.</span><br>                min = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//mid指向的元素 == number</span><br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果min大于了max就表示元素不存在,返回-1.</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h4 id="demo1-5"><a href="#demo1-5" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQuiteSortDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        1，从右开始找比基准数小的</span><br><span class="hljs-comment">//        2，从左开始找比基准数大的</span><br><span class="hljs-comment">//        3，交换两个值的位置</span><br><span class="hljs-comment">//        4，红色继续往左找，蓝色继续往右找，直到两个箭头指向同一个索引为止</span><br><span class="hljs-comment">//        5，基准数归位</span><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>&#125;;<br><br>        quiteSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quiteSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> left0 = left;<br>        <span class="hljs-keyword">int</span> right0 = right;<br><br>        <span class="hljs-comment">//计算出基准数</span><br>        <span class="hljs-keyword">int</span> baseNumber = arr[left0];<br><br>        <span class="hljs-keyword">while</span>(left != right)&#123;<br><span class="hljs-comment">//        1，从右开始找比基准数小的</span><br>            <span class="hljs-keyword">while</span>(arr[right] &gt;= baseNumber &amp;&amp; right &gt; left)&#123;<br>                right--;<br>            &#125;<br><span class="hljs-comment">//        2，从左开始找比基准数大的</span><br>            <span class="hljs-keyword">while</span>(arr[left] &lt;= baseNumber &amp;&amp; right &gt; left)&#123;<br>                left++;<br>            &#125;<br><span class="hljs-comment">//        3，交换两个值的位置</span><br>            <span class="hljs-keyword">int</span> temp = arr[left];<br>            arr[left] = arr[right];<br>            arr[right] = temp;<br>        &#125;<br>        <span class="hljs-comment">//基准数归位</span><br>        <span class="hljs-keyword">int</span> temp = arr[left];<br>        arr[left] = arr[left0];<br>        arr[left0] = temp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2-5"><a href="#demo2-5" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQuiteSortDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        1，从右开始找比基准数小的</span><br><span class="hljs-comment">//        2，从左开始找比基准数大的</span><br><span class="hljs-comment">//        3，交换两个值的位置</span><br><span class="hljs-comment">//        4，红色继续往左找，蓝色继续往右找，直到两个箭头指向同一个索引为止</span><br><span class="hljs-comment">//        5，基准数归位</span><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>&#125;;<br><br>        quiteSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quiteSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(right &lt; left)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left0 = left;<br>        <span class="hljs-keyword">int</span> right0 = right;<br><br>        <span class="hljs-comment">//计算出基准数</span><br>        <span class="hljs-keyword">int</span> baseNumber = arr[left0];<br><br>        <span class="hljs-keyword">while</span>(left != right)&#123;<br><span class="hljs-comment">//        1，从右开始找比基准数小的</span><br>            <span class="hljs-keyword">while</span>(arr[right] &gt;= baseNumber &amp;&amp; right &gt; left)&#123;<br>                right--;<br>            &#125;<br><span class="hljs-comment">//        2，从左开始找比基准数大的</span><br>            <span class="hljs-keyword">while</span>(arr[left] &lt;= baseNumber &amp;&amp; right &gt; left)&#123;<br>                left++;<br>            &#125;<br><span class="hljs-comment">//        3，交换两个值的位置</span><br>            <span class="hljs-keyword">int</span> temp = arr[left];<br>            arr[left] = arr[right];<br>            arr[right] = temp;<br>        &#125;<br>        <span class="hljs-comment">//基准数归位</span><br>        <span class="hljs-keyword">int</span> temp = arr[left];<br>        arr[left] = arr[left0];<br>        arr[left0] = temp;<br><br>        quiteSort(arr,left0,left-<span class="hljs-number">1</span>);<br>        quiteSort(arr,left +<span class="hljs-number">1</span>,right0);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h4 id="demo1-6"><a href="#demo1-6" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBubbleSortDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-comment">//1 2 3 4 5</span><br><br>        <span class="hljs-comment">//第一轮</span><br>        <span class="hljs-comment">//把最大值5找出,并把它放到数组的最右边</span><br>        <span class="hljs-comment">//-1 是为了让索引不超出范围</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span> - <span class="hljs-number">0</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[i];<br>                arr[i] = arr[i + <span class="hljs-number">1</span>];<br>                arr[i + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br><br>        <span class="hljs-comment">//第二轮</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span> -<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[i];<br>                arr[i] = arr[i + <span class="hljs-number">1</span>];<br>                arr[i + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br>        <span class="hljs-comment">//第三轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span> -<span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[i];<br>                arr[i] = arr[i + <span class="hljs-number">1</span>];<br>                arr[i + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br>        <span class="hljs-comment">//第四轮</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span> -<span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[i];<br>                arr[i] = arr[i + <span class="hljs-number">1</span>];<br>                arr[i + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="demo2-6"><a href="#demo2-6" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBubbleSortDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-comment">//1 2 3 4 5</span><br>        bubbleSort(arr);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-comment">//外层循环控制的是次数 比数组的长度少一次.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length -<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">//内存循环就是实际循环比较的</span><br>            <span class="hljs-comment">//-1 是为了让数组不要越界</span><br>            <span class="hljs-comment">//-i 每一轮结束之后,我们就会少比一个数字.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day04 内部类&amp;Lambda</title>
    <link href="/2017/04/02/SAd04/"/>
    <url>/2017/04/02/SAd04/</url>
    
    <content type="html"><![CDATA[<h1 id="内部类-amp-Lambda"><a href="#内部类-amp-Lambda" class="headerlink" title="内部类&amp;Lambda"></a>内部类&amp;Lambda</h1><span id="more"></span><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        方在类的内部的类,就称之为”内部类”</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>​            类中方法外的内部类</p><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>​            方法中的内部类</p><h2 id="成员内部类-了解"><a href="#成员内部类-了解" class="headerlink" title="成员内部类(了解)"></a>成员内部类(了解)</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>​        类中方法外</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>​            外部类名.内部类名 对象名 = new 外部类名().new 内部类名();</p><h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>​            对象名.成员变量<br>​            对象名.成员方法</p><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Inner</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            创建内部类对象的格式:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                外部类名.内部类名 对象名 = new 外部类对象().new 内部类对象();</span><br><span class="hljs-comment">         */</span><br>        Outer.Inner i = <span class="hljs-keyword">new</span> Outer().<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br>        System.out.println(i.num);<br>        i.show();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner..show&quot;</span>);<br>            <span class="hljs-comment">// 内部类, 访问外部类成员, 可以直接访问, 包括私有</span><br>            System.out.println(a);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>​            被static修饰的成员内部类<br>​            外部类.内部类 对象名 = new 外部类.内部类();</p><h4 id="私有内部类"><a href="#私有内部类" class="headerlink" title="私有内部类"></a>私有内部类</h4><p>​            被private修饰的成员内部类<br>​            只能在他所在的外部类中,创建对象并使用.</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2Innerclass</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        私有成员内部类演示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// Outer.Inner oi = new Outer().new Inner();</span><br><br>        Outer o = <span class="hljs-keyword">new</span> Outer();<br>        o.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;inner..show&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        Inner i = <span class="hljs-keyword">new</span> Inner();<br>        i.show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3Innerclass</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        静态成员内部类演示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 外部类名.内部类名 对象名 = new 外部类名.内部类名();</span><br>        Outer.Inner oi = <span class="hljs-keyword">new</span> Outer.Inner();<br>        oi.show();<br><br>        Outer.Inner.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;inner..show&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;inner..method&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="局部内部类-1"><a href="#局部内部类-1" class="headerlink" title="局部内部类"></a>局部内部类</h2><h3 id="位置-1"><a href="#位置-1" class="headerlink" title="位置"></a>位置</h3><p>​        方法内部</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        只能在方法内部进行使用<br>​        局部内部类使用完毕之后, 会被立即销毁</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>​        临时性的创建子类对象<br>​        用完之后立即销毁</p><h3 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test4Innerclass</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        局部内部类:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            编写位置: 方法中</span><br><span class="hljs-comment">            访问方式: 只能在方法中, 创建对象并访问</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Outer o = <span class="hljs-keyword">new</span> Outer();<br>        o.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;show...&quot;</span>);<br>                System.out.println(a);<br>                System.out.println(b);<br>            &#125;<br>        &#125;<br><br>        Inner i = <span class="hljs-keyword">new</span> Inner();<br>        i.show();<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        没有名字的局部内部类<br>​        是局部内部类的简化写法</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类或父接口()&#123;<br><span class="hljs-comment">//父类或父接口的重写方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>注意    匿名内部类本质上是&quot;一个继承父类或实现接口的子类的对象&quot;</code></pre></div><h3 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test5Innerclass</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 创建实现类, 通过implements关键字去实现接口</span><br><span class="hljs-comment">        2. 重写方法</span><br><span class="hljs-comment">        3. 创建实现类对象</span><br><span class="hljs-comment">        4. 调用重写后的方法.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        匿名内部类:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            前提: 需要存在类\接口</span><br><span class="hljs-comment">            格式:</span><br><span class="hljs-comment">                    new 类名 \ 接口名 ()&#123;</span><br><span class="hljs-comment">                        重写方法</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterImpl ii = <span class="hljs-keyword">new</span> InterImpl();<br>        ii.show();<br><br>        <span class="hljs-comment">// 匿名内部类的理解: 将继承\实现, 方法重写, 创建对象, 放在了一步进行.</span><br>        <span class="hljs-comment">// 解释: 实现了Inter接口的, 一个实现类对象.</span><br>        <span class="hljs-keyword">new</span> Inter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我是匿名内部类中的show方法&quot;</span>);<br>            &#125;<br>        &#125;.show();<br><br>        <span class="hljs-comment">// 情况: 接口中存在多个方法</span><br>        Inter2 i = <span class="hljs-keyword">new</span> Inter2() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show1</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;show1...&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show2</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;show2...&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        i.show1();<br>        i.show2();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show1</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show2</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterImpl  重写的show方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSwimming</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        goSwimming(<span class="hljs-keyword">new</span> Swimming() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;铁汁, 我们去游泳吧&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用接口的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goSwimming</span><span class="hljs-params">(Swimming swimming)</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Swimming swim = new Swimming() &#123;</span><br><span class="hljs-comment">                @Override</span><br><span class="hljs-comment">                public void swim() &#123;</span><br><span class="hljs-comment">                    System.out.println(&quot;铁汁, 我们去游泳吧&quot;);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        swimming.swim();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    游泳接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Swimming</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        可以理解为”是对匿名内部类的再次简化”</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>​        父级必须是接口<br>​        接口中有且仅有一个抽象方法</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><p>​        (  )    -&gt;    {  }<br>​        (  ) : “重写的方法”的形参<br>​        {  } : “重写的方法”的方法体</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSwimming</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        goSwimming(() -&gt; System.out.println(<span class="hljs-string">&quot;铁汁, 我们去游泳吧&quot;</span>));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            理解: 对于Lambda表达式, 对匿名内部类进行了优化</span><br><span class="hljs-comment">         */</span><br>        goSwimming(() -&gt; System.out.println(<span class="hljs-string">&quot;铁汁, 我们去游泳吧&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用接口的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goSwimming</span><span class="hljs-params">(Swimming swimming)</span> </span>&#123;<br>        swimming.swim();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    游泳接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Swimming</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Lambda表达式的使用前提</span><br><span class="hljs-comment">            1. 一个接口</span><br><span class="hljs-comment">            2. 接口中有且仅有一个抽象方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        练习1：</span><br><span class="hljs-comment">            1. 编写一个接口（ShowHandler）</span><br><span class="hljs-comment">            2. 在该接口中存在一个抽象方法（show），该方法是无参数无返回值</span><br><span class="hljs-comment">            3. 在测试类（ShowHandlerDemo）中存在一个方法（useShowHandler）</span><br><span class="hljs-comment">                        方法的的参数是ShowHandler类型的</span><br><span class="hljs-comment">                        在方法内部调用了ShowHandler的show方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useShowHandler(<span class="hljs-keyword">new</span> ShowHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我是匿名内部类中的show方法&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// Lambda实现</span><br>        useShowHandler( () -&gt; System.out.println(<span class="hljs-string">&quot;我是Lambda中的show方法&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useShowHandler</span><span class="hljs-params">(ShowHandler showHandler)</span></span>&#123;<br>        showHandler.show();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ShowHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringHandlerDemo</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.首先存在一个接口（StringHandler）</span><br><span class="hljs-comment">        2.在该接口中存在一个抽象方法（printMessage），该方法是有参数无返回值</span><br><span class="hljs-comment">        3.在测试类（StringHandlerDemo）中存在一个方法（useStringHandler）</span><br><span class="hljs-comment">                方法的的参数是StringHandler类型的</span><br><span class="hljs-comment">                在方法内部调用了StringHandler的printMessage方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useStringHandler(<span class="hljs-keyword">new</span> StringHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我是匿名内部类&quot;</span> + msg);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// Lambda实现</span><br>        useStringHandler( msg -&gt; System.out.println(<span class="hljs-string">&quot;我是Lambda表达式&quot;</span> + msg));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useStringHandler</span><span class="hljs-params">(StringHandler stringHandler)</span></span>&#123;<br>        stringHandler.printMessage(<span class="hljs-string">&quot;itheima&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StringHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">(String msg)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test4-1"><a href="#test4-1" class="headerlink" title="test4"></a>test4</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomNumHandlerDemo</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 首先存在一个接口（RandomNumHandler）</span><br><span class="hljs-comment">        2. 在该接口中存在一个抽象方法（getNumber），该方法是无参数但是有返回值</span><br><span class="hljs-comment">        3. 在测试类（RandomNumHandlerDemo）中存在一个方法（useRandomNumHandler）</span><br><span class="hljs-comment">                方法的的参数是RandomNumHandler类型的</span><br><span class="hljs-comment">                在方法内部调用了RandomNumHandler的getNumber方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useRandomNumHandler(<span class="hljs-keyword">new</span> RandomNumHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span> </span>&#123;<br>                Random r = <span class="hljs-keyword">new</span> Random();<br>                <span class="hljs-keyword">int</span> num = r.nextInt(<span class="hljs-number">10</span>) + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span> num;<br>            &#125;<br>        &#125;);<br><br>        useRandomNumHandler( () -&gt; &#123;<br>                Random r = <span class="hljs-keyword">new</span> Random();<br>                <span class="hljs-keyword">int</span> num = r.nextInt(<span class="hljs-number">10</span>) + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span> num;<br>                <span class="hljs-comment">// 注意: 如果lambda所操作的接口中的方法, 有返回值, 一定要通过return语句, 将结果返回</span><br>                <span class="hljs-comment">// 否则会出现编译错误</span><br>        &#125; );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useRandomNumHandler</span><span class="hljs-params">(RandomNumHandler randomNumHandler)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result = randomNumHandler.getNumber();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RandomNumHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test5-1"><a href="#test5-1" class="headerlink" title="test5"></a>test5</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorDemo</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 首先存在一个接口（Calculator）</span><br><span class="hljs-comment">        2. 在该接口中存在一个抽象方法（calc），该方法是有参数也有返回值</span><br><span class="hljs-comment">        3. 在测试类（CalculatorDemo）中存在一个方法（useCalculator）</span><br><span class="hljs-comment">            方法的的参数是Calculator类型的</span><br><span class="hljs-comment">            在方法内部调用了Calculator的calc方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useCalculator(<span class="hljs-keyword">new</span> Calculator() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> a + b;<br>            &#125;<br>        &#125;);<br><br>        useCalculator( ( a,  b) -&gt;<br>             a + b<br>         );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useCalculator</span><span class="hljs-params">(Calculator calculator)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result = calculator.calc(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test6-1"><a href="#test6-1" class="headerlink" title="test6"></a>test6</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*useInter( (double a, double b) -&gt; &#123;</span><br><span class="hljs-comment">            return a + b;</span><br><span class="hljs-comment">        &#125;);*/</span><br><br>        useInter((a, b) -&gt;<br>                a + b<br>        );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useInter</span><span class="hljs-params">(Inter i)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = i.method(<span class="hljs-number">12.3</span>, <span class="hljs-number">22.3</span>);<br>        System.out.println(result);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-comment">// 用于计算 a + b 的结果并返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test7"><a href="#test7" class="headerlink" title="test7"></a>test7</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// Lambda调用</span><br>        <span class="hljs-comment">/*useInter(() -&gt;</span><br><span class="hljs-comment">                System.out.println(&quot;Lambda执行了&quot;)</span><br><span class="hljs-comment">        );*/</span><br><br>        useInter(<span class="hljs-keyword">new</span> Inter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类的show方法&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useInter</span><span class="hljs-params">(Inter i)</span> </span>&#123;<br>        i.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><h4 id="参数的数据类型可以省略"><a href="#参数的数据类型可以省略" class="headerlink" title="参数的数据类型可以省略"></a>参数的数据类型可以省略</h4><h4 id="如果参数只有一个-则-可以省略"><a href="#如果参数只有一个-则-可以省略" class="headerlink" title="如果参数只有一个,则()可以省略"></a>如果参数只有一个,则()可以省略</h4><h4 id="如果方法体只有一句话-则可以同时省略”-分号和return”"><a href="#如果方法体只有一句话-则可以同时省略”-分号和return”" class="headerlink" title="如果方法体只有一句话,则可以同时省略”{},分号和return”"></a>如果方法体只有一句话,则可以同时省略”{},分号和return”</h4><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>​        包含了很多数学运算的工具类.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>​        public static int abs(int num);<br>​            //求绝对值<br>​        public static double ceil(double num);<br>​                 //向上取整(取大于等于num的最小整数的double类型形式)<br>​        public static double floor(double num);<br>​             //向下取整(取小于等于num的最大整数的double类型形式)<br>​        public static int max(int a,int b);<br>​            //求两个数的最大值<br>​        public static double round(double num);<br>​            //四舍五入<br>​        public static double pow(double a, double b);<br>​            //计算a的b次幂<br>​        public static double random();<br>​            //产生0.0-1.0之间的随机数,包含0.0,不包含1.0</p><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public static int abs(int a)        返回参数的绝对值</span><br><span class="hljs-comment">//        int abs = Math.abs(10);</span><br><span class="hljs-comment">//        System.out.println(abs);</span><br><br><br><span class="hljs-comment">//        public static double ceil(double a)    向上取整</span><br><span class="hljs-comment">//        double ceil = Math.ceil(10.1);</span><br><span class="hljs-comment">//        System.out.println(ceil);</span><br><br><br><span class="hljs-comment">//        public static double floor(double a)    向下取整</span><br><span class="hljs-comment">//        double floor = Math.floor(10.9);</span><br><span class="hljs-comment">//        System.out.println(floor);</span><br><br><br><span class="hljs-comment">//        public static int round(float a)    四舍五入</span><br><span class="hljs-comment">//        long round = Math.round(10.1);</span><br><span class="hljs-comment">//        System.out.println(round);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        long round1 = Math.round(1.9);</span><br><span class="hljs-comment">//        System.out.println(round1);</span><br><br><br><span class="hljs-comment">//        public static int max(int a,int b)    返回两个int值中的较大值</span><br><span class="hljs-comment">//        int max = Math.max(10, 20);</span><br><span class="hljs-comment">//        System.out.println(max);</span><br><br><br><span class="hljs-comment">//        public static int min(int a,int b)    返回两个int值中的较小值</span><br><span class="hljs-comment">//        int min = Math.min(10, 20);</span><br><span class="hljs-comment">//        System.out.println(min);</span><br><br><br><span class="hljs-comment">//        public static double pow(double a,double b)返回a的b次幂的值</span><br><span class="hljs-comment">//        double pow = Math.pow(2, 3);</span><br><span class="hljs-comment">//        System.out.println(pow);</span><br><br><br><span class="hljs-comment">//        public static double random()        返回值为double的正值，[0.0,1.0)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-keyword">double</span> random = Math.random();<br>            System.out.println(random);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>​        包含了很多和系统有关系的方法</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>​        public static void exit(int num);<br>​            //停止虚拟机.(0代表正常停止,其他代表异常停止)<br>​        public static long currentTimeMillis();<br>​             //获取当前系统时间所代表的毫秒值(从1970.01.01.00:00:00开始计算)<br>​        public static void arraycopy(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝长度);<br>​             //数组拷贝</p><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        public static void exit(int status)    终止当前运行的 Java 虚拟机，非零表示异常终止</span><br><span class="hljs-comment">//        System.out.println(111);</span><br><span class="hljs-comment">//        //while(true)&#123;&#125;</span><br><span class="hljs-comment">//        System.exit(0);  //当代码执行到这个方法的时候,就表示虚拟机已经停止了</span><br><span class="hljs-comment">//        System.out.println(2222);</span><br><br><br><span class="hljs-comment">//        public static long currentTimeMillis()  返回当前时间(以毫秒为单位)</span><br><span class="hljs-comment">//        long start = System.currentTimeMillis();//获取当前时间</span><br><span class="hljs-comment">//        //System.out.println(l);</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="hljs-comment">//            System.out.println(i);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        long end = System.currentTimeMillis();//获取当前时间</span><br><span class="hljs-comment">//        System.out.println(end - start);//472 --- 得到的就是这个for循环运行的时间.</span><br><br><br><br><span class="hljs-comment">//        arraycopy(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝个数)    数组copy</span><br>        <span class="hljs-keyword">int</span> [] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">int</span> [] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">//需求:我要把arr1中的数据拷贝到arr2中.</span><br>        <span class="hljs-comment">//System.arraycopy(arr1,0,arr2,0,arr1.length);</span><br><br>        <span class="hljs-comment">/*for (int i = 0; i &lt; arr2.length; i++) &#123;</span><br><span class="hljs-comment">            System.out.println(arr2[i]);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">//我要把arr1最后两个元素,拷贝到arr2的最后两个索引上</span><br>        System.arraycopy(arr1,<span class="hljs-number">3</span>,arr2,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr2.length; i++) &#123;<br>            System.out.println(arr2[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内部类</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day03 接口&amp;多态</title>
    <link href="/2017/04/02/SAd03/"/>
    <url>/2017/04/02/SAd03/</url>
    
    <content type="html"><![CDATA[<h1 id="接口-amp-多态"><a href="#接口-amp-多态" class="headerlink" title="接口&amp;多态"></a>接口&amp;多态</h1><span id="more"></span><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        被一对大括号包围的一块代码</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h4><h5 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h5><p>​                方法中</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>​                限制变量的使用范围</p><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        局部代码块</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            位置：方法中定义</span><br><span class="hljs-comment">            作用：限定变量的生命周期，及早释放，提高内存利用率</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        &#123;<br>            <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>            System.out.println(a);<br>        &#125;<br><br>       <span class="hljs-comment">// System.out.println(a);</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h4><h5 id="位置-1"><a href="#位置-1" class="headerlink" title="位置"></a>位置</h5><p>​                类中方法外</p><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>​                抽取构造方法的重复代码</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>​                只能抽取构造方法中开头的相同代码<br>​                构造代码块是在构造方法之前执行</p><h5 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造代码块:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            位置：类中方法外定义</span><br><span class="hljs-comment">            特点：每次构造方法执行的时，都会执行该代码块中的代码，并且在构造方法执行前执行</span><br><span class="hljs-comment">            作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student stu1 = <span class="hljs-keyword">new</span> Student();<br>        Student stu2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">10</span>);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;好好学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;空参数构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;带参数构造方法...........&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><h5 id="位置-2"><a href="#位置-2" class="headerlink" title="位置"></a>位置</h5><p>​                类中方法外</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>​                static{   …    }</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>​                在类加载时静态代码块执行<br>​                静态代码块只能执行一次</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>​                用户加载配置文件<br>​                加载驱动</p><h5 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        静态代码块:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            位置：类中方法外定义</span><br><span class="hljs-comment">            特点：需要通过static关键字修饰，随着类的加载而加载，并且只执行一次</span><br><span class="hljs-comment">            作用：在类加载的时候做一些数据初始化的操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person();<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">10</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是静态代码块, 我执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是Person类的空参数构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是Person类的带...........参数构造方法&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        类中的方法全是抽象方法时, 该类就可以设置为”接口”</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​            public  interface 接口名{  }</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​            public class 类名  implements 接口名{   }</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>​        接口中的方法全是抽象方法<br>​        子类必须重写所有的抽象方法</p><h3 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>​            只能是静态常量<br>​            默认修饰符 public static final</p><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>​            只能是抽象方法<br>​            默认修饰符 public abstract</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>​            接口没有构造方法</p><h3 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h3><h4 id="interface-Inter"><a href="#interface-Inter" class="headerlink" title="interface Inter"></a>interface Inter</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="interface-InterA"><a href="#interface-InterA" class="headerlink" title="interface InterA"></a>interface InterA</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print1</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print2</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-InterImpl"><a href="#class-InterImpl" class="headerlink" title="class InterImpl"></a>class InterImpl</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter</span> , <span class="hljs-title">InterA</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是实现类中的study方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print1</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print2</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test1Interface"><a href="#class-Test1Interface" class="headerlink" title="class Test1Interface"></a>class Test1Interface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Interface</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        接口的定义格式:</span><br><span class="hljs-comment">            public interface 接口名 &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        类实现接口的格式:</span><br><span class="hljs-comment">            public class 类名 implements 接口名 &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// Inter i = new Inter();</span><br>        InterImpl ii = <span class="hljs-keyword">new</span> InterImpl();<br>        ii.study();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h3><h4 id="interface-Inter-1"><a href="#interface-Inter-1" class="headerlink" title="interface Inter"></a>interface Inter</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// public Inter()&#123;&#125;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestInterface"><a href="#class-TestInterface" class="headerlink" title="class TestInterface"></a>class TestInterface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        成员变量: 只能是常量 系统会默认加入三个关键字</span><br><span class="hljs-comment">                    public static final</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        构造方法: 没有</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        成员方法: 只能是抽象方法, 系统会默认加入两个关键字</span><br><span class="hljs-comment">                    public abstract</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Inter.NUM);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InterImpl</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// NUM = 20;</span><br>        System.out.println(NUM);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h3><h4 id="interface-InterA-1"><a href="#interface-InterA-1" class="headerlink" title="interface InterA"></a>interface InterA</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是A接口中的show方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="interface-InterB"><a href="#interface-InterB" class="headerlink" title="interface InterB"></a>interface InterB</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterB</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B....show方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestInterface-1"><a href="#class-TestInterface-1" class="headerlink" title="class TestInterface"></a>class TestInterface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterAImpl ia = <span class="hljs-keyword">new</span> InterAImpl();<br>        ia.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterAImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InterA</span>, <span class="hljs-title">InterB</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h3><h4 id="interface-InterA-2"><a href="#interface-InterA-2" class="headerlink" title="interface InterA"></a>interface InterA</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterA</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterA...show&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="interface-InterB-1"><a href="#interface-InterB-1" class="headerlink" title="interface InterB"></a>interface InterB</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterB</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterB...show&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestInterface-2"><a href="#class-TestInterface-2" class="headerlink" title="class TestInterface"></a>class TestInterface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterAImpl ia = <span class="hljs-keyword">new</span> InterAImpl();<br>        <span class="hljs-comment">// ia.show();</span><br><br>        InterA.show();<br><br>        InterB.show();<br><br>        <span class="hljs-comment">// InterAImpl.show();</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterAImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InterA</span> , <span class="hljs-title">InterB</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h2><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>​            public default  返回值类型 方法名(参数…){  }</p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>​            子类可以重写, 也可以不重写, 不做强制要求<br>​            如果重写,  在重写方法中不能携带default关键字<br>​            如果多个接口中出现相同的默认方法, 则子类必须重写<br>​            JKD8之后才能使用</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><p>​            public static 返回值类型 方法名(参数…){  }</p><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><p>​            只能通过接口名调用-&gt;”接口名.方法()”<br>​            JKD8之后才能使用</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><p>​            private 返回值类型 方法名(参数…){  }<br>​            private static 返回值类型 方法名(参数…){  }</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>​            一般用于抽取默认方法,或者静态方法重复部分<br>​            JKD9之后才能使用</p><h4 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h4><h5 id="interface-Inter-2"><a href="#interface-Inter-2" class="headerlink" title="interface Inter"></a>interface Inter</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;start方法执行了...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">end</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;end方法执行了...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;日志记录 ( 模拟 )&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;权限校验 ( 模拟 )&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>        check();<br>        System.out.println(<span class="hljs-string">&quot;open方法执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>&#123;<br>        check();<br>        System.out.println(<span class="hljs-string">&quot;close方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-TestInterface-3"><a href="#class-TestInterface-3" class="headerlink" title="class TestInterface"></a>class TestInterface</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterImpl ii = <span class="hljs-keyword">new</span> InterImpl();<br>        ii.start();<br>        ii.end();<br><br>        Inter.open();<br>        Inter.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="类与接口关系"><a href="#类与接口关系" class="headerlink" title="类与接口关系"></a>类与接口关系</h2><h3 id="类与类"><a href="#类与类" class="headerlink" title="类与类"></a>类与类</h3><p>​        继承关系extends<br>​        只能单一继承,不能多继承,但可以多层继承</p><h3 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h3><p>​        实现关系Implements<br>​        可以单实现,也可以多实现<br>​        类可以继承父类的同时,实现多个接口<br>​            必须先继承后实现</p><h3 id="接口与接口"><a href="#接口与接口" class="headerlink" title="接口与接口"></a>接口与接口</h3><p>​        继承关系extends<br>​        可以单继承, 也可以多继承</p><h3 id="test6"><a href="#test6" class="headerlink" title="test6"></a>test6</h3><h4 id="interface-Inter-3"><a href="#interface-Inter-3" class="headerlink" title="interface Inter"></a>interface Inter</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Inter....show&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Fu"><a href="#class-Fu" class="headerlink" title="class Fu"></a>class Fu</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu...show&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestInterface-4"><a href="#class-TestInterface-4" class="headerlink" title="class TestInterface"></a>class TestInterface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterImpl ii = <span class="hljs-keyword">new</span> InterImpl();<br>        ii.show();<br>        <span class="hljs-comment">// 如果直接父类, 和接口中出现了相同的方法声明, 但是代码逻辑不一样</span><br>        <span class="hljs-comment">// 优先使用直接父类的代码逻辑.</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test7"><a href="#test7" class="headerlink" title="test7"></a>test7</h3><h4 id="interface-InterA-3"><a href="#interface-InterA-3" class="headerlink" title="interface InterA"></a>interface InterA</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showA</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterA...method方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="interface-InterB-2"><a href="#interface-InterB-2" class="headerlink" title="interface InterB"></a>interface InterB</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterB</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showB</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterB...method方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="interface-InterC"><a href="#interface-InterC" class="headerlink" title="interface InterC"></a>interface InterC</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InterA</span> , <span class="hljs-title">InterB</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InterC接口,解决代码逻辑冲突问题, 重写method方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-InterImpl-1"><a href="#class-InterImpl-1" class="headerlink" title="class InterImpl"></a>class InterImpl</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    接口实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InterC</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showA</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showB</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestInterface-5"><a href="#class-TestInterface-5" class="headerlink" title="class TestInterface"></a>class TestInterface</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InterImpl ii = <span class="hljs-keyword">new</span> InterImpl();<br>        ii.method();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        “父类/父接口”引用指向”子类对象”<br>​        理解<br>​             Cat c = new Cat();<br>​                  //我要一只猫,你给我一只猫<br>​             Animal a = new Cat();<br>​                 //我要一只动物,你给我一只猫</p><h4 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Polymorphic</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        多态的前提:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            1. 要有(继承 \ 实现)关系</span><br><span class="hljs-comment">            2. 要有方法重写</span><br><span class="hljs-comment">            3. 要有父类引用, 指向子类对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 当前事物, 是一只猫</span><br>        Cat c = <span class="hljs-keyword">new</span> Cat();<br>        <span class="hljs-comment">// 当前事物, 是一只动物</span><br>        Animal a = <span class="hljs-keyword">new</span> Cat();<br>        a.eat();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="成员-1"><a href="#成员-1" class="headerlink" title="成员"></a>成员</h3><h4 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h4><p>​            编译看父类, 运行看父类</p><h4 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h4><p>​            编译看父类, 运行看子类</p><h4 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2Polymorpic</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">         多态的成员访问特点:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                成员变量: 编译看左边 (父类), 运行看左边 (父类)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                成员方法: 编译看左边 (父类), 运行看右边 (子类)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Fu f = <span class="hljs-keyword">new</span> Zi();<br>        System.out.println(f.num);<br>        f.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu.. method&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Zi.. method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test3-1"><a href="#test3-1" class="headerlink" title="test3"></a>test3</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3Polymorpic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useAnimal(<span class="hljs-keyword">new</span> Dog());<br>        useAnimal(<span class="hljs-keyword">new</span> Cat());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useAnimal</span><span class="hljs-params">(Animal a)</span></span>&#123;  <span class="hljs-comment">// Animal a = new Dog();</span><br>                                             <span class="hljs-comment">// Animal a = new Cat();</span><br>        a.eat();<br>        <span class="hljs-comment">//a.watchHome();</span><br><br>        <span class="hljs-comment">// 判断a变量记录的类型, 是否是Dog</span><br>        <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>            Dog dog = (Dog) a;<br>            dog.watchHome();<br>        &#125;<br><br><span class="hljs-comment">//        Dog dog = (Dog) a;</span><br><span class="hljs-comment">//        dog.watchHome();  // ClassCastException  类型转换异常</span><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗吃肉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watchHome</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;看家&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>​            提高了代码的扩展性</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​            不能使用子类独有的功能</p><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test4Polymorpic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1. 向上转型 : 父类引用指向子类对象</span><br>        Fu f = <span class="hljs-keyword">new</span> Zi();<br>        f.show();<br>        <span class="hljs-comment">// 多态的弊端: 不能调用子类特有的成员</span><br>        <span class="hljs-comment">// f.method();</span><br><br>        <span class="hljs-comment">// A: 直接创建子类对象</span><br>        <span class="hljs-comment">// B: 向下转型</span><br><br>        <span class="hljs-comment">// 2. 向下转型 : 从父类类型, 转换回子类类型</span><br>        Zi z = (Zi) f;<br>        z.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu..show...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Zi..show...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是子类特有的方法, method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="榨汁机"><a href="#榨汁机" class="headerlink" title="榨汁机"></a>榨汁机</h4><p>​            <code>TestDemo.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Apple a = <span class="hljs-keyword">new</span> Apple();<br>        榨汁机运行(a);<br><br>        Orange o = <span class="hljs-keyword">new</span> Orange();<br>        榨汁机运行(o);<br><br>        Xg xg = <span class="hljs-keyword">new</span> Xg();<br>        榨汁机运行(xg);<br>    &#125;<br><br>                                <span class="hljs-comment">//Fruit a =  new Apple();</span><br>                                <span class="hljs-comment">//Fruit a =  new Orange();</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 榨汁机运行(Fruit a) &#123;<br>        a.榨汁();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//水果类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span> </span>&#123;<br>    <span class="hljs-comment">//所有水果都必须具有榨汁的功能-规则</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> 榨汁();<br>&#125;<br><span class="hljs-comment">//苹果</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fruit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 榨汁() &#123;<br>        System.out.println(<span class="hljs-string">&quot;🍎🍎🍎...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//橘子</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Orange</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fruit</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 榨汁() &#123;<br>        System.out.println(<span class="hljs-string">&quot;🍊🍊🍊...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//西瓜</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Xg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fruit</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 榨汁() &#123;<br>        System.out.println(<span class="hljs-string">&quot;🍉🍉🍉...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="抓老鼠"><a href="#抓老鼠" class="headerlink" title="抓老鼠"></a>抓老鼠</h4><p>​            <code>TestDemo.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CM c = <span class="hljs-keyword">new</span> Cat();<br>        抓老鼠(c);<br>        Dog d = <span class="hljs-keyword">new</span> Dog();<br>        抓老鼠(d);<br>        捕鼠器 b = <span class="hljs-keyword">new</span> 捕鼠器();<br>        抓老鼠(b);<br>    &#125;<br><br>    <span class="hljs-comment">//假装我们家需要抓老鼠</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 抓老鼠(CM c) &#123;<br>        c.catchMouse();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//抓老鼠接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CM</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//猫</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CM</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫捉老鼠...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//狗</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CM</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗拿耗子...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 捕鼠器 <span class="hljs-keyword">implements</span> <span class="hljs-title">CM</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;捕鼠器夹老鼠...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><p>​        boolean flag = 对象  Instanceof 类型;</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>​        判断对象是否是指定类型的对象<br>​        如果是就返回true<br>​        如果不是就返回false</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗吃肉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watchHome</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;看家&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test4Polymorpic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        useAnimal(<span class="hljs-keyword">new</span> Dog());<br>        useAnimal(<span class="hljs-keyword">new</span> Cat());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useAnimal</span><span class="hljs-params">(Animal a)</span></span>&#123;  <span class="hljs-comment">// Animal a = new Dog();</span><br>                                             <span class="hljs-comment">// Animal a = new Cat();</span><br>        a.eat();<br>        <span class="hljs-comment">//a.watchHome();</span><br><br><span class="hljs-comment">//        Dog dog = (Dog) a;</span><br><span class="hljs-comment">//        dog.watchHome();  // ClassCastException  类型转换异常</span><br><br>        <span class="hljs-comment">// 判断a变量记录的类型, 是否是Dog</span><br>        <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>            Dog dog = (Dog) a;<br>            dog.watchHome();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>接口</tag>
      
      <tag>多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day02 继承&amp;抽象</title>
    <link href="/2017/04/02/SAd02/"/>
    <url>/2017/04/02/SAd02/</url>
    
    <content type="html"><![CDATA[<h1 id="继承-amp-抽象"><a href="#继承-amp-抽象" class="headerlink" title="继承&amp;抽象"></a>继承&amp;抽象</h1><span id="more"></span><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        所谓继承,  和生活中的继承类似,  都是子继承父,  子就拥有了父的财产<br>​        Java中的继承类似, 子类继承父类,  子类拥有父类的成员</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>​        public class 子类 extends 父类{ }</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        Java只支持单一继承, 不支持多继承,但支持多层继承<br>​        构造方法不能集成</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>​            提高代码的复用性<br>​                其实就是少写代码了<br>​            提高代码的维护性</p><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><p>​            增加了代码的耦合性<br>​            降低了代码的灵活性<br>​                继承就只能全部继承, 不允许部分继承</p><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><h5 id="class-Teacher"><a href="#class-Teacher" class="headerlink" title="class Teacher"></a>class Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    String id;<br>    String name;<br>    String age;<br>    String birthday;<br>    String address;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    String id;<br>    String name;<br>    String age;<br>    String birthday;<br>    String address;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><h5 id="class-Teacher-1"><a href="#class-Teacher-1" class="headerlink" title="class Teacher"></a>class Teacher</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-1"><a href="#class-Student-1" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Person"><a href="#class-Person" class="headerlink" title="class Person"></a>class Person</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String id;<br>    String name;<br>    String age;<br>    String birthday;<br>    String address;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="成员特点"><a href="#成员特点" class="headerlink" title="成员特点"></a>成员特点</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>​            就近原则</p><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>​            就近原则</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>​            子类构造方法执行之前必须先执行父类构造方法<br>​                有儿子之前必须先有父亲<br>​            子类默认调用父类的无参构造方法<br>​            如果想调用父类的有参构造方法,可以使用”super(参数…)”<br>​            如果想调用本类的有参构造发方法,可以使用”this(参数…)”, 但调用的最后, 仍然需要调用父类的构造方法</p><h4 id="test3"><a href="#test3" class="headerlink" title="test3"></a>test3</h4><h5 id="class-A"><a href="#class-A" class="headerlink" title="class A"></a>class A</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AAA..类中的method方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-B"><a href="#class-B" class="headerlink" title="class B"></a>class B</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB...类中的method方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-C"><a href="#class-C" class="headerlink" title="class C"></a>class C</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试类class-TestExtends"><a href="#测试类class-TestExtends" class="headerlink" title="测试类class TestExtends"></a>测试类class TestExtends</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestExtends</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        C c = <span class="hljs-keyword">new</span> C();<br>        c.methodA();<br>        c.methodB();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="test5"><a href="#test5" class="headerlink" title="test5"></a>test5</h4><h5 id="class-Person-1"><a href="#class-Person-1" class="headerlink" title="class Person"></a>class Person</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/*public Person()&#123;</span><br><span class="hljs-comment">        super();</span><br><span class="hljs-comment">        System.out.println(&quot;我是父类的空参数构造方法&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Person(String name, int age)&#123;</span><br><span class="hljs-comment">        this.name = name;</span><br><span class="hljs-comment">        this.age = age;</span><br><span class="hljs-comment">        System.out.println(&quot;我是父类的带参数构造方法&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Student-2"><a href="#class-Student-2" class="headerlink" title="class Student"></a>class Student</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    思路1: 子类在初始化之前, 一定要先完成父类数据的初始化.</span><br><span class="hljs-comment">    思路2: 子类在初始化之前, 一定要先访问到父类的构造方法, 完成父类数据的初始化</span><br><span class="hljs-comment">    结论: 系统在每一个构造方法中, 默认隐藏的一句代码 super();</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-comment">// 子类自己特有的属性.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> score;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> score)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(name,age);<br>        <span class="hljs-keyword">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-comment">/*public Student()&#123;</span><br><span class="hljs-comment">        super();</span><br><span class="hljs-comment">        System.out.println(&quot;我是子类的空参数构造方法..........&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Student(int score)&#123;</span><br><span class="hljs-comment">        super();</span><br><span class="hljs-comment">        this.score = score;</span><br><span class="hljs-comment">        System.out.println(&quot;我是子类的带参数构造方法!!!&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> score)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.score = score;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Test"><a href="#class-Test" class="headerlink" title="class Test"></a>class Test</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">100</span>);<br><br>        System.out.println(stu.getName() + <span class="hljs-string">&quot;...&quot;</span> + stu.getAge() + <span class="hljs-string">&quot;...&quot;</span> + stu.getScore());<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="class-Test2"><a href="#class-Test2" class="headerlink" title="class Test2"></a>class Test2</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Zi z = <span class="hljs-keyword">new</span> Zi();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">// 空参数构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fu</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类空参数构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 带参数构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Zi</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// super();</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Zi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(age);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h2><h3 id="this-成员"><a href="#this-成员" class="headerlink" title="this.成员"></a>this.成员</h3><p>​        找本类成员</p><h3 id="super-成员"><a href="#super-成员" class="headerlink" title="super.成员"></a>super.成员</h3><p>​        找父类成员</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​        super关键字是能在子类中使用</p><h3 id="test4"><a href="#test4" class="headerlink" title="test4"></a>test4</h3><h4 id="class-Fu"><a href="#class-Fu" class="headerlink" title="class Fu"></a>class Fu</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Zi"><a href="#class-Zi" class="headerlink" title="class Zi"></a>class Zi</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br><br>    <span class="hljs-comment">// 子父类当中, 出现了重名的成员变量</span><br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">30</span>;<br><br>        System.out.println(a);  <span class="hljs-comment">// 30</span><br><br>        <span class="hljs-comment">// 需求1: 在控制台打印本类成员变量 20</span><br>        System.out.println(<span class="hljs-keyword">this</span>.a);<br><br>        <span class="hljs-comment">// 需求2: 在控制台打印父类成员变量 10</span><br>        System.out.println(<span class="hljs-keyword">super</span>.a);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test-1"><a href="#class-Test-1" class="headerlink" title="class Test"></a>class Test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Zi z = <span class="hljs-keyword">new</span> Zi();<br>        z.method();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test5-1"><a href="#test5-1" class="headerlink" title="test5"></a>test5</h3><h4 id="class-Fu-1"><a href="#class-Fu-1" class="headerlink" title="class Fu"></a>class Fu</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类show方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Zi-1"><a href="#class-Zi-1" class="headerlink" title="class Zi"></a>class Zi</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类show方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.show();<br>        <span class="hljs-keyword">super</span>.show();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test-2"><a href="#class-Test-2" class="headerlink" title="class Test"></a>class Test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Zi z = <span class="hljs-keyword">new</span> Zi();<br>        z.method();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        当父类中的方法和子类中的方法完全一模一样的时候, 这两个方法之间的关系就是”方法重写”<br>​        方法重写也叫”方法覆写. 方法覆盖”</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>​        有子父类关系<br>​        子类中方法和父类中方法一模一样</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>​        当子类对父类方法不满意的时候,就可以重写</p><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>​        1.私有方法不能重写<br>​        2.静态方法虽然可以书写,但不属于方法重写<br>​        3.构造方法不能重写<br>​        4.子类方法的权限必须大于等于父类方法权限</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="方法重写Override"><a href="#方法重写Override" class="headerlink" title="方法重写Override"></a>方法重写Override</h4><p>​            在子父类中<br>​            方法声明一模一样<br>​            在方法中, 除了方法体之外的东西, 统称方法声明</p><h4 id="方法重载Overload"><a href="#方法重载Overload" class="headerlink" title="方法重载Overload"></a>方法重载Overload</h4><p>​            在同一个类中<br>​            方法名相同<br>​            参数不同</p><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><h4 id="iPearV1"><a href="#iPearV1" class="headerlink" title="iPearV1"></a>iPearV1</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">iPearV1</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 定义手机类 iPearV1</span><br><span class="hljs-comment">                    call(String name) : 打电话方法</span><br><span class="hljs-comment">                    smallBlack() : 语音助手 (speak english...)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(String name)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;给&quot;</span> + name + <span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smallBlack</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;speak english...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-iPearV2"><a href="#class-iPearV2" class="headerlink" title="class iPearV2"></a>class iPearV2</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">iPearV2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">iPearV1</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        2. 定义新手机类 iPearV2</span><br><span class="hljs-comment">                    call(String name) : 打电话方法</span><br><span class="hljs-comment">                    smallBlack() : 语音助手 (speak english...  说中文)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       方法重写的应用场景:</span><br><span class="hljs-comment">            当子类需要父类的功能，而功能主体子类有自己特有内容</span><br><span class="hljs-comment">            可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smallBlack</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.smallBlack();<br>        System.out.println(<span class="hljs-string">&quot;说中文&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-TestOverride"><a href="#class-TestOverride" class="headerlink" title="class TestOverride"></a>class TestOverride</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOverride</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        需求:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            1. 定义手机类 iPearV1</span><br><span class="hljs-comment">                    call(String name) : 打电话方法</span><br><span class="hljs-comment">                    smallBlack() : 语音助手 (speak english...)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 定义新手机类 iPearV2</span><br><span class="hljs-comment">                    call(String name) : 打电话方法</span><br><span class="hljs-comment">                    smallBlack() : 语音助手 (speak english...  说中文)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        方法重写的应用场景:</span><br><span class="hljs-comment">            当子类需要父类的功能，而功能主体子类有自己特有内容</span><br><span class="hljs-comment">            可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        注意:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            方法重写: 在继承体系中, 子类出现了和父类一模一样的方法声明 (方法名, 参数列表, 返回值类型)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            方法重载: 在同一个类中, 方法名相同, 参数列表不同, 与返回值无关.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        iPearV2 i = <span class="hljs-keyword">new</span> iPearV2();<br>        i.smallBlack();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="override2"><a href="#override2" class="headerlink" title="override2"></a>override2</h3><h4 id="class-Fu-2"><a href="#class-Fu-2" class="headerlink" title="class Fu"></a>class Fu</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu...&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu...method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Zi-2"><a href="#class-Zi-2" class="headerlink" title="class Zi"></a>class Zi</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-comment">//@Override // 注解: 检查当前的方法是否是一个正确的重写方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Zi...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test-3"><a href="#class-Test-3" class="headerlink" title="class Test"></a>class Test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Zi z = <span class="hljs-keyword">new</span> Zi();<br>        z.show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>​        只能在本类内部访问</p><h3 id="缺省"><a href="#缺省" class="headerlink" title="缺省"></a>缺省</h3><p>​        在同一个包下,可以访问</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>​        在同一个包下, 或者在子类中, 可以访问</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>​        任何地方都可以访问</p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><h5 id="test1-1"><a href="#test1-1" class="headerlink" title="test1"></a>test1</h5><h6 id="class-Fu-3"><a href="#class-Fu-3" class="headerlink" title="class Fu"></a>class Fu</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;默认权限 ---- show方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;protected权限 ---- print方法&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-Zi-3"><a href="#class-Zi-3" class="headerlink" title="class Zi"></a>class Zi</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-comment">// 同一个包下, 被子类访问</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-Test-4"><a href="#class-Test-4" class="headerlink" title="class Test"></a>class Test</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 同一个包下, 无关类访问</span><br>        Fu f = <span class="hljs-keyword">new</span> Fu();<br>        f.show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="test2-1"><a href="#test2-1" class="headerlink" title="test2"></a>test2</h5><h6 id="class-Son"><a href="#class-Son" class="headerlink" title="class Son"></a>class Son</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.test1.Fu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>     <span class="hljs-comment">// 不同包下, 被子类访问</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-comment">// super.show();</span><br>         <span class="hljs-keyword">super</span>.print();<br>     &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="class-Test-5"><a href="#class-Test-5" class="headerlink" title="class Test"></a>class Test</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test2;<br><br><span class="hljs-keyword">import</span> com.itheima.test1.Fu;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 不同包下, 被无关类访问</span><br>        Fu f = <span class="hljs-keyword">new</span> Fu();<br>        <span class="hljs-comment">//f.show();</span><br>        <span class="hljs-comment">//f.print();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>​        abstract</p><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>​        被abstract修饰的类, 被称之为”抽象类”<br>​        被abstract修饰的方法, 被称之为”抽象方法”</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>​        抽象方法没有方法体<br>​        抽象方法所在的类必须是抽象类<br>​        子类必须重写抽象类中的所有抽象方法</p><h3 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h3><p>​        抽象类不能创建对象<br>​        抽象类有构造方法<br>​        抽象类中可以没有抽象方法,但抽象方法所在的类必须是抽象类<br>​        抽象类的子类<br>​            要么也是抽象类<br>​            要么就重写抽象类中的所有抽象方法(推荐)</p><h3 id="test1-2"><a href="#test1-2" class="headerlink" title="test1"></a>test1</h3><h4 id="class-Animal"><a href="#class-Animal" class="headerlink" title="class Animal"></a>class Animal</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drink</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喝水&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Dog"><a href="#class-Dog" class="headerlink" title="class Dog"></a>class Dog</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗吃肉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Cat"><a href="#class-Cat" class="headerlink" title="class Cat"></a>class Cat</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="abstract-class-Demo"><a href="#abstract-class-Demo" class="headerlink" title="abstract class Demo"></a>abstract class Demo</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test1Animal"><a href="#class-Test1Animal" class="headerlink" title="class Test1Animal"></a>class Test1Animal</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Animal</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        需求：定义猫类（Cat）和狗类（Dog）</span><br><span class="hljs-comment">            猫类成员方法：eat（猫吃鱼）drink（喝水…）</span><br><span class="hljs-comment">            狗类成员方法：eat（狗吃肉）drink（喝水…）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        步骤：</span><br><span class="hljs-comment">            1. 猫类和狗类中存在共性内容，应向上抽取出一个动物类（Animal）</span><br><span class="hljs-comment">            2. 父类Animal中，无法将 eat 方法具体实现描述清楚，所以定义为抽象方法</span><br><span class="hljs-comment">            3. 抽象方法需要存活在抽象类中，将Animal定义为抽象类</span><br><span class="hljs-comment">            4. 让 Cat 和 Dog 分别继承 Animal，重写eat方法</span><br><span class="hljs-comment">            5. 测试类中创建 Cat 和 Dog 对象，调用方法测试</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 抽象类不能创建对象</span><br><span class="hljs-comment">        2. 抽象类中有构造方法</span><br><span class="hljs-comment">        3. 抽象类的子类</span><br><span class="hljs-comment">                A: 必须要重写父类中所有的抽象方法</span><br><span class="hljs-comment">                B: 可以将自己也变成一个抽象类</span><br><span class="hljs-comment">        4. 抽象类中的方法</span><br><span class="hljs-comment">                抽象类中可以没有抽象方法, 但是有抽象方法的类一定是抽象类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Dog d = <span class="hljs-keyword">new</span> Dog();<br>        d.eat();<br>        d.drink();<br><br>        Cat c = <span class="hljs-keyword">new</span> Cat();<br>        c.drink();<br>        c.eat();<br><br>        <span class="hljs-comment">//Animal a = new Animal();</span><br>        <span class="hljs-comment">//a.eat();</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test2-2"><a href="#test2-2" class="headerlink" title="test2"></a>test2</h3><h4 id="abstract-class-CompositionTemplate"><a href="#abstract-class-CompositionTemplate" class="headerlink" title="abstract class CompositionTemplate"></a>abstract class CompositionTemplate</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    作文模板类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompositionTemplate</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;&lt;&lt;我的爸爸&gt;&gt;&quot;</span>);<br><br>        body();<br><br>        System.out.println(<span class="hljs-string">&quot;啊~ 这就是我的爸爸&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">body</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Tom"><a href="#class-Tom" class="headerlink" title="class Tom"></a>class Tom</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CompositionTemplate</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">body</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;那是一个秋天, 风儿那么缠绵,记忆中, &quot;</span> +<br>                <span class="hljs-string">&quot;那天爸爸骑车接我放学回家,我的脚卡在了自行车链当中, 爸爸蹬不动,他就站起来蹬...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Tony"><a href="#class-Tony" class="headerlink" title="class Tony"></a>class Tony</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tony</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CompositionTemplate</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">body</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*public void write()&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test-6"><a href="#class-Test-6" class="headerlink" title="class Test"></a>class Test</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Tom t = <span class="hljs-keyword">new</span> Tom();<br>        t.write();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>​        代表最终的,不可改变的</p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><h4 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h4><p>​            该类不能被继承</p><h4 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h4><p>​            该方法不能被重写</p><h4 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h4><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p>​                值不允许修改</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><p>​                内存地址不允许修改</p><h3 id="TestFinal"><a href="#TestFinal" class="headerlink" title="TestFinal"></a>TestFinal</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFinal</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        final修饰变量:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            基本数据类型变量: 其值不能被更改</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            引用数据类型变量: 地址值不能被更改, 但是可以修改对象的属性值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 常量的命名规范: 如果是一个单词, 所有字母大写, 如果是多个单词, 所有字母大写, 但是中间需要使用_分隔</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> A = <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// a = 10;</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_VALUE = <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">final</span> Student stu = <span class="hljs-keyword">new</span> Student();<br>        stu.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        stu.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br><br>        <span class="hljs-comment">// stu = new Student();</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-comment">// final修饰成员变量 初始化时机</span><br>    <span class="hljs-comment">// 1. 在创建的时候, 直接给值</span><br>    <span class="hljs-comment">// 2. 在构造方法结束之前, 完成赋值</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*final class Fu &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">class Zi extends Fu &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;*/</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>继承</tag>
      
      <tag>抽象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE进阶-Day01 static</title>
    <link href="/2017/04/02/SAd01/"/>
    <url>/2017/04/02/SAd01/</url>
    
    <content type="html"><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><span id="more"></span><h2 id="分类思想"><a href="#分类思想" class="headerlink" title="分类思想"></a>分类思想</h2><p>​    概述<br>​        一个类的代码太多了,写不下了,就分多个类书写<br>​    拆分规则<br>​        一般都拆分为三个部分<br>​        “用户/界面”相关的<br>​            界面层/UI层/Web层/Controller层<br>​        其他代码,一般是和业务有关的<br>​            业务逻辑层/Service层<br>​        操作数据,进行增删改查的<br>​            数据访问层/Dao层</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        包其实就是文件夹, 当一个包中类太多的时候,可以分包存储</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><h4 id="包名全小写字母"><a href="#包名全小写字母" class="headerlink" title="包名全小写字母"></a>包名全小写字母</h4><h4 id="一般是公司域名倒着写-并且去掉www"><a href="#一般是公司域名倒着写-并且去掉www" class="headerlink" title="一般是公司域名倒着写,并且去掉www"></a>一般是公司域名倒着写,并且去掉www</h4><p>​            com.itheima<br>​            com.baidu</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法:"></a>语法:</h5><p>​                package 包名;</p><h5 id="位置"><a href="#位置" class="headerlink" title="位置:"></a>位置:</h5><p>​                类的最上边</p><h5 id="意义"><a href="#意义" class="headerlink" title="意义:"></a>意义:</h5><p>​                表示当前类所在的位置</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法:"></a>语法:</h5><p>​                import  包名.类名;</p><h5 id="位置-1"><a href="#位置-1" class="headerlink" title="位置:"></a>位置:</h5><p>​                类的上边, package的下边</p><h5 id="意义-1"><a href="#意义-1" class="headerlink" title="意义:"></a>意义:</h5><p>​                导包,本质上其实是导入类, 相当于把类拉到了本类内部, 在本类可以直接使用被导入的类.</p><h3 id="类之间的访问"><a href="#类之间的访问" class="headerlink" title="类之间的访问"></a>类之间的访问</h3><h4 id="相同包"><a href="#相同包" class="headerlink" title="相同包"></a>相同包</h4><p>​            直接访问即可</p><h4 id="不同包"><a href="#不同包" class="headerlink" title="不同包"></a>不同包</h4><p>​            先导入包,再访问<br>​            通过全类名(“包名 + 类名”), 进行访问</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// sss</span><br><span class="hljs-keyword">package</span> com.itheima.test;<br><br><span class="hljs-comment">// import com.itheima.test2.Student;</span><br><br><span class="hljs-keyword">import</span> com.itheima.test2.Student;<br><span class="hljs-comment">//import com.itheima.test3.Student;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    不同包下的相互访问</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        1. 先导包后访问 (import)</span><br><span class="hljs-comment">        2. 通过全类名(包名+类名)访问</span><br><span class="hljs-comment">                com.itheima.test2.Student stu = new com.itheima.test2.Student();</span><br><span class="hljs-comment">                应用场景: 多个包下,出现了相同的类名称, 就可以使用这种访问进行区分</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPackage</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student();<br><br>        com.itheima.test3.Student stu2 = <span class="hljs-keyword">new</span> com.itheima.test3.Student();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="static-1"><a href="#static-1" class="headerlink" title="static"></a>static</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​        表示静态, 可以修饰成员变量. 可以修饰成员方法</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​        被static修饰的成员变量, 所有对象共享(共用一个)<br>​        被static修饰的成员方法, 可以通过”类名.静态方法”来访问</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        静态只能访问静态</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>​        当成员变量被所有对象共享时, 可以把成员变量设置为static<br>​        当想使用”类名.方法”调用方法时, 可以把成员方法设置为static</p><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="class-Student"><a href="#class-Student" class="headerlink" title="class Student"></a>class Student</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">static</span> String school;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        静态随着类的加载而加载, 优先于对象存在</span><br><span class="hljs-comment">        非静态需要在创建对象之后,才可以进行使用</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        1. 静态方法中, 只能访问静态成员(成员变量, 成员方法)</span><br><span class="hljs-comment">        2. 非静态方法中, 可以使用静态成员, 也可以使用非静态成员</span><br><span class="hljs-comment">        3. 静态方法中, 没有this关键字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;...&quot;</span> + age + <span class="hljs-string">&quot;...&quot;</span> + school);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// this: 当前对象的引用</span><br>        <span class="hljs-comment">// this需要在创建对象之后, 才会存在, 静态存在的时候, 对象可能还没有被创建</span><br>        <span class="hljs-comment">// this.name = &quot;张三&quot;;</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="class-Test1Static"><a href="#class-Test1Static" class="headerlink" title="class Test1Static"></a>class Test1Static</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Static</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 被static修饰的成员, 会被该类的所有对象所[共享]</span><br><span class="hljs-comment">        2. 被static修饰的成员, 会随着类的加载而加载, 优先于对象存在</span><br><span class="hljs-comment">        3. 多了一种调用方式, 可以通过类名.进行调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student.school = <span class="hljs-string">&quot;传智专修学院&quot;</span>;<br>        Student stu1 = <span class="hljs-keyword">new</span> Student();<br>        stu1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>        stu1.age = <span class="hljs-number">23</span>;<br>        <span class="hljs-comment">//stu1.school = &quot;传智专修学院&quot;;</span><br>        stu1.show();<br><br>        Student stu2 = <span class="hljs-keyword">new</span> Student();<br>        stu2.show();<br><br>        method();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
